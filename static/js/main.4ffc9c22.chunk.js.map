{"version":3,"sources":["components/AppBar.tsx","pages/index.tsx","utils/index.tsx","config/index.ts","state/name-the-note.ts","state/settings.ts","state/fretboard.ts","state/find-the-note.ts","state/statistics.ts","components/Fretboard/Frets.tsx","images/wood.png","components/Fretboard/Notes.tsx","components/Fretboard/Strings.tsx","components/Fretboard/Fretboard.tsx","pages/find-the-note.tsx","pages/fretboard-reference.tsx","components/GameControls.tsx","components/Keyboard.tsx","pages/name-the-note.tsx","pages/settings.tsx","pages/statistics.tsx","components/App.tsx","index.tsx"],"names":["Title","chakra","Text","baseStyle","fontWeight","AppBar","location","useLocation","h","mb","boxShadow","as","HStack","maxW","pathname","to","Link","variant","aria-label","icon","BackIcon","boxSize","IndexPage","VStack","align","localStorageEffect","node","setSelf","onSet","key","value","ls","newValue","getNoteNames","times","map","sharps","Note","simplify","repeat","percent","total","round","fretboards","fretCount","id","fretMarkers","guages","reverse","name","tuning","ntnTotalAttemptsState","atom","default","effects_UNSTABLE","ntnTotalCorrectState","ntnGameAttemptsState","ntnGameCorrectState","ntnNotesQueueState","selector","get","shuffle","fretboardNotesState","ntnActiveNoteState","ntnGameSelector","set","reset","DefaultValue","activeNote","isCorrect","Number","notesQueue","nextNote","findIndex","nextQueue","fretboardIdState","fretboardIdSelector","leftHandedState","fretboardState","config","fretboard","leftHanded","flatMap","note","i","steps","simple","enharmonic","string","ftnNotesQueueState","ftnTargetNoteState","ftnTargetNoteCountState","notes","targetNote","filter","length","ftnFrettedNotesState","ftnGameSelector","targetNoteIndex","indexOf","gameStatsState","game","correct","attempts","FretsGrid","Grid","top","left","right","bottom","position","pointerEvents","Fret","alignItems","flexDirection","justifyContent","_before","w","background","Nut","Box","content","FretMarker","Circle","bg","Frets","useRecoilValue","columns","templateColumns","fretNum","numDots","hasMarker","includes","styles","undefined","sx","templateRows","NotesGrid","SimpleGrid","color","display","borderRadius","transform","Notes","frettedNotes","referenceMode","onNoteClick","identity","isFretted","Boolean","find","data-note","onClick","StringsGrid","String","Flex","Strings","_","Board","woodSrc","Fretboard","FindTheNotePage","useRecoilState","updateGame","remainingCount","px","without","alignSelf","simplur","FretboardReference","StatBadge","Badge","minW","fontSize","GameControls","onResetGame","spacing","ResetIcon","colorScheme","Keyboard","noteNames","gridGap","noteName","NameTheNotePage","resetGame","useResetRecoilState","FretboardSelect","fretboardId","setFretboardId","onChange","event","target","LeftHandedMode","setLeftHanded","htmlFor","isChecked","checked","SettingsPage","StatisticsPage","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","stats","resetStats","isNumeric","leastDestructiveRef","ref","ml","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ffc9c22.chunk.js","sourcesContent":["import {\n  chakra,\n  Container,\n  Flex,\n  HStack,\n  Icon,\n  IconButton,\n  Text,\n} from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { IoArrowBackOutline as BackIcon } from \"react-icons/io5\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst Title = chakra(Text, {\n  baseStyle: {\n    fontWeight: \"bold\",\n  },\n});\n\nconst AppBar: FC = () => {\n  const location = useLocation();\n\n  return (\n    <Flex h=\"50px\" mb={4} boxShadow=\"lg\">\n      <Container as={HStack} maxW=\"container.xl\">\n        {location.pathname !== \"/\" && (\n          <IconButton\n            to=\"/\"\n            as={Link}\n            variant=\"ghost\"\n            aria-label=\"Back\"\n            icon={<Icon as={BackIcon} boxSize=\"20px\" />}\n          />\n        )}\n        {location.pathname === \"/\" && <Title>Note Trainer</Title>}\n        {location.pathname === \"/name-the-note\" && <Title>Name the Note</Title>}\n        {location.pathname === \"/find-the-note\" && <Title>Find the Note</Title>}\n        {location.pathname === \"/fretboard-reference\" && (\n          <Title>Fretboard Reference</Title>\n        )}\n        {location.pathname === \"/settings\" && <Title>Settings</Title>}\n        {location.pathname === \"/statistics\" && <Title>Statistics</Title>}\n      </Container>\n    </Flex>\n  );\n};\n\nexport default AppBar;\n","import { Button, Container, VStack } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst IndexPage: FC = () => (\n  <Container as={VStack} align=\"stretch\">\n    <Button as={Link} to=\"/name-the-note\">\n      Name the Note\n    </Button>\n    <Button as={Link} to=\"/find-the-note\">\n      Find the Note\n    </Button>\n    <Button as={Link} to=\"/fretboard-reference\">\n      Fretboard Reference\n    </Button>\n    <Button as={Link} to=\"/settings\">\n      Settings\n    </Button>\n    <Button as={Link} to=\"/statistics\">\n      Statistics\n    </Button>\n  </Container>\n);\n\nexport default IndexPage;\n","import { Note } from \"@tonaljs/tonal\";\nimport * as ls from \"local-storage\";\nimport { repeat, round, times } from \"lodash\";\nimport { AtomEffect } from \"recoil\";\n\nexport const localStorageEffect =\n  <T,>(): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value) {\n      setSelf(value);\n    }\n\n    onSet((newValue) => ls.set<T>(key, newValue));\n  };\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"open-e-6\": {\n    fretCount: 12,\n    id: \"open-e-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"standard-4\": {\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n};\n","import { findIndex, shuffle } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ntnTotalAttemptsState = atom<number>({\n  key: \"ntnTotalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnTotalCorrectState = atom<number>({\n  key: \"ntnTotalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameAttemptsState = atom<number>({\n  key: \"ntnGameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameCorrectState = atom<number>({\n  key: \"ntnGameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnNotesQueueState = atom<INote[]>({\n  key: \"ntnNotesQueueState\",\n  default: selector<INote[]>({\n    key: \"ntnNotesQueueDefaultSelector\",\n    get: ({ get }) => shuffle(get(fretboardNotesState)),\n  }),\n});\n\nexport const ntnActiveNoteState = atom<INote>({\n  key: \"ntnActiveNoteState\",\n  default: selector<INote>({\n    key: \"ntnActiveNoteDefaultSelector\",\n    get: ({ get }) => get(ntnNotesQueueState)[0],\n  }),\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameSelector = selector<INote>({\n  key: \"ntnGameSelector\",\n  get: ({ get }) => get(ntnActiveNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameAttemptsState);\n      reset(ntnGameCorrectState);\n      return;\n    }\n\n    const activeNote = get(ntnActiveNoteState);\n    const isCorrect = newValue.name === activeNote.name;\n\n    // Update stats\n    set(ntnGameAttemptsState, get(ntnGameAttemptsState) + 1);\n    set(ntnGameCorrectState, get(ntnGameCorrectState) + Number(isCorrect));\n    set(ntnTotalAttemptsState, get(ntnTotalAttemptsState) + 1);\n    set(ntnTotalCorrectState, get(ntnTotalCorrectState) + Number(isCorrect));\n\n    if (!isCorrect) {\n      return;\n    }\n\n    // Next note\n    const notesQueue = get(ntnNotesQueueState);\n    const activeNoteIndex = findIndex(notesQueue, activeNote) + 1;\n\n    let nextNote = notesQueue[activeNoteIndex];\n    // Reshuffle queue\n    if (!nextNote) {\n      const nextQueue = shuffle(notesQueue);\n      nextNote = nextQueue[0];\n      set(ntnNotesQueueState, nextQueue);\n    }\n\n    set(ntnActiveNoteState, nextNote);\n  },\n});\n","import { atom, selector } from \"recoil\";\nimport { IFretboardId } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { ntnActiveNoteState, ntnGameSelector } from \"./name-the-note\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretboardIdSelector = selector<IFretboardId>({\n  key: \"fretboardIdSelector\",\n  get: ({ get }) => get(fretboardIdState),\n  set: ({ set, reset }, newValue) => {\n    set(fretboardIdState, newValue);\n    reset(ntnActiveNoteState); // Active note may not exist on new fretboard\n    reset(ntnGameSelector);\n  },\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { filter, shuffle } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ftnNotesQueueState = atom<string[]>({\n  key: \"ftnNotesQueueState\",\n  default: shuffle(getNoteNames()),\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ftnTargetNoteState = atom<string>({\n  key: \"ftnTargetNoteState\",\n  default: selector({\n    key: \"ftnTargetNoteDefaultSelector\",\n    get: ({ get }) => get(ftnNotesQueueState)[0],\n  }),\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ftnTargetNoteCountState = selector<number>({\n  key: \"ftnTargetNoteCountState\",\n  get: ({ get }) => {\n    const notes = get(fretboardNotesState);\n    const targetNote = get(ftnTargetNoteState);\n\n    return filter(notes, [\"name\", targetNote]).length;\n  },\n});\n\nexport const ftnFrettedNotesState = atom<INote[]>({\n  key: \"ftnFrettedNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ftnGameSelector = selector<INote[]>({\n  key: \"ftnGameSelector\",\n  get: ({ get }) => get(ftnFrettedNotesState),\n  set: ({ get, set, reset }, newValue) => {\n    if (\n      !(\n        newValue instanceof DefaultValue ||\n        newValue.length === get(ftnTargetNoteCountState)\n      )\n    ) {\n      set(ftnFrettedNotesState, newValue);\n      return;\n    }\n\n    const targetNote = get(ftnTargetNoteState);\n    const notesQueue = get(ftnNotesQueueState);\n    const targetNoteIndex = notesQueue.indexOf(targetNote) + 1;\n\n    let nextNote = notesQueue[targetNoteIndex];\n    // Reshuffle queue\n    if (!nextNote) {\n      const nextQueue = shuffle(notesQueue);\n      nextNote = nextQueue[0];\n      set(ftnNotesQueueState, nextQueue);\n    }\n\n    set(ftnTargetNoteState, nextNote);\n    reset(ftnFrettedNotesState);\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { percent } from \"utils\";\nimport {\n  ntnGameSelector,\n  ntnTotalAttemptsState,\n  ntnTotalCorrectState,\n} from \"./name-the-note\";\n\ninterface GameStats {\n  game: string;\n  percent: number;\n  correct: number;\n  attempts: number;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => [\n    {\n      game: \"Name the Note\",\n      correct: get(ntnTotalCorrectState),\n      attempts: get(ntnTotalAttemptsState),\n      percent: percent(get(ntnTotalCorrectState), get(ntnTotalAttemptsState)),\n    },\n  ],\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameSelector);\n      reset(ntnTotalCorrectState);\n      reset(ntnTotalAttemptsState);\n    }\n  },\n});\n","import { Box, chakra, Circle, Grid } from \"@chakra-ui/react\";\nimport { times } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState, leftHandedState } from \"state\";\n\nconst FretsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst Fret = chakra(Grid, {\n  baseStyle: {\n    position: \"relative\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    _before: {\n      w: \"8px\",\n      top: 0,\n      bottom: 0,\n      position: \"absolute\",\n      background: \"linear-gradient(to right, gold, gray, gold)\",\n    },\n  },\n});\n\nconst Nut = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: 0,\n      bottom: 0,\n      w: \"16px\",\n      content: `\"\"`,\n      position: \"absolute\",\n      background: \"gray.200\",\n    },\n  },\n});\n\nconst FretMarker = chakra(Circle, {\n  baseStyle: {\n    h: 6,\n    w: 6,\n    bg: \"gray.200\",\n  },\n});\n\nconst Frets: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n  const leftHanded = useRecoilValue(leftHandedState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <FretsGrid templateColumns={`repeat(${columns}, 1fr)`}>\n      {times(columns).map((i) => {\n        const fretNum = leftHanded ? fretboard.fretCount - i : i;\n        const numDots = fretNum % 12 === 0 ? 2 : 1;\n        const hasMarker = fretboard.fretMarkers.includes(fretNum);\n\n        const styles = {\n          \":before\": {\n            [leftHanded ? \"left\" : \"right\"]: \"-4px\",\n            content: fretNum === fretboard.fretCount ? undefined : `\"\"`,\n          },\n        };\n\n        return !fretNum ? (\n          <Nut key={fretNum} sx={styles} />\n        ) : (\n          <Fret\n            sx={styles}\n            key={fretNum}\n            templateRows={`repeat(${numDots}, 1fr)`}\n          >\n            {hasMarker && times(numDots).map((i) => <FretMarker key={i} />)}\n          </Fret>\n        );\n      })}\n    </FretsGrid>\n  );\n};\n\nexport default Frets;\n","export default __webpack_public_path__ + \"static/media/wood.3cf6e95a.png\";","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\nimport { find, identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, fretboardState } from \"state\";\nimport { INote } from \"types\";\n\nconst NotesGrid = chakra(SimpleGrid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n  },\n});\n\nconst Note = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      h: \"34px\",\n      w: \"34px\",\n      top: \"50%\",\n      left: \"50%\",\n      content: `\"\"`,\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      position: \"absolute\",\n      justifyContent: \"center\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  },\n});\n\ninterface Props {\n  frettedNotes: INote[];\n  referenceMode?: boolean;\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Notes: FC<Props> = ({\n  frettedNotes,\n  referenceMode,\n  onNoteClick = identity,\n}) => {\n  const fretboard = useRecoilValue(fretboardState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <NotesGrid columns={columns}>\n      {notes.map((note, i) => {\n        const { id, name, string } = note;\n        const isFretted = Boolean(find(frettedNotes, { id, string }));\n\n        return (\n          <Note\n            key={i}\n            data-note={name}\n            onClick={() => onNoteClick(note)}\n            sx={\n              isFretted\n                ? {\n                    \":before\": {\n                      bg: \"red.500\",\n                      content: referenceMode ? `\"${note.name}\"` : undefined,\n                    },\n                  }\n                : undefined\n            }\n          />\n        );\n      })}\n    </NotesGrid>\n  );\n};\n\nexport default Notes;\n","import { chakra, Flex, Grid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\n\nconst StringsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst String = chakra(Flex, {\n  baseStyle: {\n    alignItems: \"center\",\n    _before: {\n      w: \"100%\",\n      content: `\"\"`,\n      boxShadow: \"md\",\n      background: \"linear-gradient(to bottom, gray, white, gray)\",\n    },\n  },\n});\n\nconst Strings: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <StringsGrid templateRows={`repeat(${fretboard.tuning.length}, 1fr)`}>\n      {fretboard.tuning.map((_, i) => (\n        <String\n          key={i}\n          sx={{\n            \":before\": {\n              h: (fretboard.guages[i] || 1) + \"px\",\n            },\n          }}\n        />\n      ))}\n    </StringsGrid>\n  );\n};\n\nexport default Strings;\n","import { Box, chakra } from \"@chakra-ui/react\";\nimport Frets from \"components/Fretboard/Frets\";\nimport woodSrc from \"images/wood.png\";\nimport React, { FC } from \"react\";\nimport { INote } from \"types\";\nimport Notes from \"./Notes\";\nimport Strings from \"./Strings\";\n\nconst Board = chakra(Box, {\n  baseStyle: {\n    h: 220,\n    position: \"relative\",\n    bg: `#222222 url(${woodSrc})`,\n  },\n});\n\ninterface Props {\n  frettedNotes: INote[];\n  referenceMode?: boolean;\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Fretboard: FC<Props> = ({ frettedNotes, referenceMode, onNoteClick }) => (\n  <Board>\n    <Frets />\n    <Strings />\n    <Notes\n      onNoteClick={onNoteClick}\n      frettedNotes={frettedNotes}\n      referenceMode={referenceMode}\n    />\n  </Board>\n);\n\nexport default Fretboard;\n","import { Heading, VStack } from \"@chakra-ui/react\";\nimport Fretboard from \"components/Fretboard\";\nimport { without } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport simplur from \"simplur\";\nimport {\n  ftnGameSelector,\n  ftnTargetNoteCountState,\n  ftnTargetNoteState,\n} from \"state\";\nimport { INote } from \"types\";\n\nconst FindTheNotePage: FC = () => {\n  const targetNote = useRecoilValue(ftnTargetNoteState);\n  const [frettedNotes, updateGame] = useRecoilState(ftnGameSelector);\n  const targetCount = useRecoilValue(ftnTargetNoteCountState);\n  const remainingCount = targetCount - frettedNotes.length;\n\n  const handleNoteClick = (note: INote) => {\n    if (note.name === targetNote) {\n      updateGame([...without(frettedNotes, note), note]);\n    }\n  };\n\n  return (\n    <VStack align=\"stretch\" px={2}>\n      <Fretboard frettedNotes={frettedNotes} onNoteClick={handleNoteClick} />\n      <Heading alignSelf=\"center\">\n        {simplur`Find ${targetNote} in ${remainingCount} plac[e|es]`}\n      </Heading>\n    </VStack>\n  );\n};\n\nexport default FindTheNotePage;\n","import { VStack } from \"@chakra-ui/react\";\nimport Fretboard from \"components/Fretboard\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState } from \"state\";\n\nconst FretboardReference: FC = () => {\n  const notes = useRecoilValue(fretboardNotesState);\n\n  return (\n    <VStack align=\"stretch\" px={2}>\n      <Fretboard frettedNotes={notes} referenceMode />\n    </VStack>\n  );\n};\n\nexport default FretboardReference;\n","import {\n  Badge,\n  ButtonProps,\n  chakra,\n  Flex,\n  HStack,\n  Icon,\n  IconButton,\n  Text,\n} from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { GrRefresh as ResetIcon } from \"react-icons/gr\";\nimport { percent } from \"utils\";\n\nconst StatBadge = chakra(Badge, {\n  baseStyle: {\n    minW: \"60px\",\n    fontSize: \"xl\",\n    display: \"flex\",\n    borderRadius: \"md\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\ninterface Props {\n  correct: number;\n  attempts: number;\n  onResetGame?: ButtonProps[\"onClick\"];\n}\n\nconst GameControls: FC<Props> = ({ correct, attempts, onResetGame }) => {\n  return (\n    <HStack align=\"stretch\">\n      <HStack spacing={1}>\n        {/* <IconButton\n          aria-label=\"Play\"\n          icon={<Icon as={PlayIcon} boxSize=\"20px\" />}\n        />\n        <IconButton\n          aria-label=\"Stop\"\n          icon={<Icon as={StopIcon} boxSize=\"20px\" />}\n        /> */}\n        <IconButton\n          aria-label=\"Reset\"\n          onClick={onResetGame}\n          icon={<Icon as={ResetIcon} boxSize=\"20px\" />}\n        />\n      </HStack>\n      <HStack align=\"stretch\" spacing={1}>\n        <StatBadge colorScheme=\"green\">{correct}</StatBadge>\n        <StatBadge colorScheme=\"red\">{attempts - correct}</StatBadge>\n        <Flex px={2} alignItems=\"center\">\n          <Text fontWeight=\"bold\">{percent(correct, attempts)}%</Text>\n        </Flex>\n      </HStack>\n    </HStack>\n  );\n};\n\nexport default GameControls;\n","import { Button, SimpleGrid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { getNoteNames } from \"utils\";\n\ninterface Props {\n  onClick: (noteName: string) => void;\n}\n\nconst Keyboard: FC<Props> = ({ onClick }) => {\n  const noteNames = getNoteNames();\n\n  return (\n    <SimpleGrid columns={12} gridGap={2}>\n      {noteNames.map((noteName) => (\n        <Button\n          key={noteName}\n          colorScheme=\"red\"\n          onClick={() => onClick(noteName)}\n        >\n          {noteName}\n        </Button>\n      ))}\n    </SimpleGrid>\n  );\n};\n\nexport default Keyboard;\n","import { VStack } from \"@chakra-ui/react\";\nimport Fretboard from \"components/Fretboard\";\nimport GameControls from \"components/GameControls\";\nimport Keyboard from \"components/Keyboard\";\nimport React, { FC } from \"react\";\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\nimport {\n  ntnGameAttemptsState,\n  ntnGameCorrectState,\n  ntnGameSelector,\n} from \"state\";\nimport { INote } from \"types\";\n\nconst NameTheNotePage: FC = () => {\n  const correct = useRecoilValue(ntnGameCorrectState);\n  const attempts = useRecoilValue(ntnGameAttemptsState);\n  const [activeNote, updateGame] = useRecoilState(ntnGameSelector);\n  const resetGame = useResetRecoilState(ntnGameSelector);\n\n  const handleAnswer = (name: string) => {\n    updateGame({ name } as INote);\n  };\n\n  return (\n    <VStack align=\"stretch\" px={2}>\n      <GameControls\n        correct={correct}\n        attempts={attempts}\n        onResetGame={resetGame}\n      />\n      <Fretboard frettedNotes={activeNote ? [activeNote] : []} />\n      <Keyboard onClick={handleAnswer} />\n    </VStack>\n  );\n};\n\nexport default NameTheNotePage;\n","import {\n  Container,\n  FormControl,\n  FormLabel,\n  Select,\n  SelectProps,\n  Switch,\n  VStack,\n} from \"@chakra-ui/react\";\nimport * as config from \"config\";\nimport { map } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { fretboardIdSelector, leftHandedState } from \"state\";\nimport { IFretboardId } from \"types\";\n\nconst FretboardSelect = () => {\n  const [fretboardId, setFretboardId] = useRecoilState(fretboardIdSelector);\n\n  const handleChange: SelectProps[\"onChange\"] = (event) => {\n    setFretboardId(event.target.value as IFretboardId);\n  };\n\n  return (\n    <FormControl>\n      <FormLabel>Fretboard</FormLabel>\n      <Select value={fretboardId} onChange={handleChange}>\n        {map(config.fretboards, (fretboard) => (\n          <option key={fretboard.id} value={fretboard.id}>\n            {fretboard.name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nconst LeftHandedMode = () => {\n  const [leftHanded, setLeftHanded] = useRecoilState(leftHandedState);\n\n  return (\n    <FormControl display=\"flex\" alignItems=\"center\">\n      <FormLabel htmlFor=\"left-handed\" mb=\"0\">\n        Left Handed Mode\n      </FormLabel>\n      <Switch\n        id=\"left-handed\"\n        isChecked={leftHanded}\n        onChange={(event) => setLeftHanded(event.target.checked)}\n      />\n    </FormControl>\n  );\n};\n\nexport const SettingsPage: FC = () => (\n  <Container>\n    <VStack spacing={6}>\n      <FretboardSelect />\n      <LeftHandedMode />\n    </VStack>\n  </Container>\n);\n\nexport default SettingsPage;\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Button,\n  Container,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { FC, useRef } from \"react\";\nimport { useRecoilValue, useResetRecoilState } from \"recoil\";\nimport { gameStatsState } from \"state\";\n\nconst StatisticsPage: FC = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef<HTMLButtonElement>(null);\n  const stats = useRecoilValue(gameStatsState);\n  const resetStats = useResetRecoilState(gameStatsState);\n\n  const handleResetClick = () => {\n    resetStats();\n    onClose();\n  };\n\n  return (\n    <Container as={VStack} align=\"stretch\">\n      <Table variant=\"simple\">\n        <Thead>\n          <Tr>\n            <Th>Game</Th>\n            <Th isNumeric>Correct</Th>\n            <Th isNumeric>Total</Th>\n            <Th isNumeric>Percent</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {stats.map(({ game, correct, attempts, percent }) => (\n            <Tr key={game}>\n              <Td>{game}</Td>\n              <Td isNumeric>{correct}</Td>\n              <Td isNumeric>{attempts}</Td>\n              <Td isNumeric>{percent}%</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n      <AlertDialog\n        isOpen={isOpen}\n        onClose={onClose}\n        leastDestructiveRef={cancelRef}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Reset Statistics\n            </AlertDialogHeader>\n            <AlertDialogBody>\n              Are you sure? This can't be undone.\n            </AlertDialogBody>\n            <AlertDialogFooter>\n              <Button\n                ref={cancelRef}\n                onClick={onClose}\n                variant=\"outline\"\n                colorScheme=\"blue\"\n              >\n                Cancel\n              </Button>\n              <Button\n                ml={2}\n                colorScheme=\"red\"\n                variant=\"outline\"\n                onClick={handleResetClick}\n              >\n                Reset\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n      <Button onClick={onOpen} colorScheme=\"red\" variant=\"outline\">\n        Reset Statistics\n      </Button>\n    </Container>\n  );\n};\n\nexport default StatisticsPage;\n","import AppBar from \"components/AppBar\";\nimport IndexPage from \"pages\";\nimport FindTheNotePage from \"pages/find-the-note\";\nimport FretboardReference from \"pages/fretboard-reference\";\nimport NameTheNotePage from \"pages/name-the-note\";\nimport SettingsPage from \"pages/settings\";\nimport StatisticsPage from \"pages/statistics\";\nimport React, { FC } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst App: FC = () => (\n  <Router>\n    <AppBar />\n    <Switch>\n      <Route path=\"/name-the-note\">\n        <NameTheNotePage />\n      </Route>\n      <Route path=\"/find-the-note\">\n        <FindTheNotePage />\n      </Route>\n      <Route path=\"/fretboard-reference\">\n        <FretboardReference />\n      </Route>\n      <Route path=\"/settings\">\n        <SettingsPage />\n      </Route>\n      <Route path=\"/statistics\">\n        <StatisticsPage />\n      </Route>\n      <Route path=\"/\">\n        <IndexPage />\n      </Route>\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport App from \"components/App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}