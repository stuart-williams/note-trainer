{"version":3,"file":"static/js/name-the-note.f9230560.chunk.js","mappings":"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","sources":["components/AnswerIndicator.tsx","components/GameCountdown.tsx","components/GameOver.tsx","components/GameControls.tsx","components/Keyboard.tsx","pages/name-the-note.tsx"],"sourcesContent":["import { Center, chakra, Fade, Icon } from \"@chakra-ui/react\";\nimport React, { FC, useEffect, useRef } from \"react\";\nimport {\n  AiOutlineCheck as CorrectIcon,\n  AiOutlineClose as IncorrectIcon,\n} from \"react-icons/ai\";\nimport { useMountedState } from \"react-use\";\nimport { useRecoilState } from \"recoil\";\nimport { answerIndicatorState } from \"state\";\nimport { IBinary } from \"types\";\n\nconst Mask = chakra(Center, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    opacity: 0.7,\n    position: \"absolute\",\n  },\n});\n\ninterface Props {\n  indicateStates?: IBinary[];\n}\n\nconst AnswerIndicator: FC<Props> = ({ indicateStates = [0, 1] }) => {\n  const isMounted = useMountedState();\n  const [indicator, setIndicator] = useRecoilState(answerIndicatorState);\n\n  const ref = useRef<IBinary>(0);\n  ref.current = (indicator > -1 ? indicator : ref.current) as IBinary;\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (isMounted()) {\n        setIndicator(-1);\n      }\n    }, 250);\n  }, [indicator]);\n\n  return (\n    <Fade unmountOnExit in={indicateStates.includes(indicator as IBinary)}>\n      <Mask bg={!ref.current ? \"red.500\" : \"green.500\"}>\n        <Icon\n          color=\"white\"\n          boxSize=\"100px\"\n          as={!ref.current ? IncorrectIcon : CorrectIcon}\n        />\n      </Mask>\n    </Fade>\n  );\n};\n\nexport default AnswerIndicator;\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  Heading,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { identity } from \"lodash\";\nimport React, { FC, useEffect, useRef } from \"react\";\nimport { useCountdown } from \"utils\";\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst GameCountdown: FC<Props> = ({ isOpen, onClose }) => {\n  const countdown = useCountdown({ onExpire: onClose });\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      countdown.start(3000);\n    }\n  }, [isOpen]);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={identity}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent w=\"auto\">\n          <AlertDialogBody as={VStack} py={4} px={8}>\n            <Heading size=\"4xl\">{countdown.remaining.seconds}</Heading>\n            <Text fontSize=\"xl\">GET READY</Text>\n          </AlertDialogBody>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default GameCountdown;\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Button,\n} from \"@chakra-ui/react\";\nimport React, { FC, useRef } from \"react\";\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onPlayAgainClick: () => void;\n}\n\nconst GameOver: FC<Props> = ({\n  children,\n  isOpen,\n  onClose,\n  onPlayAgainClick,\n}) => {\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={onClose}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent mx={4}>\n          <AlertDialogHeader>Game Over</AlertDialogHeader>\n          <AlertDialogBody>{children}</AlertDialogBody>\n          <AlertDialogFooter>\n            <Button ref={cancelRef} onClick={onClose} colorScheme=\"blue\">\n              Close\n            </Button>\n            <Button ml={2} colorScheme=\"blue\" onClick={onPlayAgainClick}>\n              Play Again\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default GameOver;\n","import {\n  Badge,\n  Center,\n  chakra,\n  Container,\n  HStack,\n  Icon,\n  IconButton,\n  Radio,\n  RadioGroup,\n  Text,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport GameCountdown from \"components/GameCountdown\";\nimport GameOver from \"components/GameOver\";\nimport { gameDurations } from \"config\";\nimport { identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { IoPlay as PlayIcon, IoStop as StopIcon } from \"react-icons/io5\";\nimport { useRecoilState } from \"recoil\";\nimport { gameDurationState } from \"state\";\nimport { IGameDuration, IStats } from \"types\";\nimport { useCountdown } from \"utils\";\n\nconst StatBadge = chakra(Badge, {\n  baseStyle: {\n    minW: \"50px\",\n    fontSize: \"xl\",\n    display: \"flex\",\n    borderWidth: \"1px\",\n    borderRadius: \"md\",\n    boxShadow: \"inner\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\ninterface Props {\n  stats: IStats;\n  onPlayClick?: () => void;\n  onStopClick?: () => void;\n  onTimerStart?: () => void;\n  onTimerStop?: () => void;\n}\n\nconst GameControls: FC<Props> = ({\n  stats,\n  onPlayClick = identity,\n  onStopClick = identity,\n  onTimerStart = identity,\n  onTimerStop = identity,\n}) => {\n  const [duration, setDuration] = useRecoilState(gameDurationState);\n\n  const {\n    isOpen: isCountdownOpen,\n    onOpen: openCountdown,\n    onClose: closeCountdown,\n  } = useDisclosure();\n\n  const {\n    isOpen: isGameOverOpen,\n    onOpen: openGameOver,\n    onClose: closeGameOver,\n  } = useDisclosure();\n\n  const countdown = useCountdown({\n    onExpire: () => {\n      openGameOver();\n      onTimerStop();\n    },\n  });\n\n  const handlePlayClick = () => {\n    onPlayClick();\n    closeGameOver();\n    openCountdown();\n  };\n\n  const handleStopClick = () => {\n    countdown.reset();\n    onStopClick();\n  };\n\n  const handleCountdownStart = () => {\n    closeCountdown();\n    countdown.start(duration);\n    onTimerStart();\n  };\n\n  return (\n    <>\n      <GameCountdown isOpen={isCountdownOpen} onClose={handleCountdownStart} />\n      <GameOver\n        isOpen={isGameOverOpen}\n        onClose={closeGameOver}\n        onPlayAgainClick={handlePlayClick}\n      >\n        You identified {stats.correct} notes correctly\n      </GameOver>\n      <Container\n        as={HStack}\n        align=\"stretch\"\n        maxW=\"container.sm\"\n        justifyContent=\"center\"\n      >\n        <RadioGroup\n          as={HStack}\n          value={duration}\n          onChange={(value) => setDuration(Number(value) as IGameDuration)}\n        >\n          {gameDurations.map(({ label, value }) => (\n            <Radio key={value} value={value}>\n              {label}\n            </Radio>\n          ))}\n        </RadioGroup>\n        <IconButton\n          aria-label=\"Play\"\n          onClick={handlePlayClick}\n          isDisabled={countdown.isRunning}\n          icon={<Icon as={PlayIcon} boxSize=\"20px\" />}\n        />\n        <Center w=\"80px\" px={4} borderRadius=\"md\" boxShadow=\"inner\">\n          <Text fontSize=\"lg\">{countdown.remaining.formatted}</Text>\n        </Center>\n        <IconButton\n          aria-label=\"Stop\"\n          onClick={handleStopClick}\n          icon={<Icon as={StopIcon} boxSize=\"20px\" />}\n        />\n        <StatBadge colorScheme=\"green\" borderColor=\"green.200\">\n          {stats.correct}\n        </StatBadge>\n        <StatBadge colorScheme=\"red\" borderColor=\"red.200\">\n          {stats.attempts - stats.correct}\n        </StatBadge>\n      </Container>\n    </>\n  );\n};\n\nexport default GameControls;\n","import { Button, chakra, Container, Grid, GridItem } from \"@chakra-ui/react\";\nimport React, { FC, Fragment } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { halfNotesState } from \"state\";\nimport { toDisplayNoteName } from \"utils\";\n\nconst columns = [\n  [\"C\", \"C#\"],\n  [\"D\", \"D#\"],\n  [\"E\"],\n  [\"F\", \"F#\"],\n  [\"G\", \"G#\"],\n  [\"A\", \"A#\"],\n  [\"B\"],\n];\n\nconst KeyboardContainer = chakra(Container, {\n  baseStyle: {\n    px: 2,\n    maxH: \"200px\",\n    flex: \"1 1 auto\",\n    alignSelf: \"center\",\n    maxW: \"container.md\",\n  },\n});\n\nconst Key = chakra(Button, {\n  baseStyle: {\n    h: \"100%\",\n    fontSize: \"lg\",\n    borderWidth: \"1px\",\n    borderColor: \"gray.300\",\n  },\n});\n\ninterface Props {\n  onClick: (noteName: string) => void;\n}\n\nconst Keyboard: FC<Props> = ({ onClick }) => {\n  const halfNotes = useRecoilValue(halfNotesState);\n\n  return (\n    <KeyboardContainer>\n      <Grid h=\"100%\" gridGap={1} templateColumns=\"repeat(7, 1fr)\">\n        {columns.map((notes, col) => (\n          <Fragment key={col}>\n            {notes.map((note, row) => (\n              <GridItem\n                key={row}\n                gridColumn={col + 1}\n                gridRow={notes.length === 1 ? \"1 / 3\" : 2 - row}\n              >\n                <Key\n                  isFullWidth\n                  onClick={() => onClick(note)}\n                  color={note.includes(\"#\") ? \"white\" : \"black\"}\n                  colorScheme={note.includes(\"#\") ? \"ebony\" : \"ivory\"}\n                >\n                  {toDisplayNoteName(note, halfNotes)}\n                </Key>\n              </GridItem>\n            ))}\n          </Fragment>\n        ))}\n      </Grid>\n    </KeyboardContainer>\n  );\n};\n\nexport default Keyboard;\n","import { Box } from \"@chakra-ui/react\";\nimport AnswerIndicator from \"components/AnswerIndicator\";\nimport Fretboard from \"components/Fretboard\";\nimport GameControls from \"components/GameControls\";\nimport Keyboard from \"components/Keyboard\";\nimport React, { FC } from \"react\";\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\nimport { gameProxySelector, gameStatsState } from \"state/name-the-note\";\nimport { INote } from \"types\";\n\nconst NameTheNotePage: FC = () => {\n  const stats = useRecoilValue(gameStatsState);\n  const [note, updateGame] = useRecoilState(gameProxySelector);\n  const resetGame = useResetRecoilState(gameProxySelector);\n\n  const handleAnswer = (name: string) => updateGame({ name } as INote);\n\n  return (\n    <>\n      <GameControls stats={stats.game} onTimerStart={resetGame} />\n      <Box position=\"relative\">\n        <Fretboard activeNotes={note ? [note] : []} />\n        <AnswerIndicator indicateStates={[0]} />\n      </Box>\n      <Keyboard onClick={handleAnswer} />\n    </>\n  );\n};\n\nexport default NameTheNotePage;\n"],"names":["Mask","chakra","Center","baseStyle","top","left","right","bottom","opacity","position","indicateStates","isMounted","useMountedState","useRecoilState","answerIndicatorState","indicator","setIndicator","ref","useRef","current","useEffect","setTimeout","unmountOnExit","in","includes","bg","color","boxSize","as","CorrectIcon","IncorrectIcon","isOpen","onClose","countdown","useCountdown","onExpire","cancelRef","start","isCentered","identity","leastDestructiveRef","w","VStack","py","px","size","remaining","seconds","fontSize","children","onPlayAgainClick","mx","onClick","colorScheme","ml","StatBadge","Badge","minW","display","borderWidth","borderRadius","boxShadow","alignItems","justifyContent","stats","onPlayClick","onStopClick","onTimerStart","onTimerStop","gameDurationState","duration","setDuration","useDisclosure","isCountdownOpen","openCountdown","onOpen","closeCountdown","isGameOverOpen","openGameOver","closeGameOver","handlePlayClick","correct","HStack","align","maxW","value","onChange","Number","gameDurations","label","isDisabled","isRunning","icon","PlayIcon","formatted","reset","StopIcon","borderColor","attempts","columns","KeyboardContainer","Container","maxH","flex","alignSelf","Key","Button","h","halfNotes","useRecoilValue","halfNotesState","gridGap","templateColumns","map","notes","col","Fragment","note","row","gridColumn","gridRow","length","isFullWidth","toDisplayNoteName","gameStatsState","gameProxySelector","updateGame","resetGame","useResetRecoilState","game","activeNotes","name"],"sourceRoot":""}