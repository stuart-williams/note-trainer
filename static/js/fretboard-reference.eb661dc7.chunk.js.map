{"version":3,"sources":["utils/maths.ts","utils/notes.ts","utils/state.ts","state/settings.ts","state/fretboard.ts","state/name-the-note.ts","state/statistics.ts","config/index.ts","state/find-the-note/notes.ts","state/find-the-note/statistics.ts","state/find-the-note/index.ts","components/RotateDevice.tsx","components/Fretboard/Frets.tsx","components/Fretboard/Notes.tsx","components/Fretboard/Strings.tsx","components/Fretboard/Fretboard.tsx","components/Keyboard.tsx","pages/fretboard-reference.tsx"],"names":["percent","value","total","round","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","Math","random","localStorageEffect","defaultValue","node","setSelf","onSet","key","ls","newValue","DefaultValue","fretboardIdState","atom","default","effects_UNSTABLE","leftHandedState","fretMarkersState","halfNotesState","fretboardState","selector","get","config","fretboardNotesState","fretboard","leftHanded","flatMap","tuning","i","fretCount","steps","id","simple","name","string","ntnTotalAttemptsState","ntnTotalCorrectState","ntnGameAttemptsState","ntnGameCorrectState","ntnSeedState","ntnQueueState","seed","notes","shuffle","ntnPointerState","ntnPointerSelector","set","reset","queue","ntnNoteState","ntnGameSelector","isCorrect","gameStatsState","findTheNoteStats","fntGameStatsState","game","correct","attempts","fretboards","h","fretMarkers","guages","reverse","seedState","queueState","pointerState","activeNotesState","pointerProxySelector","targetNoteState","targetNoteCountState","filter","length","totalAttemptsState","totalCorrectState","gameAttemptsState","gameCorrectState","statProxySelector","Number","gameProxySelector","count","activeNotes","nextActiveNotes","without","RotateDevice","isPortrait","useOrientation","type","includes","useState","isOpen","setOpen","cancelRef","useRef","useEffect","isCentered","onClose","leastDestructiveRef","mx","fontSize","fontWeight","textAlign","as","VStack","pb","FcRotateToLandscape","boxSize","FretsGrid","chakra","Grid","baseStyle","top","left","right","bottom","position","pointerEvents","Fret","alignItems","flexDirection","justifyContent","_before","w","background","Nut","Box","content","FretMarker","Circle","bg","Frets","useRecoilValue","columns","templateColumns","fretNum","numDots","hasMarker","renderMarker","styles","undefined","sx","templateRows","NotesGrid","SimpleGrid","color","display","borderRadius","transform","Notes","onNoteClick","identity","activeNote","find","displayName","onClick","StringsGrid","String","Flex","boxShadow","Strings","_","Board","Fretboard","noteRange","first","toMidi","last","shortcuts","KeyboardShortcuts","create","firstNote","lastNote","keyboardConfig","HOME_ROW","Container","ContainerComponent","maxH","minH","flex","maxW","props","cache","stopNote","playNote","midi","keyboardShortcuts","renderNoteLabel","nameName","current","className","FretboardReference","noteFilter","setNoteFilter","useMemo","reduce","accum","alignSelf"],"mappings":"2SAEaA,EAAU,SAACC,EAAeC,GAAhB,OACrBA,EAAQ,EAAIC,gBAAOF,EAAQC,EAAS,KAAO,G,SCChCE,EAAe,kBAC1BC,gBAAM,IAAIC,KAAI,SAACC,GAAD,OAAYC,IAAKC,SAAS,IAAMC,iBAAO,IAAKH,QAE/CI,EAAiB,SAACC,GAAD,OAC5BC,IAAKF,eAAeC,EAAY,CAAEL,QAAQ,EAAMO,YAAY,KAKjDC,EAAoB,SAC/BC,GAEY,IADZC,EACW,uDADa,SAElBC,EAAWC,mBAASH,GAAQL,EAAeK,GAAQA,EAEzD,OAAIR,IAAKY,WAAWF,KAAcA,GAA0B,WAAdD,EACrCC,EAGS,UAAdD,GAIGI,KAAKC,SAAW,GAHdd,IAAKY,WAAWF,GAGgCA,G,iBCxB9CK,EACX,SAAIC,GAAJ,OACA,YAA+B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACVC,EAAG,sBAAkBH,EAAKG,KAC1B3B,EAAQ4B,MAAUD,GAEV,OAAV3B,EACFyB,EAAQzB,GACCuB,IACTK,MAAUD,EAAKJ,GACfE,EAAQF,IAGVG,GAAM,SAACG,GACDA,aAAoBC,IACtBF,SAAUD,GAEVC,MAAUD,EAAKE,S,qaChBVE,EAAmBC,YAAmB,CACjDL,IAAK,mBACLM,QAAS,aACTC,iBAAkB,CAACZ,iBAGRa,EAAkBH,YAAc,CAC3CL,IAAK,kBACLM,SAAS,EACTC,iBAAkB,CAACZ,iBAGRc,EAAmBJ,YAAc,CAC5CL,IAAK,mBACLM,SAAS,EACTC,iBAAkB,CAACZ,iBAGRe,EAAiBL,YAAiB,CAC7CL,IAAK,iBACLM,QAAS,SACTC,iBAAkB,CAACZ,iBClBRgB,EAAiBC,YAAqB,CACjDZ,IAAK,iBACLa,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAaC,IAAkBD,EAAIT,OAG7BW,EAAsBH,YAAkB,CACnDZ,IAAK,sBACLa,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAG,EAAYH,EAAIF,GAChBM,EAAaJ,EAAIL,GAEvB,OAAOU,kBAAQF,EAAUG,QAAQ,SAAC/B,EAAMgC,GAAP,OAC/B3C,gBAAMuC,EAAUK,UAAY,GAAG3C,KAAI,SAAC4C,GAClC,IAAMC,EAAKnC,EAAON,iBAAOmC,EAAa,IAAM,IAAKK,GAC3CE,EAAS5C,IAAKC,SAAS0C,GAG7B,MAAO,CACLA,KACAE,KAJWR,EAAarC,IAAKY,WAAWgC,GAAUA,EAKlDE,OAAQN,EAAI,Y,SCrBTO,EAAwBtB,YAAa,CAChDL,IAAK,wBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGRiC,EAAuBvB,YAAa,CAC/CL,IAAK,uBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGRkC,EAAuBxB,YAAa,CAC/CL,IAAK,uBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGRmC,EAAsBzB,YAAa,CAC9CL,IAAK,sBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGfoC,EAAe1B,YAAa,CAChCL,IAAK,eACLM,QAAS,EACTC,iBAAkB,CAACZ,YAAmBF,KAAKC,aAGvCsC,EAAgBpB,YAAkB,CACtCZ,IAAK,gBACLa,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAoB,EAAOpB,EAAIkB,GACXG,EAAQrB,EAAIE,GAClB,OAAOoB,kBAAQD,EAAOD,MAIpBG,EAAkB/B,YAAa,CACnCL,IAAK,kBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGf0C,EAAqBzB,YAAiB,CAC1CZ,IAAK,qBACLa,IAAK,mBAAaA,EAAb,EAAGA,KAAcuB,IACtBE,IAAK,WAAsBpC,GAAc,IAAjCW,EAAgC,EAAhCA,IAAKyB,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACVC,EAAQ3B,EAAImB,GAEd9B,aAAoBC,MAAiBqC,EAAMtC,IAC7CoC,EAAIP,EAAclB,EAAIkB,GAAgBtC,KAAKC,UAC3C6C,EAAMH,IAENE,EAAIF,EAAiBlC,MAKduC,EAAe7B,YAAgB,CAC1CZ,IAAK,eACLa,IAAK,YAAc,IAAXA,EAAU,EAAVA,IAGN,OAFcA,EAAImB,GACFnB,EAAIwB,OAKXK,EAAkB9B,YAAgB,CAC7CZ,IAAK,kBACLa,IAAK,mBAAaA,EAAb,EAAGA,KAAc4B,IACtBH,IAAK,WAAsBpC,GAAc,IAAjCW,EAAgC,EAAhCA,IAAKyB,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAChB,GAAIrC,aAAoBC,IAKtB,OAHAoC,EAAMF,GACNE,EAAMT,QACNS,EAAMV,GAIR,IAAMzC,EAAOyB,EAAI4B,GACXE,EAAYzC,EAASuB,OAASrC,EAAKqC,KAGzCa,EAAIT,EAAsBhB,EAAIgB,GAAwB,GACtDS,EAAIX,EAAuBd,EAAIc,GAAyB,GAEpDgB,IACFL,EAAIR,EAAqBjB,EAAIiB,GAAuB,GACpDQ,EAAIV,EAAsBf,EAAIe,GAAwB,GAEtDU,EAAID,EAAoBxB,EAAIwB,GAAsB,O,gBCpF3CO,EAAiBhC,YAAsB,CAClDZ,IAAK,iBACLa,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACSgC,EAAqBhC,EAAIiC,KAAhCxE,MAER,MAAO,CAEL,CACEyE,KAAM,gBACNC,QAASnC,EAAIe,GACbqB,SAAUpC,EAAIc,GACdvD,QAASA,YAAQyC,EAAIe,GAAuBf,EAAIc,KAN7C,2BASAkB,GATA,IAUHE,KAAM,oBAIZT,IAAK,WAAYpC,GAAc,IAAvBqC,EAAsB,EAAtBA,MACFrC,aAAoBC,MACtBoC,EAAMO,KAENP,EAAMG,GACNH,EAAMX,GACNW,EAAMZ,Q,iCCrCZ,kCAAO,IAAMuB,EAA+C,CAC1D,aAAc,CACZC,EAAG,IACH9B,UAAW,GACXE,GAAI,aACJ6B,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3B7B,KAAM,oCACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKmC,WAEzC,SAAU,CACRH,EAAG,IACH9B,UAAW,GACXE,GAAI,SACJ6B,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3B7B,KAAM,2BACNN,OAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAAMmC,WAE/C,SAAU,CACRH,EAAG,IACH9B,UAAW,GACXE,GAAI,SACJ6B,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3B7B,KAAM,2BACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,KAAM,IAAK,KAAKmC,WAE1C,UAAW,CACTH,EAAG,IACH9B,UAAW,GACXE,GAAI,UACJ6B,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3B7B,KAAM,4BACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKmC,WAEzC,aAAc,CACZH,EAAG,IACH9B,UAAW,GACXE,GAAI,aACJ6B,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC9BnC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKmC,UAC5C7B,KAAM,qCAER,aAAc,CACZ0B,EAAG,IACH9B,UAAW,GACXE,GAAI,aACJ6B,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,GAAGC,UACrBnC,OAAQ,CAAC,IAAK,IAAK,IAAK,KAAKmC,UAC7B7B,KAAM,mCAER,aAAc,CACZ0B,EAAG,IACH9B,UAAW,GACXE,GAAI,aACJ6B,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGC,UACxBnC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKmC,UAClC7B,KAAM,qC,mQCtDJ8B,EAAYlD,YAAa,CAC7BL,IAAK,0BACLM,QAAS,EACTC,iBAAkB,CAACZ,YAAmBF,KAAKC,aAMvC8D,EAAa5C,YAAmB,CACpCZ,IAAK,2BACLa,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAasB,kBAAQ3D,cAAgBqC,EAAI0C,OAM1CE,EAAepD,YAAa,CAChCL,IAAK,6BACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAMR+D,EAAmBrD,YAAc,CAC5CL,IAAK,iCACLM,QAAS,GACTC,iBAAkB,CAACZ,iBAQRgE,EAAuB/C,YAAiB,CACnDZ,IAAK,qCACLa,IAAK,mBAAaA,EAAb,EAAGA,KAAc4C,IACtBnB,IAAK,WAAsBpC,GAAc,IAAjCW,EAAgC,EAAhCA,IAAKyB,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACVC,EAAQ3B,EAAI2C,GAEdtD,aAAoBC,MAAiBqC,EAAMtC,IAE7CqC,EAAMkB,GACNnB,EAAIiB,EAAW1C,EAAI0C,GAAa9D,KAAKC,WAGrC4C,EAAImB,EAAcvD,GAIpBqC,EAAMmB,MAOGE,EAAkBhD,YAAiB,CAC9CZ,IAAK,gCACLa,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAaA,EAAI2C,GAAY3C,EAAI4C,OAM3BI,EAAuBjD,YAAiB,CACnDZ,IAAK,qCACLa,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OACHiD,iBAAOjD,EAAIE,KAAsB,CAAC,OAAQF,EAAI+C,KAAmBG,UC7E/DC,EAAqB3D,YAAa,CACtCL,IAAK,mCACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGfsE,EAAoB5D,YAAa,CACrCL,IAAK,kCACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGfuE,EAAoB7D,YAAa,CACrCL,IAAK,kCACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGfwE,EAAmB9D,YAAa,CACpCL,IAAK,iCACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGRyE,EAAoBxD,YAAkB,CACjDZ,IAAK,kCACLa,IAAK,kBAAM,GACXyB,IAAK,WAAsBpC,GAAc,IAAjCW,EAAgC,EAAhCA,IAAKyB,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACZrC,aAAoBC,KACtBoC,EAAM4B,GACN5B,EAAM2B,KAEN5B,EAAI4B,EAAmBrD,EAAIqD,GAAqB,GAChD5B,EAAI0B,EAAoBnD,EAAImD,GAAsB,GAClD1B,EAAI6B,EAAkBtD,EAAIsD,GAAoBE,OAAOnE,IACrDoC,EAAI2B,EAAmBpD,EAAIoD,GAAqBI,OAAOnE,QAKhD0C,EAAiBhC,YAAqB,CACjDZ,IAAK,+BACLa,IAAK,gBAAGA,EAAH,EAAGA,IAAH,MAAc,CACjBkC,KAAM,CACJC,QAASnC,EAAIsD,GACblB,SAAUpC,EAAIqD,GACd9F,QAASA,YAAQyC,EAAIsD,GAAmBtD,EAAIqD,KAE9C5F,MAAO,CACL0E,QAASnC,EAAIoD,GACbhB,SAAUpC,EAAImD,GACd5F,QAASA,YAAQyC,EAAIoD,GAAoBpD,EAAImD,OAGjD1B,IAAK,WAAYpC,GAAc,IAAvBqC,EAAsB,EAAtBA,MACFrC,aAAoBC,MACtBoC,EAAM4B,GACN5B,EAAM2B,GACN3B,EAAM0B,GACN1B,EAAMyB,OCpDCM,EAAoB1D,YAAuB,CACtDZ,IAAK,kCACLa,IAAK,kBAAM,MACXyB,IAAK,WAAsBpC,GAAc,IAAjCW,EAAgC,EAAhCA,IAAKyB,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAChB,GAAIrC,aAAoBC,IAKtB,OAHAoC,EAAM6B,QAEN7B,EAAMoB,GAKR,GAAiB,OAAbzD,GAAqBA,EAASuB,OAASZ,EAAI+C,GAK7C,OAHAtB,EAAI8B,GAAmB,QAEvB9B,EAAIqB,EAAsB9C,EAAI8C,GAAwB,GAKxD,IAAMY,EAAQ1D,EAAIgD,GACZW,EAAc3D,EAAI6C,GAClBe,EAAe,sBAAOC,kBAAQF,EAAatE,IAA5B,CAAuCA,IAG5D,GAAIuE,EAAgBV,SAAWQ,EAK7B,OAHAjC,EAAI8B,GAAmB,QAEvB9B,EAAIqB,EAAsB9C,EAAI8C,GAAwB,GAKxDrB,EAAIoB,EAAkBe,O,wHCDXE,IAhCU,WACvB,IACMC,EADcC,cACWC,KAAKC,SAAS,YAFhB,EAGHC,mBAASJ,GAHN,mBAGtBK,EAHsB,KAGdC,EAHc,KAIvBC,EAAYC,iBAA0B,MAM5C,OAJAC,qBAAU,WACRH,EAAQN,KACP,CAACA,IAGF,cAAC,IAAD,CACEU,YAAU,EACVL,OAAQA,EACRM,QAAS,kBAAML,GAAQ,IACvBM,oBAAqBL,EAJvB,SAME,cAAC,IAAD,UACE,eAAC,IAAD,CAAoBM,GAAI,EAAxB,UACE,cAAC,IAAD,CAAmBC,SAAS,KAAKC,WAAW,OAAOC,UAAU,SAA7D,2BAGA,eAAC,IAAD,CAAiBC,GAAIC,IAAQC,GAAI,EAAjC,UACE,cAAC,IAAD,CAAMF,GAAIG,IAAqBC,QAAS,KACxC,cAAC,IAAD,qE,sIChCNC,EAAYC,YAAOC,IAAM,CAC7BC,UAAW,CACTC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,SAAU,WACVC,cAAe,UAIbC,EAAOT,YAAOC,IAAM,CACxBC,UAAW,CACTK,SAAU,WACVG,WAAY,SACZC,cAAe,SACfC,eAAgB,SAChBC,QAAS,CACPC,EAAG,MACHX,IAAK,EACLG,OAAQ,EACRC,SAAU,WACVQ,WAAY,kDAKZC,EAAMhB,YAAOiB,IAAK,CACtBf,UAAW,CACTK,SAAU,WACVM,QAAS,CACPV,IAAK,EACLG,OAAQ,EACRQ,EAAG,OACHI,QAAQ,KACRX,SAAU,WACVQ,WAAY,eAKZI,EAAanB,YAAOoB,IAAQ,CAChClB,UAAW,CACTlD,EAAG,OACH8D,EAAG,OACHO,GAAI,cAyCOC,EArCG,WAChB,IAAMzG,EAAY0G,YAAe/G,KAC3BM,EAAayG,YAAelH,KAC5B4C,EAAcsE,YAAejH,KAC7BkH,EAAU3G,EAAUK,UAAY,EAEtC,OACE,cAAC6E,EAAD,CAAW0B,gBAAe,iBAAYD,EAAZ,UAA1B,SACGlJ,gBAAMkJ,GAASjJ,KAAI,SAAC0C,GAAO,IAAD,EACnByG,EAAU5G,EAAaD,EAAUK,UAAYD,EAAIA,EACjD0G,EAAUD,EAAU,KAAO,EAAI,EAAI,EACnCE,EAAY/G,EAAUoC,YAAY2B,SAAS8C,GAC3CG,EAAe5E,GAAe2E,EAE9BE,EAAS,CACb,8BACGhH,EAAa,OAAS,QAAU,QADnC,wBAEW4G,IAAY7G,EAAUK,eAAY6G,EAAlC,MAFX,IAMF,OAAQL,EAGN,cAACjB,EAAD,CACEuB,GAAIF,EAEJG,aAAY,iBAAYN,EAAZ,UAHd,SAKGE,GAAgBvJ,gBAAMqJ,GAASpJ,KAAI,SAAC0C,GAAD,OAAO,cAACkG,EAAD,GAAiBlG,OAHvDyG,GAJP,cAACV,EAAD,CAAmBgB,GAAIF,GAAbJ,SCtEdQ,EAAYlC,YAAOmC,IAAY,CACnCjC,UAAW,CACTC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,SAAU,cAIR9H,EAAOuH,YAAOiB,IAAK,CACvBf,UAAW,CACTK,SAAU,WACVM,QAAS,CACP7D,EAAG,OACH8D,EAAG,OACHX,IAAK,MACLC,KAAM,MACNgC,MAAO,QACPC,QAAS,OACT3B,WAAY,SACZ4B,aAAc,OACd/B,SAAU,WACVK,eAAgB,SAChB2B,UAAW,4BA0CFC,EAhCU,SAAC,GAA6C,IAA3CnE,EAA0C,EAA1CA,YAA0C,IAA7BoE,mBAA6B,MAAfC,WAAe,EAC9D7H,EAAY0G,YAAe/G,KAC3BuB,EAAQwF,YAAe3G,KACvB4G,EAAU3G,EAAUK,UAAY,EAEtC,OACE,cAACgH,EAAD,CAAWV,QAASA,EAApB,SACGzF,EAAMxD,KAAI,SAACU,EAAMgC,GAChB,IAAM0H,EAAaC,eAAKvE,EAAapF,GAC/BiI,GAAoB,OAAVyB,QAAU,IAAVA,OAAA,EAAAA,EAAYE,cAAe,GAE3C,OACE,cAACpK,EAAD,CAEEqK,QAAS,kBAAML,EAAYxJ,IAC3B+I,GACEW,EACI,CACE,UAAW,CACTtB,GAAI,UACJH,QAAQ,IAAD,OAAMA,EAAN,YAGXa,GAVD9G,SCjDX8H,EAAc/C,YAAOC,IAAM,CAC/BC,UAAW,CACTC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,SAAU,WACVC,cAAe,UAIbwC,EAAShD,YAAOiD,IAAM,CAC1B/C,UAAW,CACTQ,WAAY,SACZG,QAAS,CACPC,EAAG,OACHI,QAAQ,KACRgC,UAAW,KACXnC,WAAY,oDAwBHoC,EAnBK,WAClB,IAAMtI,EAAY0G,YAAe/G,KAEjC,OACE,cAACuI,EAAD,CAAad,aAAY,iBAAYpH,EAAUG,OAAO4C,OAA7B,UAAzB,SACG/C,EAAUG,OAAOzC,KAAI,SAAC6K,EAAGnI,GAAJ,OACpB,cAAC,EAAD,CAEE+G,GAAI,CACF,UAAW,CACThF,GAAInC,EAAUqC,OAAOjC,IAAM,GAAK,QAH/BA,SC1BToI,EAAQrD,YAAOiB,IAAK,CACxBf,UAAW,CACTmB,GAAG,UACHd,SAAU,cAqBC+C,EAZc,SAAC,GAAkC,IAAhCjF,EAA+B,EAA/BA,YAAaoE,EAAkB,EAAlBA,YACrC5H,EAAY0G,YAAe/G,KAEjC,OACE,eAAC6I,EAAD,CAAOrG,EAAGnC,EAAUmC,EAApB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAOyF,YAAaA,EAAapE,YAAaA,S,wJCb9CkF,EAAY,CAChBC,MAAO1K,IAAK2K,OAAO,MACnBC,KAAM5K,IAAK2K,OAAO,OAGdE,EAAYC,IAAkBC,OAAO,CACzCC,UAAWP,EAAUC,MACrBO,SAAUR,EAAUG,KACpBM,eAAgBJ,IAAkBK,WAG9BC,EAAYlE,YAAOmE,IAAoB,CAC3CjE,UAAW,CACTkE,KAAM,QACNC,KAAM,QACNC,KAAM,WACNC,KAAM,kBAwCKvE,iBAhCa,SAAC,GAA2B,IAAzB8C,EAAwB,EAAxBA,QAAY0B,EAAY,2BAC/CtL,EAAYqI,YAAehH,KAO3BkK,EAAQxF,iBAAmC,IAWjD,OACE,cAACiF,EAAD,2BAAeM,GAAf,aACE,cAAC,IAAD,CACEE,SAAUhC,WACVa,UAAWA,EACXoB,SAPc,SAACC,GAAD,OAAkB9B,EAAQlK,YAAegM,KAQvDC,kBAAmBlB,EACnBmB,gBAhBkB,SAAC,GAAkD,IAApCF,EAAmC,EAA/C/L,WACnBkM,EAAWN,EAAMO,QAAQJ,IAAS5L,YAAkB4L,EAAM1L,GAGhE,OAFAuL,EAAMO,QAAQJ,GAAQG,EAEf,cAAC,IAAD,CAAME,UAAU,wBAAhB,SAAyCF,c,2JCZrCG,UAhCgB,WAC7B,IAAMhM,EAAYqI,YAAehH,KAC3BwB,EAAQwF,YAAe3G,KAFM,EAGCiE,mBAAiB,IAHlB,mBAG5BsG,EAH4B,KAGhBC,EAHgB,KAK7B/G,EAAcgH,mBAClB,kBACEtJ,EAAMuJ,QACJ,SAACC,EAAOtM,GAAR,OACGkM,GAAclM,EAAKqC,OAAS6J,EAQzBI,EARJ,sBAESA,GAFT,4BAIWtM,GAJX,IAKQ4J,YAAa7J,YAAkBC,EAAKqC,KAAMpC,SAIpD,MAEJ,CAACiM,EAAYjM,IAGf,OACE,qCACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAWmF,YAAaA,IACxB,cAAC,IAAD,CAAUmH,UAAU,SAAS1C,QAASsC","file":"static/js/fretboard-reference.eb661dc7.chunk.js","sourcesContent":["import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value !== null) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretMarkersState = atom<boolean>({\n  key: \"fretMarkersState\",\n  default: true,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ntnTotalAttemptsState = atom<number>({\n  key: \"ntnTotalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnTotalCorrectState = atom<number>({\n  key: \"ntnTotalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameAttemptsState = atom<number>({\n  key: \"ntnGameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameCorrectState = atom<number>({\n  key: \"ntnGameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnSeedState = atom<number>({\n  key: \"ntnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ntnQueueState = selector<INote[]>({\n  key: \"ntnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ntnSeedState);\n    const notes = get(fretboardNotesState);\n    return shuffle(notes, seed);\n  },\n});\n\nconst ntnPointerState = atom<number>({\n  key: \"ntnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnPointerSelector = selector<number>({\n  key: \"ntnPointerSelector\",\n  get: ({ get }) => get(ntnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ntnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ntnSeedState, get(ntnSeedState) + Math.random());\n      reset(ntnPointerState);\n    } else {\n      set(ntnPointerState, newValue);\n    }\n  },\n});\n\nexport const ntnNoteState = selector<INote>({\n  key: \"ntnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ntnQueueState);\n    const pointer = get(ntnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ntnGameSelector = selector<INote>({\n  key: \"ntnGameSelector\",\n  get: ({ get }) => get(ntnNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset game\n      reset(ntnPointerSelector);\n      reset(ntnGameCorrectState);\n      reset(ntnGameAttemptsState);\n      return;\n    }\n\n    const note = get(ntnNoteState);\n    const isCorrect = newValue.name === note.name;\n\n    // Update game stats\n    set(ntnGameAttemptsState, get(ntnGameAttemptsState) + 1);\n    set(ntnTotalAttemptsState, get(ntnTotalAttemptsState) + 1);\n\n    if (isCorrect) {\n      set(ntnGameCorrectState, get(ntnGameCorrectState) + 1);\n      set(ntnTotalCorrectState, get(ntnTotalCorrectState) + 1);\n      // Next note\n      set(ntnPointerSelector, get(ntnPointerSelector) + 1);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IStats } from \"types\";\nimport { percent } from \"utils\";\nimport { gameStatsState as fntGameStatsState } from \"./find-the-note\";\nimport {\n  ntnGameSelector,\n  ntnTotalAttemptsState,\n  ntnTotalCorrectState,\n} from \"./name-the-note\";\n\ninterface GameStats extends IStats {\n  game: string;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => {\n    const { total: findTheNoteStats } = get(fntGameStatsState);\n\n    return [\n      // TODO: Refactor\n      {\n        game: \"Name the Note\",\n        correct: get(ntnTotalCorrectState),\n        attempts: get(ntnTotalAttemptsState),\n        percent: percent(get(ntnTotalCorrectState), get(ntnTotalAttemptsState)),\n      },\n      {\n        ...findTheNoteStats,\n        game: \"Find the Note\",\n      },\n    ];\n  },\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(fntGameStatsState);\n      // TODO: Refactor\n      reset(ntnGameSelector);\n      reset(ntnTotalCorrectState);\n      reset(ntnTotalAttemptsState);\n    }\n  },\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    h: 220,\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    h: 220,\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    h: 220,\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    h: 254,\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    h: 200,\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { fretboardNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\n\n/**\n * Seed for queue shuffling.\n */\nconst seedState = atom<number>({\n  key: \"find-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\n/**\n * Maintain a queue for a consistent spread of notes.\n */\nconst queueState = selector<string[]>({\n  key: \"find-the-note/queueState\",\n  get: ({ get }) => shuffle(getNoteNames(), get(seedState)),\n});\n\n/**\n * Pointer to the current note in the queue.\n */\nconst pointerState = atom<number>({\n  key: \"find-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * Notes the user has selected to be rendered on the fretboard.\n */\nexport const activeNotesState = atom<INote[]>({\n  key: \"find-the-note/activeNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * A wrapper around pointerState which handles reshuffling the\n * queue when we reach the end, moving the pointer and clearing the\n * fretboard.\n */\nexport const pointerProxySelector = selector<number>({\n  key: \"find-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      // Reshuffle queue and point to the start\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      // Move pointer to next note\n      set(pointerState, newValue);\n    }\n\n    // Clear fretboard\n    reset(activeNotesState);\n  },\n});\n\n/**\n * Current game note.\n */\nexport const targetNoteState = selector<string>({\n  key: \"find-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n\n/**\n * Number of times the target note appears on the fretboard.\n */\nexport const targetNoteCountState = selector<number>({\n  key: \"find-the-note/targetNoteCountState\",\n  get: ({ get }) =>\n    filter(get(fretboardNotesState), [\"name\", get(targetNoteState)]).length,\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"find-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"find-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"find-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"find-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"find-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"find-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { without } from \"lodash\";\nimport { DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport {\n  activeNotesState,\n  pointerProxySelector,\n  targetNoteCountState,\n  targetNoteState,\n} from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote | null>({\n  key: \"find-the-note/gameProxySelector\",\n  get: () => null,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    // Incorrect\n    if (newValue === null || newValue.name !== get(targetNoteState)) {\n      // Update failed attempt stat\n      set(statProxySelector, false);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Correct\n    const count = get(targetNoteCountState);\n    const activeNotes = get(activeNotesState);\n    const nextActiveNotes = [...without(activeNotes, newValue), newValue];\n\n    // All notes found\n    if (nextActiveNotes.length === count) {\n      // Update successful attempt stat\n      set(statProxySelector, true);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Draw selected note on the fretboard\n    set(activeNotesState, nextActiveNotes);\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Icon,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { FC, useEffect, useRef, useState } from \"react\";\nimport { FcRotateToLandscape } from \"react-icons/fc\";\nimport { useOrientation } from \"react-use\";\n\nconst RotateDevice: FC = () => {\n  const orientation = useOrientation();\n  const isPortrait = orientation.type.includes(\"portrait\");\n  const [isOpen, setOpen] = useState(isPortrait);\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    setOpen(isPortrait);\n  }, [isPortrait]);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={() => setOpen(false)}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent mx={4}>\n          <AlertDialogHeader fontSize=\"xl\" fontWeight=\"bold\" textAlign=\"center\">\n            Rotate Device\n          </AlertDialogHeader>\n          <AlertDialogBody as={VStack} pb={4}>\n            <Icon as={FcRotateToLandscape} boxSize={20} />\n            <Text>Rotate your device for a better experience</Text>\n          </AlertDialogBody>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default RotateDevice;\n","import { Box, chakra, Circle, Grid } from \"@chakra-ui/react\";\nimport { times } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState, fretMarkersState, leftHandedState } from \"state\";\n\nconst FretsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst Fret = chakra(Grid, {\n  baseStyle: {\n    position: \"relative\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    _before: {\n      w: \"8px\",\n      top: 0,\n      bottom: 0,\n      position: \"absolute\",\n      background: \"linear-gradient(to right, gold, gray, gold)\",\n    },\n  },\n});\n\nconst Nut = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: 0,\n      bottom: 0,\n      w: \"16px\",\n      content: `\"\"`,\n      position: \"absolute\",\n      background: \"gray.200\",\n    },\n  },\n});\n\nconst FretMarker = chakra(Circle, {\n  baseStyle: {\n    h: \"26px\",\n    w: \"26px\",\n    bg: \"gray.200\",\n  },\n});\n\nconst Frets: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n  const leftHanded = useRecoilValue(leftHandedState);\n  const fretMarkers = useRecoilValue(fretMarkersState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <FretsGrid templateColumns={`repeat(${columns}, 1fr)`}>\n      {times(columns).map((i) => {\n        const fretNum = leftHanded ? fretboard.fretCount - i : i;\n        const numDots = fretNum % 12 === 0 ? 2 : 1;\n        const hasMarker = fretboard.fretMarkers.includes(fretNum);\n        const renderMarker = fretMarkers && hasMarker;\n\n        const styles = {\n          \":before\": {\n            [leftHanded ? \"left\" : \"right\"]: \"-4px\",\n            content: fretNum === fretboard.fretCount ? undefined : `\"\"`,\n          },\n        };\n\n        return !fretNum ? (\n          <Nut key={fretNum} sx={styles} />\n        ) : (\n          <Fret\n            sx={styles}\n            key={fretNum}\n            templateRows={`repeat(${numDots}, 1fr)`}\n          >\n            {renderMarker && times(numDots).map((i) => <FretMarker key={i} />)}\n          </Fret>\n        );\n      })}\n    </FretsGrid>\n  );\n};\n\nexport default Frets;\n","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\nimport { find, identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, fretboardState } from \"state\";\nimport { INote } from \"types\";\n\nconst NotesGrid = chakra(SimpleGrid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n  },\n});\n\nconst Note = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      h: \"34px\",\n      w: \"34px\",\n      top: \"50%\",\n      left: \"50%\",\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      position: \"absolute\",\n      justifyContent: \"center\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Notes: FC<Props> = ({ activeNotes, onNoteClick = identity }) => {\n  const fretboard = useRecoilValue(fretboardState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <NotesGrid columns={columns}>\n      {notes.map((note, i) => {\n        const activeNote = find(activeNotes, note);\n        const content = activeNote?.displayName || \"\";\n\n        return (\n          <Note\n            key={i}\n            onClick={() => onNoteClick(note)}\n            sx={\n              activeNote\n                ? {\n                    \":before\": {\n                      bg: \"red.500\",\n                      content: `\"${content}\"`,\n                    },\n                  }\n                : undefined\n            }\n          />\n        );\n      })}\n    </NotesGrid>\n  );\n};\n\nexport default Notes;\n","import { chakra, Flex, Grid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\n\nconst StringsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst String = chakra(Flex, {\n  baseStyle: {\n    alignItems: \"center\",\n    _before: {\n      w: \"100%\",\n      content: `\"\"`,\n      boxShadow: \"md\",\n      background: \"linear-gradient(to bottom, gray, white, gray)\",\n    },\n  },\n});\n\nconst Strings: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <StringsGrid templateRows={`repeat(${fretboard.tuning.length}, 1fr)`}>\n      {fretboard.tuning.map((_, i) => (\n        <String\n          key={i}\n          sx={{\n            \":before\": {\n              h: (fretboard.guages[i] || 1) + \"px\",\n            },\n          }}\n        />\n      ))}\n    </StringsGrid>\n  );\n};\n\nexport default Strings;\n","import { Box, chakra } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\nimport { INote } from \"types\";\nimport Frets from \"./Frets\";\nimport Notes from \"./Notes\";\nimport Strings from \"./Strings\";\n\nconst Board = chakra(Box, {\n  baseStyle: {\n    bg: `#222222`,\n    position: \"relative\",\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Fretboard: FC<Props> = ({ activeNotes, onNoteClick }) => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <Board h={fretboard.h}>\n      <Frets />\n      <Strings />\n      <Notes onNoteClick={onNoteClick} activeNotes={activeNotes} />\n    </Board>\n  );\n};\n\nexport default Fretboard;\n","import {\n  chakra,\n  Container as ContainerComponent,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Midi } from \"@tonaljs/tonal\";\nimport { identity } from \"lodash\";\nimport React, { FC, useRef } from \"react\";\nimport { KeyboardShortcuts, Piano } from \"react-piano\";\nimport \"react-piano/dist/styles.css\";\nimport { useRecoilValue } from \"recoil\";\nimport { halfNotesState } from \"state\";\nimport \"theme/react-piano.css\";\nimport { midiToNoteName, toDisplayNoteName } from \"utils\";\n\nconst noteRange = {\n  first: Midi.toMidi(\"c4\"),\n  last: Midi.toMidi(\"b4\"),\n};\n\nconst shortcuts = KeyboardShortcuts.create({\n  firstNote: noteRange.first,\n  lastNote: noteRange.last,\n  keyboardConfig: KeyboardShortcuts.HOME_ROW,\n});\n\nconst Container = chakra(ContainerComponent, {\n  baseStyle: {\n    maxH: \"220px\",\n    minH: \"100px\",\n    flex: \"1 1 auto\",\n    maxW: \"container.sm\",\n  },\n});\n\ninterface Props {\n  onClick: (noteName: string) => void;\n}\n\nconst Keyboard: FC<Props> = ({ onClick, ...props }) => {\n  const halfNotes = useRecoilValue(halfNotesState);\n\n  /**\n   * renderNoteLabel is called on mouse over for some reason so\n   * cache `[midi]: noteName` so we don't randomly switch between\n   * sharps and flats when halfNotes = \"random\"\n   */\n  const cache = useRef<{ [midi: number]: string }>({});\n\n  const renderNoteLabel = ({ midiNumber: midi }: { midiNumber: number }) => {\n    const nameName = cache.current[midi] || toDisplayNoteName(midi, halfNotes);\n    cache.current[midi] = nameName;\n\n    return <Text className=\"ReactPiano__NoteLabel\">{nameName}</Text>;\n  };\n\n  const handleClick = (midi: number) => onClick(midiToNoteName(midi));\n\n  return (\n    <Container {...props}>\n      <Piano\n        stopNote={identity}\n        noteRange={noteRange}\n        playNote={handleClick}\n        keyboardShortcuts={shortcuts}\n        renderNoteLabel={renderNoteLabel}\n      />\n    </Container>\n  );\n};\n\nexport default chakra(Keyboard);\n","import Fretboard from \"components/Fretboard\";\nimport Keyboard from \"components/Keyboard\";\nimport RotateDevice from \"components/RotateDevice\";\nimport React, { FC, useMemo, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, halfNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { toDisplayNoteName } from \"utils\";\n\nconst FretboardReference: FC = () => {\n  const halfNotes = useRecoilValue(halfNotesState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const [noteFilter, setNoteFilter] = useState<string>(\"\");\n\n  const activeNotes = useMemo<INote[]>(\n    () =>\n      notes.reduce<INote[]>(\n        (accum, note) =>\n          !noteFilter || note.name === noteFilter\n            ? [\n                ...accum,\n                {\n                  ...note,\n                  displayName: toDisplayNoteName(note.name, halfNotes),\n                },\n              ]\n            : accum,\n        []\n      ),\n    [noteFilter, halfNotes]\n  );\n\n  return (\n    <>\n      <RotateDevice />\n      <Fretboard activeNotes={activeNotes} />\n      <Keyboard alignSelf=\"center\" onClick={setNoteFilter} />\n    </>\n  );\n};\n\nexport default FretboardReference;\n"],"sourceRoot":""}