{"version":3,"sources":["utils/countdown.ts","utils/maths.ts","utils/notes.ts","utils/state.ts","state/game.ts","state/statistics.ts","state/fretboard.ts","state/settings.ts","config/index.ts","state/find-the-note/notes.ts","state/find-the-note/statistics.ts","state/find-the-note/index.ts","state/name-the-note/notes.ts","state/name-the-note/statistics.ts","state/name-the-note/index.ts","pages/settings.tsx"],"names":["pad","n","padStart","String","calcRemaining","expiration","Math","max","diff","dayjs","useCountdown","onExpire","identity","useRef","useState","remaining","setRemaining","seconds","round","minutes","floor","useInterval","newValue","current","isRunning","formatted","start","duration","add","reset","percent","value","total","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","random","localStorageEffect","defaultValue","node","setSelf","onSet","key","ls","DefaultValue","answerIndicatorState","atom","default","gameDurationState","effects_UNSTABLE","gameStatsState","selector","get","ntnStats","ntnGameStatsState","ftnStats","fntGameStatsState","game","set","fretboardState","config","fretboardIdState","fretboardNotesState","fretboard","leftHanded","leftHandedState","flatMap","tuning","i","fretCount","steps","id","simple","name","string","fretMarkersState","halfNotesState","fretboards","h","fretMarkers","guages","reverse","gameDurations","label","seedState","queueState","shuffle","pointerState","activeNotesState","pointerProxySelector","queue","targetNoteState","targetNoteCountState","filter","length","totalAttemptsState","totalCorrectState","gameAttemptsState","gameCorrectState","statProxySelector","Number","correct","attempts","gameProxySelector","count","activeNotes","nextActiveNotes","without","isCorrect","FretboardSelect","useRecoilState","setValue","onChange","event","target","mt","isExternal","color","alignItems","display","href","ml","as","ExternalLinkIcon","LeftHanded","isChecked","setChecked","checked","FretMarkers","HalfNotes","SettingsPage","Card","spacing"],"mappings":"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","file":"static/js/settings.75e7ddfd.chunk.js","sourcesContent":["import dayjs, { Dayjs } from \"dayjs\";\nimport { identity, padStart } from \"lodash\";\nimport { useRef, useState } from \"react\";\nimport { useInterval } from \"react-use\";\n\nconst pad = (n: number): string => padStart(String(n), 2, \"0\");\n\nconst calcRemaining = (expiration: Dayjs): number =>\n  Math.max(expiration.diff(dayjs()), 0);\n\ninterface Countdown {\n  remaining: {\n    minutes: number;\n    seconds: number;\n    formatted: string;\n  };\n  reset: () => void;\n  isRunning: boolean;\n  start: (duration: number) => void;\n}\n\ninterface CountdownOptions {\n  onExpire?: () => void;\n}\n\nexport const useCountdown = ({\n  onExpire = identity,\n}: CountdownOptions = {}): Countdown => {\n  const expiration = useRef<Dayjs>(dayjs());\n  const [remaining, setRemaining] = useState(0);\n  const seconds = Math.round(remaining / 1000);\n  const minutes = Math.floor(seconds / 60);\n\n  useInterval(\n    () => {\n      const newValue = calcRemaining(expiration.current);\n\n      if (!newValue) {\n        onExpire();\n      }\n\n      setRemaining(newValue);\n    },\n    remaining > 0 ? 1000 : null\n  );\n\n  return {\n    isRunning: remaining > 0,\n    remaining: {\n      minutes,\n      seconds,\n      formatted: `${pad(minutes)}:${pad(seconds % 60)}`,\n    },\n    start: (duration: number) => {\n      expiration.current = dayjs().add(duration, \"milliseconds\");\n      setRemaining(calcRemaining(expiration.current));\n    },\n    reset: () => setRemaining(0),\n  };\n};\n","import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value !== null) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { atom } from \"recoil\";\nimport { IBinary, IGameDuration } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const answerIndicatorState = atom<-1 | IBinary>({\n  key: \"answerIndicatorState\",\n  default: -1,\n});\n\nexport const gameDurationState = atom<IGameDuration>({\n  key: \"gameDurationState\",\n  default: 30000,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IStats } from \"types\";\nimport { gameStatsState as fntGameStatsState } from \"./find-the-note\";\nimport { gameStatsState as ntnGameStatsState } from \"./name-the-note\";\n\ninterface GameStats extends IStats {\n  game: string;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => {\n    const { total: ntnStats } = get(ntnGameStatsState);\n    const { total: ftnStats } = get(fntGameStatsState);\n\n    return [\n      {\n        game: \"Name the Note\",\n        ...ntnStats,\n      },\n      {\n        ...ftnStats,\n        game: \"Find the Note\",\n      },\n    ];\n  },\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameStatsState);\n      reset(fntGameStatsState);\n    }\n  },\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboardConfig, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboardConfig>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretMarkersState = atom<boolean>({\n  key: \"fretMarkersState\",\n  default: true,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { IFretboardConfig, IFretboardId, IGameDurationConfig } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboardConfig> = {\n  \"standard-6\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    h: 220,\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    h: 220,\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    h: 220,\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    h: 254,\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    h: 200,\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n\nexport const gameDurations: IGameDurationConfig[] = [\n  {\n    label: \"30s\",\n    value: 30000,\n  },\n  {\n    label: \"1m\",\n    value: 60000,\n  },\n  {\n    label: \"3m\",\n    value: 180000,\n  },\n];\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { fretboardNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\n\n/**\n * Seed for queue shuffling.\n */\nconst seedState = atom<number>({\n  key: \"find-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\n/**\n * Maintain a queue for a consistent spread of notes.\n */\nconst queueState = selector<string[]>({\n  key: \"find-the-note/queueState\",\n  get: ({ get }) => shuffle(getNoteNames(), get(seedState)),\n});\n\n/**\n * Pointer to the current note in the queue.\n */\nconst pointerState = atom<number>({\n  key: \"find-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * Notes the user has selected to be rendered on the fretboard.\n */\nexport const activeNotesState = atom<INote[]>({\n  key: \"find-the-note/activeNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * A wrapper around pointerState which handles reshuffling the\n * queue when we reach the end, moving the pointer and clearing the\n * fretboard.\n */\nexport const pointerProxySelector = selector<number>({\n  key: \"find-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      // Reshuffle queue and point to the start\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      // Move pointer to next note\n      set(pointerState, newValue);\n    }\n\n    // Clear fretboard\n    reset(activeNotesState);\n  },\n});\n\n/**\n * Current game note.\n */\nexport const targetNoteState = selector<string>({\n  key: \"find-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n\n/**\n * Number of times the target note appears on the fretboard.\n */\nexport const targetNoteCountState = selector<number>({\n  key: \"find-the-note/targetNoteCountState\",\n  get: ({ get }) =>\n    filter(get(fretboardNotesState), [\"name\", get(targetNoteState)]).length,\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"find-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"find-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"find-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"find-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"find-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"find-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { without } from \"lodash\";\nimport { DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport {\n  activeNotesState,\n  pointerProxySelector,\n  targetNoteCountState,\n  targetNoteState,\n} from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote | null>({\n  key: \"find-the-note/gameProxySelector\",\n  get: () => null,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    // Incorrect\n    if (newValue === null || newValue.name !== get(targetNoteState)) {\n      // Indicate incorrect answer\n      set(answerIndicatorState, 0);\n      // Update failed attempt stat\n      set(statProxySelector, false);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Correct\n    const count = get(targetNoteCountState);\n    const activeNotes = get(activeNotesState);\n    const nextActiveNotes = [...without(activeNotes, newValue), newValue];\n\n    // All notes found\n    if (nextActiveNotes.length === count) {\n      // Indicate correct answer\n      set(answerIndicatorState, 1);\n      // Update successful attempt stat\n      set(statProxySelector, true);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Draw selected note on the fretboard\n    set(activeNotesState, nextActiveNotes);\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"../fretboard\";\n\nconst seedState = atom<number>({\n  key: \"name-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst queueState = selector<INote[]>({\n  key: \"name-the-note/queueState\",\n  get: ({ get }) => shuffle(get(fretboardNotesState), get(seedState)),\n});\n\nconst pointerState = atom<number>({\n  key: \"name-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const pointerProxySelector = selector<number>({\n  key: \"name-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      set(pointerState, newValue);\n    }\n  },\n});\n\nexport const targetNoteState = selector<INote>({\n  key: \"name-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"name-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"name-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"name-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"name-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"name-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"name-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IBinary, INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport { pointerProxySelector, targetNoteState } from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote>({\n  key: \"name-the-note/gameProxySelector\",\n  get: ({ get }) => get(targetNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    const isCorrect = newValue.name === get(targetNoteState).name;\n\n    // Indicate answer correctness\n    set(answerIndicatorState, Number(isCorrect) as IBinary);\n\n    // Update attempt stat\n    set(statProxySelector, isCorrect);\n\n    if (isCorrect) {\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n    }\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import {\n  Container,\n  FormControl,\n  FormLabel,\n  HStack,\n  Icon,\n  Link,\n  Radio,\n  RadioGroup,\n  Select,\n  Switch,\n  VStack,\n} from \"@chakra-ui/react\";\nimport Card from \"components/Card\";\nimport * as config from \"config\";\nimport { map } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { HiOutlineExternalLink as ExternalLinkIcon } from \"react-icons/hi\";\nimport { useRecoilState } from \"recoil\";\nimport {\n  fretboardIdState,\n  fretMarkersState,\n  halfNotesState,\n  leftHandedState,\n} from \"state\";\nimport { IFretboardId, IHalfNotes } from \"types\";\n\nconst FretboardSelect = () => {\n  const [value, setValue] = useRecoilState(fretboardIdState);\n\n  return (\n    <FormControl>\n      <FormLabel>Fretboard</FormLabel>\n      <Select\n        value={value}\n        onChange={(event) => setValue(event.target.value as IFretboardId)}\n      >\n        {map(config.fretboards, (fretboard) => (\n          <option key={fretboard.id} value={fretboard.id}>\n            {fretboard.name}\n          </option>\n        ))}\n      </Select>\n      <Link\n        mt={1}\n        isExternal\n        color=\"teal.500\"\n        alignItems=\"center\"\n        display=\"inline-flex\"\n        href=\"https://github.com/stuart-williams/note-trainer/issues/new?assignees=&labels=&template=fretboard-request.md&title=Fretboard%20Request\"\n      >\n        Request a fretboard\n        <Icon ml={1} as={ExternalLinkIcon} />\n      </Link>\n    </FormControl>\n  );\n};\n\nconst LeftHanded = () => {\n  const [isChecked, setChecked] = useRecoilState(leftHandedState);\n\n  return (\n    <FormControl>\n      <FormLabel>Left Handed</FormLabel>\n      <Switch\n        isChecked={isChecked}\n        onChange={(event) => setChecked(event.target.checked)}\n      />\n    </FormControl>\n  );\n};\n\nconst FretMarkers = () => {\n  const [isChecked, setChecked] = useRecoilState(fretMarkersState);\n\n  return (\n    <FormControl>\n      <FormLabel>Fret Markers</FormLabel>\n      <Switch\n        isChecked={isChecked}\n        onChange={(event) => setChecked(event.target.checked)}\n      />\n    </FormControl>\n  );\n};\n\nconst HalfNotes = () => {\n  const [value, setValue] = useRecoilState(halfNotesState);\n\n  return (\n    <FormControl>\n      <FormLabel>Half Notes</FormLabel>\n      <RadioGroup\n        value={value}\n        onChange={(value) => setValue(value as IHalfNotes)}\n      >\n        <HStack>\n          <Radio value=\"random\">Random</Radio>\n          <Radio value=\"sharps\">Sharps</Radio>\n          <Radio value=\"flats\">Flats</Radio>\n        </HStack>\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nexport const SettingsPage: FC = () => (\n  <Container>\n    <VStack as={Card} spacing={6}>\n      <FretboardSelect />\n      <LeftHanded />\n      <FretMarkers />\n      <HalfNotes />\n    </VStack>\n  </Container>\n);\n\nexport default SettingsPage;\n"],"sourceRoot":""}