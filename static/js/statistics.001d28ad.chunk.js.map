{"version":3,"sources":["state/statistics.ts","state/index.ts","utils/maths.ts","utils/notes.ts","utils/state.ts","state/fretboard.ts","state/settings.ts","config/index.ts","state/find-the-note/notes.ts","state/find-the-note/statistics.ts","state/find-the-note/index.ts","state/name-the-note/notes.ts","state/name-the-note/statistics.ts","state/name-the-note/index.ts","pages/statistics.tsx","../node_modules/@chakra-ui/table/dist/chakra-ui-table.esm.js"],"names":["gameStatsState","selector","key","get","ntnStats","ntnGameStatsState","total","ftnStats","fntGameStatsState","game","set","newValue","reset","DefaultValue","answerIndicatorState","atom","default","percent","value","round","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","Math","random","localStorageEffect","defaultValue","node","setSelf","onSet","ls","fretboardState","config","fretboardIdState","fretboardNotesState","fretboard","leftHanded","leftHandedState","flatMap","tuning","i","fretCount","steps","id","simple","name","string","effects_UNSTABLE","fretMarkersState","halfNotesState","fretboards","h","fretMarkers","guages","reverse","seedState","queueState","shuffle","pointerState","activeNotesState","pointerProxySelector","queue","targetNoteState","targetNoteCountState","filter","length","totalAttemptsState","totalCorrectState","gameAttemptsState","gameCorrectState","statProxySelector","Number","correct","attempts","gameProxySelector","count","activeNotes","nextActiveNotes","without","isCorrect","StatisticsPage","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","stats","useRecoilValue","resetStats","useResetRecoilState","as","Card","align","variant","isNumeric","leastDestructiveRef","fontSize","fontWeight","ref","onClick","colorScheme","ml","_extends","Object","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_excluded2","_excluded3","_excluded4","_excluded5","Table","forwardRef","props","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","className","tableProps","React","StylesProvider","chakra","table","role","__css","cx","__DEV__","displayName","TableCaption","_props$placement","placement","rest","useStyles","caption","captionSide","Thead","thead","Tbody","tbody","Th","_ref2","th","Tr","tr","Td","_ref3","td"],"mappings":"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","file":"static/js/statistics.001d28ad.chunk.js","sourcesContent":["import { DefaultValue, selector } from \"recoil\";\nimport { IStats } from \"types\";\nimport { gameStatsState as fntGameStatsState } from \"./find-the-note\";\nimport { gameStatsState as ntnGameStatsState } from \"./name-the-note\";\n\ninterface GameStats extends IStats {\n  game: string;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => {\n    const { total: ntnStats } = get(ntnGameStatsState);\n    const { total: ftnStats } = get(fntGameStatsState);\n\n    return [\n      {\n        game: \"Name the Note\",\n        ...ntnStats,\n      },\n      {\n        ...ftnStats,\n        game: \"Find the Note\",\n      },\n    ];\n  },\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameStatsState);\n      reset(fntGameStatsState);\n    }\n  },\n});\n","import { atom } from \"recoil\";\nimport { IBinary } from \"types\";\n\nexport const answerIndicatorState = atom<-1 | IBinary>({\n  key: \"answerIndicatorState\",\n  default: -1,\n});\n\nexport * from \"./fretboard\";\nexport * from \"./settings\";\nexport * from \"./statistics\";\n","import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value !== null) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretMarkersState = atom<boolean>({\n  key: \"fretMarkersState\",\n  default: true,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    h: 220,\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    h: 220,\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    h: 220,\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    h: 254,\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    h: 200,\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { fretboardNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\n\n/**\n * Seed for queue shuffling.\n */\nconst seedState = atom<number>({\n  key: \"find-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\n/**\n * Maintain a queue for a consistent spread of notes.\n */\nconst queueState = selector<string[]>({\n  key: \"find-the-note/queueState\",\n  get: ({ get }) => shuffle(getNoteNames(), get(seedState)),\n});\n\n/**\n * Pointer to the current note in the queue.\n */\nconst pointerState = atom<number>({\n  key: \"find-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * Notes the user has selected to be rendered on the fretboard.\n */\nexport const activeNotesState = atom<INote[]>({\n  key: \"find-the-note/activeNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * A wrapper around pointerState which handles reshuffling the\n * queue when we reach the end, moving the pointer and clearing the\n * fretboard.\n */\nexport const pointerProxySelector = selector<number>({\n  key: \"find-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      // Reshuffle queue and point to the start\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      // Move pointer to next note\n      set(pointerState, newValue);\n    }\n\n    // Clear fretboard\n    reset(activeNotesState);\n  },\n});\n\n/**\n * Current game note.\n */\nexport const targetNoteState = selector<string>({\n  key: \"find-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n\n/**\n * Number of times the target note appears on the fretboard.\n */\nexport const targetNoteCountState = selector<number>({\n  key: \"find-the-note/targetNoteCountState\",\n  get: ({ get }) =>\n    filter(get(fretboardNotesState), [\"name\", get(targetNoteState)]).length,\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"find-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"find-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"find-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"find-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"find-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"find-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { without } from \"lodash\";\nimport { DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport {\n  activeNotesState,\n  pointerProxySelector,\n  targetNoteCountState,\n  targetNoteState,\n} from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote | null>({\n  key: \"find-the-note/gameProxySelector\",\n  get: () => null,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    // Incorrect\n    if (newValue === null || newValue.name !== get(targetNoteState)) {\n      // Indicate incorrect answer\n      set(answerIndicatorState, 0);\n      // Update failed attempt stat\n      set(statProxySelector, false);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Correct\n    const count = get(targetNoteCountState);\n    const activeNotes = get(activeNotesState);\n    const nextActiveNotes = [...without(activeNotes, newValue), newValue];\n\n    // All notes found\n    if (nextActiveNotes.length === count) {\n      // Indicate correct answer\n      set(answerIndicatorState, 1);\n      // Update successful attempt stat\n      set(statProxySelector, true);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Draw selected note on the fretboard\n    set(activeNotesState, nextActiveNotes);\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"../fretboard\";\n\nconst seedState = atom<number>({\n  key: \"name-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst queueState = selector<INote[]>({\n  key: \"name-the-note/queueState\",\n  get: ({ get }) => shuffle(get(fretboardNotesState), get(seedState)),\n});\n\nconst pointerState = atom<number>({\n  key: \"name-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const pointerProxySelector = selector<number>({\n  key: \"name-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      set(pointerState, newValue);\n    }\n  },\n});\n\nexport const targetNoteState = selector<INote>({\n  key: \"name-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"name-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"name-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"name-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"name-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"name-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"name-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IBinary, INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport { pointerProxySelector, targetNoteState } from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote>({\n  key: \"name-the-note/gameProxySelector\",\n  get: ({ get }) => get(targetNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    const isCorrect = newValue.name === get(targetNoteState).name;\n\n    // Indicate answer correctness\n    set(answerIndicatorState, Number(isCorrect) as IBinary);\n\n    // Update attempt stat\n    set(statProxySelector, isCorrect);\n\n    if (isCorrect) {\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n    }\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Button,\n  Container,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport Card from \"components/Card\";\nimport React, { FC, useRef } from \"react\";\nimport { useRecoilValue, useResetRecoilState } from \"recoil\";\nimport { gameStatsState } from \"state\";\n\nconst StatisticsPage: FC = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef<HTMLButtonElement>(null);\n  const stats = useRecoilValue(gameStatsState);\n  const resetStats = useResetRecoilState(gameStatsState);\n\n  const handleResetClick = () => {\n    resetStats();\n    onClose();\n  };\n\n  return (\n    <Container>\n      <VStack as={Card} align=\"stretch\">\n        <Table variant=\"simple\">\n          <Thead>\n            <Tr>\n              <Th>Game</Th>\n              <Th isNumeric>✅</Th>\n              <Th isNumeric>Total</Th>\n              <Th isNumeric>%</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {stats.map(({ game, correct, attempts, percent }) => (\n              <Tr key={game}>\n                <Td>{game}</Td>\n                <Td isNumeric>{correct}</Td>\n                <Td isNumeric>{attempts}</Td>\n                <Td isNumeric>{percent}%</Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n        <AlertDialog\n          isOpen={isOpen}\n          onClose={onClose}\n          leastDestructiveRef={cancelRef}\n        >\n          <AlertDialogOverlay>\n            <AlertDialogContent>\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                Reset Statistics\n              </AlertDialogHeader>\n              <AlertDialogBody>\n                Are you sure? This can't be undone.\n              </AlertDialogBody>\n              <AlertDialogFooter>\n                <Button\n                  ref={cancelRef}\n                  onClick={onClose}\n                  variant=\"outline\"\n                  colorScheme=\"blue\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  ml={2}\n                  colorScheme=\"red\"\n                  variant=\"outline\"\n                  onClick={handleResetClick}\n                >\n                  Reset\n                </Button>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialogOverlay>\n        </AlertDialog>\n        <Button onClick={onOpen} colorScheme=\"red\" variant=\"outline\">\n          Reset Statistics\n        </Button>\n      </VStack>\n    </Container>\n  );\n};\n\nexport default StatisticsPage;\n","import { forwardRef, chakra, useMultiStyleConfig, omitThemingProps, StylesProvider, useStyles } from '@chakra-ui/system';\nimport { cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"overflow\", \"overflowX\", \"className\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"placement\"],\n    _excluded4 = [\"isNumeric\"],\n    _excluded5 = [\"isNumeric\"];\nvar TableContainer = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _ref;\n\n  var overflow = props.overflow,\n      overflowX = props.overflowX,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-table__container\", className)\n  }, rest, {\n    __css: {\n      display: \"block\",\n      whiteSpace: \"nowrap\",\n      WebkitOverflowScrolling: \"touch\",\n      overflowX: (_ref = overflow != null ? overflow : overflowX) != null ? _ref : \"auto\",\n      overflowY: \"hidden\",\n      maxWidth: \"100%\"\n    }\n  }));\n});\nvar Table = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Table\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      tableProps = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded2);\n\n  return /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.table, _extends({\n    role: \"table\",\n    ref: ref,\n    __css: styles.table,\n    className: cx(\"chakra-table\", className)\n  }, tableProps)));\n});\n\nif (__DEV__) {\n  Table.displayName = \"Table\";\n}\n\nvar TableCaption = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"bottom\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.caption, _extends({}, rest, {\n    ref: ref,\n    __css: _extends({}, styles.caption, {\n      captionSide: placement\n    })\n  }));\n});\n\nif (__DEV__) {\n  TableCaption.displayName = \"TableCaption\";\n}\n\nvar Thead = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.thead, _extends({}, props, {\n    ref: ref,\n    __css: styles.thead\n  }));\n});\nvar Tbody = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tbody, _extends({}, props, {\n    ref: ref,\n    __css: styles.tbody\n  }));\n});\nvar Tfoot = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tfoot, _extends({}, props, {\n    ref: ref,\n    __css: styles.tfoot\n  }));\n});\nvar Th = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var isNumeric = _ref2.isNumeric,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded4);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.th, _extends({}, rest, {\n    ref: ref,\n    __css: styles.th,\n    \"data-is-numeric\": isNumeric\n  }));\n});\nvar Tr = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tr, _extends({\n    role: \"row\"\n  }, props, {\n    ref: ref,\n    __css: styles.tr\n  }));\n});\nvar Td = /*#__PURE__*/forwardRef(function (_ref3, ref) {\n  var isNumeric = _ref3.isNumeric,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded5);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.td, _extends({\n    role: \"gridcell\"\n  }, rest, {\n    ref: ref,\n    __css: styles.td,\n    \"data-is-numeric\": isNumeric\n  }));\n});\n\nexport { Table, TableCaption, TableContainer, Tbody, Td, Tfoot, Th, Thead, Tr };\n"],"sourceRoot":""}