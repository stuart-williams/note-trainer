{"version":3,"sources":["utils/countdown.ts","utils/maths.ts","utils/notes.ts","utils/state.ts","state/game.ts","state/statistics.ts","state/fretboard.ts","state/settings.ts","config/index.ts","state/find-the-note/notes.ts","state/find-the-note/statistics.ts","state/find-the-note/index.ts","state/name-the-note/notes.ts","state/name-the-note/statistics.ts","state/name-the-note/index.ts","components/RotateDevice.tsx","components/Fretboard/Frets.tsx","components/Fretboard/Notes.tsx","components/Fretboard/Strings.tsx","components/Fretboard/Fretboard.tsx","components/Keyboard.tsx","pages/fretboard-reference.tsx"],"names":["pad","n","padStart","String","calcRemaining","expiration","Math","max","diff","dayjs","useCountdown","onExpire","identity","useRef","useState","remaining","setRemaining","seconds","round","minutes","floor","useInterval","newValue","current","isRunning","formatted","start","duration","add","reset","percent","value","total","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","random","localStorageEffect","defaultValue","node","setSelf","onSet","key","ls","DefaultValue","answerIndicatorState","atom","default","gameDurationState","effects_UNSTABLE","gameStatsState","selector","get","ntnStats","ntnGameStatsState","ftnStats","fntGameStatsState","game","set","fretboardState","config","fretboardIdState","fretboardNotesState","fretboard","leftHanded","leftHandedState","flatMap","tuning","i","fretCount","steps","id","simple","name","string","fretMarkersState","halfNotesState","fretboards","h","fretMarkers","guages","reverse","gameDurations","label","seedState","queueState","shuffle","pointerState","activeNotesState","pointerProxySelector","queue","targetNoteState","targetNoteCountState","filter","length","totalAttemptsState","totalCorrectState","gameAttemptsState","gameCorrectState","statProxySelector","Number","correct","attempts","gameProxySelector","count","activeNotes","nextActiveNotes","without","isCorrect","RotateDevice","isPortrait","useOrientation","type","includes","isOpen","setOpen","cancelRef","useEffect","isCentered","onClose","leastDestructiveRef","mx","textAlign","as","VStack","pb","FcRotateToLandscape","boxSize","FretsGrid","chakra","Grid","baseStyle","top","left","right","bottom","position","pointerEvents","Fret","alignItems","flexDirection","justifyContent","_before","w","background","Nut","Box","content","FretMarker","Circle","bg","Frets","useRecoilValue","columns","templateColumns","fretNum","numDots","hasMarker","renderMarker","styles","undefined","sx","templateRows","NotesGrid","SimpleGrid","color","display","borderRadius","transform","Notes","onNoteClick","notes","activeNote","find","displayName","onClick","StringsGrid","Flex","boxShadow","Strings","_","Board","Fretboard","noteRange","first","toMidi","last","shortcuts","KeyboardShortcuts","create","firstNote","lastNote","keyboardConfig","HOME_ROW","Container","ContainerComponent","maxH","minH","flex","maxW","props","cache","stopNote","playNote","midi","keyboardShortcuts","renderNoteLabel","nameName","className","FretboardReference","noteFilter","setNoteFilter","useMemo","reduce","accum","alignSelf"],"mappings":"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","file":"static/js/fretboard-reference.a376c885.chunk.js","sourcesContent":["import dayjs, { Dayjs } from \"dayjs\";\nimport { identity, padStart } from \"lodash\";\nimport { useRef, useState } from \"react\";\nimport { useInterval } from \"react-use\";\n\nconst pad = (n: number): string => padStart(String(n), 2, \"0\");\n\nconst calcRemaining = (expiration: Dayjs): number =>\n  Math.max(expiration.diff(dayjs()), 0);\n\ninterface Countdown {\n  remaining: {\n    minutes: number;\n    seconds: number;\n    formatted: string;\n  };\n  reset: () => void;\n  isRunning: boolean;\n  start: (duration: number) => void;\n}\n\ninterface CountdownOptions {\n  onExpire?: () => void;\n}\n\nexport const useCountdown = ({\n  onExpire = identity,\n}: CountdownOptions = {}): Countdown => {\n  const expiration = useRef<Dayjs>(dayjs());\n  const [remaining, setRemaining] = useState(0);\n  const seconds = Math.round(remaining / 1000);\n  const minutes = Math.floor(seconds / 60);\n\n  useInterval(\n    () => {\n      const newValue = calcRemaining(expiration.current);\n\n      if (!newValue) {\n        onExpire();\n      }\n\n      setRemaining(newValue);\n    },\n    remaining > 0 ? 1000 : null\n  );\n\n  return {\n    isRunning: remaining > 0,\n    remaining: {\n      minutes,\n      seconds,\n      formatted: `${pad(minutes)}:${pad(seconds % 60)}`,\n    },\n    start: (duration: number) => {\n      expiration.current = dayjs().add(duration, \"milliseconds\");\n      setRemaining(calcRemaining(expiration.current));\n    },\n    reset: () => setRemaining(0),\n  };\n};\n","import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value !== null) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { atom } from \"recoil\";\nimport { IBinary, IGameDuration } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const answerIndicatorState = atom<-1 | IBinary>({\n  key: \"answerIndicatorState\",\n  default: -1,\n});\n\nexport const gameDurationState = atom<IGameDuration>({\n  key: \"gameDurationState\",\n  default: 30000,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IStats } from \"types\";\nimport { gameStatsState as fntGameStatsState } from \"./find-the-note\";\nimport { gameStatsState as ntnGameStatsState } from \"./name-the-note\";\n\ninterface GameStats extends IStats {\n  game: string;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => {\n    const { total: ntnStats } = get(ntnGameStatsState);\n    const { total: ftnStats } = get(fntGameStatsState);\n\n    return [\n      {\n        game: \"Name the Note\",\n        ...ntnStats,\n      },\n      {\n        ...ftnStats,\n        game: \"Find the Note\",\n      },\n    ];\n  },\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameStatsState);\n      reset(fntGameStatsState);\n    }\n  },\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboardConfig, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboardConfig>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretMarkersState = atom<boolean>({\n  key: \"fretMarkersState\",\n  default: true,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { IFretboardConfig, IFretboardId, IGameDurationConfig } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboardConfig> = {\n  \"standard-6\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    h: 220,\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    h: 220,\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    h: 220,\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    h: 254,\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    h: 200,\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n\nexport const gameDurations: IGameDurationConfig[] = [\n  {\n    label: \"30s\",\n    value: 30000,\n  },\n  {\n    label: \"1m\",\n    value: 60000,\n  },\n  {\n    label: \"3m\",\n    value: 180000,\n  },\n];\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { fretboardNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\n\n/**\n * Seed for queue shuffling.\n */\nconst seedState = atom<number>({\n  key: \"find-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\n/**\n * Maintain a queue for a consistent spread of notes.\n */\nconst queueState = selector<string[]>({\n  key: \"find-the-note/queueState\",\n  get: ({ get }) => shuffle(getNoteNames(), get(seedState)),\n});\n\n/**\n * Pointer to the current note in the queue.\n */\nconst pointerState = atom<number>({\n  key: \"find-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * Notes the user has selected to be rendered on the fretboard.\n */\nexport const activeNotesState = atom<INote[]>({\n  key: \"find-the-note/activeNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * A wrapper around pointerState which handles reshuffling the\n * queue when we reach the end, moving the pointer and clearing the\n * fretboard.\n */\nexport const pointerProxySelector = selector<number>({\n  key: \"find-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      // Reshuffle queue and point to the start\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      // Move pointer to next note\n      set(pointerState, newValue);\n    }\n\n    // Clear fretboard\n    reset(activeNotesState);\n  },\n});\n\n/**\n * Current game note.\n */\nexport const targetNoteState = selector<string>({\n  key: \"find-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n\n/**\n * Number of times the target note appears on the fretboard.\n */\nexport const targetNoteCountState = selector<number>({\n  key: \"find-the-note/targetNoteCountState\",\n  get: ({ get }) =>\n    filter(get(fretboardNotesState), [\"name\", get(targetNoteState)]).length,\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"find-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"find-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"find-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"find-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"find-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"find-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { without } from \"lodash\";\nimport { DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport {\n  activeNotesState,\n  pointerProxySelector,\n  targetNoteCountState,\n  targetNoteState,\n} from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote | null>({\n  key: \"find-the-note/gameProxySelector\",\n  get: () => null,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    // Incorrect\n    if (newValue === null || newValue.name !== get(targetNoteState)) {\n      // Indicate incorrect answer\n      set(answerIndicatorState, 0);\n      // Update failed attempt stat\n      set(statProxySelector, false);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Correct\n    const count = get(targetNoteCountState);\n    const activeNotes = get(activeNotesState);\n    const nextActiveNotes = [...without(activeNotes, newValue), newValue];\n\n    // All notes found\n    if (nextActiveNotes.length === count) {\n      // Indicate correct answer\n      set(answerIndicatorState, 1);\n      // Update successful attempt stat\n      set(statProxySelector, true);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Draw selected note on the fretboard\n    set(activeNotesState, nextActiveNotes);\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"../fretboard\";\n\nconst seedState = atom<number>({\n  key: \"name-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst queueState = selector<INote[]>({\n  key: \"name-the-note/queueState\",\n  get: ({ get }) => shuffle(get(fretboardNotesState), get(seedState)),\n});\n\nconst pointerState = atom<number>({\n  key: \"name-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const pointerProxySelector = selector<number>({\n  key: \"name-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      set(pointerState, newValue);\n    }\n  },\n});\n\nexport const targetNoteState = selector<INote>({\n  key: \"name-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"name-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"name-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"name-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"name-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"name-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"name-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IBinary, INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport { pointerProxySelector, targetNoteState } from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote>({\n  key: \"name-the-note/gameProxySelector\",\n  get: ({ get }) => get(targetNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    const isCorrect = newValue.name === get(targetNoteState).name;\n\n    // Indicate answer correctness\n    set(answerIndicatorState, Number(isCorrect) as IBinary);\n\n    // Update attempt stat\n    set(statProxySelector, isCorrect);\n\n    if (isCorrect) {\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n    }\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Icon,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { FC, useEffect, useRef, useState } from \"react\";\nimport { FcRotateToLandscape } from \"react-icons/fc\";\nimport { useOrientation } from \"react-use\";\n\nconst RotateDevice: FC = () => {\n  const orientation = useOrientation();\n  const isPortrait = orientation.type.includes(\"portrait\");\n  const [isOpen, setOpen] = useState(isPortrait);\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    setOpen(isPortrait);\n  }, [isPortrait]);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={() => setOpen(false)}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent mx={4} textAlign=\"center\">\n          <AlertDialogHeader>Rotate Device</AlertDialogHeader>\n          <AlertDialogBody as={VStack} pb={4}>\n            <Icon as={FcRotateToLandscape} boxSize={20} />\n            <Text>Rotate your device for a better experience</Text>\n          </AlertDialogBody>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default RotateDevice;\n","import { Box, chakra, Circle, Grid } from \"@chakra-ui/react\";\nimport { times } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState, fretMarkersState, leftHandedState } from \"state\";\n\nconst FretsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst Fret = chakra(Grid, {\n  baseStyle: {\n    position: \"relative\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    _before: {\n      w: \"8px\",\n      top: 0,\n      bottom: 0,\n      position: \"absolute\",\n      background: \"linear-gradient(to right, gold, gray, gold)\",\n    },\n  },\n});\n\nconst Nut = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: 0,\n      bottom: 0,\n      w: \"16px\",\n      content: `\"\"`,\n      position: \"absolute\",\n      background: \"gray.200\",\n    },\n  },\n});\n\nconst FretMarker = chakra(Circle, {\n  baseStyle: {\n    h: \"26px\",\n    w: \"26px\",\n    bg: \"gray.200\",\n  },\n});\n\nconst Frets: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n  const leftHanded = useRecoilValue(leftHandedState);\n  const fretMarkers = useRecoilValue(fretMarkersState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <FretsGrid templateColumns={`repeat(${columns}, 1fr)`}>\n      {times(columns).map((i) => {\n        const fretNum = leftHanded ? fretboard.fretCount - i : i;\n        const numDots = fretNum % 12 === 0 ? 2 : 1;\n        const hasMarker = fretboard.fretMarkers.includes(fretNum);\n        const renderMarker = fretMarkers && hasMarker;\n\n        const styles = {\n          \":before\": {\n            [leftHanded ? \"left\" : \"right\"]: \"-4px\",\n            content: fretNum === fretboard.fretCount ? undefined : `\"\"`,\n          },\n        };\n\n        return !fretNum ? (\n          <Nut key={fretNum} sx={styles} />\n        ) : (\n          <Fret\n            sx={styles}\n            key={fretNum}\n            templateRows={`repeat(${numDots}, 1fr)`}\n          >\n            {renderMarker && times(numDots).map((i) => <FretMarker key={i} />)}\n          </Fret>\n        );\n      })}\n    </FretsGrid>\n  );\n};\n\nexport default Frets;\n","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\nimport { find, identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, fretboardState } from \"state\";\nimport { INote } from \"types\";\n\nconst NotesGrid = chakra(SimpleGrid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n  },\n});\n\nconst Note = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      h: \"34px\",\n      w: \"34px\",\n      top: \"50%\",\n      left: \"50%\",\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      position: \"absolute\",\n      justifyContent: \"center\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Notes: FC<Props> = ({ activeNotes, onNoteClick = identity }) => {\n  const fretboard = useRecoilValue(fretboardState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <NotesGrid columns={columns}>\n      {notes.map((note, i) => {\n        const activeNote = find(activeNotes, note);\n        const content = activeNote?.displayName || \"\";\n\n        return (\n          <Note\n            key={i}\n            onClick={() => onNoteClick(note)}\n            sx={\n              activeNote\n                ? {\n                    \":before\": {\n                      bg: \"red.500\",\n                      content: `\"${content}\"`,\n                    },\n                  }\n                : undefined\n            }\n          />\n        );\n      })}\n    </NotesGrid>\n  );\n};\n\nexport default Notes;\n","import { chakra, Flex, Grid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\n\nconst StringsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst String = chakra(Flex, {\n  baseStyle: {\n    alignItems: \"center\",\n    _before: {\n      w: \"100%\",\n      content: `\"\"`,\n      boxShadow: \"md\",\n      background: \"linear-gradient(to bottom, gray, white, gray)\",\n    },\n  },\n});\n\nconst Strings: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <StringsGrid templateRows={`repeat(${fretboard.tuning.length}, 1fr)`}>\n      {fretboard.tuning.map((_, i) => (\n        <String\n          key={i}\n          sx={{\n            \":before\": {\n              h: (fretboard.guages[i] || 1) + \"px\",\n            },\n          }}\n        />\n      ))}\n    </StringsGrid>\n  );\n};\n\nexport default Strings;\n","import { Box, chakra } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\nimport { INote } from \"types\";\nimport Frets from \"./Frets\";\nimport Notes from \"./Notes\";\nimport Strings from \"./Strings\";\n\nconst Board = chakra(Box, {\n  baseStyle: {\n    bg: `#222222`,\n    position: \"relative\",\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Fretboard: FC<Props> = ({ activeNotes, onNoteClick }) => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <Board h={fretboard.h}>\n      <Frets />\n      <Strings />\n      <Notes onNoteClick={onNoteClick} activeNotes={activeNotes} />\n    </Board>\n  );\n};\n\nexport default Fretboard;\n","import {\n  chakra,\n  Container as ContainerComponent,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Midi } from \"@tonaljs/tonal\";\nimport { identity } from \"lodash\";\nimport React, { FC, useRef } from \"react\";\nimport { KeyboardShortcuts, Piano } from \"react-piano\";\nimport \"react-piano/dist/styles.css\";\nimport { useRecoilValue } from \"recoil\";\nimport { halfNotesState } from \"state\";\nimport \"theme/react-piano.css\";\nimport { midiToNoteName, toDisplayNoteName } from \"utils\";\n\nconst noteRange = {\n  first: Midi.toMidi(\"c4\"),\n  last: Midi.toMidi(\"b4\"),\n};\n\nconst shortcuts = KeyboardShortcuts.create({\n  firstNote: noteRange.first,\n  lastNote: noteRange.last,\n  keyboardConfig: KeyboardShortcuts.HOME_ROW,\n});\n\nconst Container = chakra(ContainerComponent, {\n  baseStyle: {\n    maxH: \"220px\",\n    minH: \"100px\",\n    flex: \"1 1 auto\",\n    maxW: \"container.sm\",\n  },\n});\n\ninterface Props {\n  onClick: (noteName: string) => void;\n}\n\nconst Keyboard: FC<Props> = ({ onClick, ...props }) => {\n  const halfNotes = useRecoilValue(halfNotesState);\n\n  /**\n   * renderNoteLabel is called on mouse over for some reason so\n   * cache `[midi]: noteName` so we don't randomly switch between\n   * sharps and flats when halfNotes = \"random\"\n   */\n  const cache = useRef<{ [midi: number]: string }>({});\n\n  const renderNoteLabel = ({ midiNumber: midi }: { midiNumber: number }) => {\n    const nameName = cache.current[midi] || toDisplayNoteName(midi, halfNotes);\n    cache.current[midi] = nameName;\n\n    return <Text className=\"ReactPiano__NoteLabel\">{nameName}</Text>;\n  };\n\n  const handleClick = (midi: number) => onClick(midiToNoteName(midi));\n\n  return (\n    <Container {...props}>\n      <Piano\n        stopNote={identity}\n        noteRange={noteRange}\n        playNote={handleClick}\n        keyboardShortcuts={shortcuts}\n        renderNoteLabel={renderNoteLabel}\n      />\n    </Container>\n  );\n};\n\nexport default chakra(Keyboard);\n","import Fretboard from \"components/Fretboard\";\nimport Keyboard from \"components/Keyboard\";\nimport RotateDevice from \"components/RotateDevice\";\nimport React, { FC, useMemo, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, halfNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { toDisplayNoteName } from \"utils\";\n\nconst FretboardReference: FC = () => {\n  const halfNotes = useRecoilValue(halfNotesState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const [noteFilter, setNoteFilter] = useState<string>(\"\");\n\n  const activeNotes = useMemo<INote[]>(\n    () =>\n      notes.reduce<INote[]>(\n        (accum, note) =>\n          !noteFilter || note.name === noteFilter\n            ? [\n                ...accum,\n                {\n                  ...note,\n                  displayName: toDisplayNoteName(note.name, halfNotes),\n                },\n              ]\n            : accum,\n        []\n      ),\n    [noteFilter, halfNotes]\n  );\n\n  return (\n    <>\n      <RotateDevice />\n      <Fretboard activeNotes={activeNotes} />\n      <Keyboard alignSelf=\"center\" onClick={setNoteFilter} />\n    </>\n  );\n};\n\nexport default FretboardReference;\n"],"sourceRoot":""}