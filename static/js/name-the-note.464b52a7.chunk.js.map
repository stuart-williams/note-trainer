{"version":3,"sources":["utils/maths.ts","utils/notes.ts","utils/state.ts","state/settings.ts","state/fretboard.ts","state/find-the-note.ts","state/name-the-note.ts","state/statistics.ts","config/index.ts","components/Fretboard/Frets.tsx","images/wood.png","components/Fretboard/Notes.tsx","components/Fretboard/Strings.tsx","components/Fretboard/Fretboard.tsx","components/GameControls.tsx","components/Keyboard.tsx","pages/name-the-note.tsx"],"names":["percent","value","total","round","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","Math","random","localStorageEffect","defaultValue","node","setSelf","onSet","key","ls","newValue","DefaultValue","fretboardIdState","atom","default","effects_UNSTABLE","leftHandedState","halfNotesState","fretboardState","selector","get","config","fretboardNotesState","fretboard","leftHanded","flatMap","tuning","i","fretCount","steps","id","simple","name","string","ftnFrettedNotesState","ftnSeedState","ftnQueueState","seed","notes","shuffle","ftnPointerState","ftnPointerSelector","set","reset","queue","ftnNoteState","ftnCountState","targetNote","filter","length","ftnGameSelector","ntnTotalAttemptsState","ntnTotalCorrectState","ntnGameAttemptsState","ntnGameCorrectState","ntnSeedState","ntnQueueState","ntnPointerState","ntnPointerSelector","ntnNoteState","ntnGameSelector","isCorrect","Number","gameStatsState","game","correct","attempts","fretboards","fretMarkers","guages","reverse","FretsGrid","chakra","Grid","baseStyle","top","left","right","bottom","position","pointerEvents","Fret","alignItems","flexDirection","justifyContent","_before","w","background","Nut","Box","content","FretMarker","Circle","bg","h","base","md","Frets","useRecoilValue","columns","templateColumns","fretNum","numDots","hasMarker","includes","styles","undefined","sx","templateRows","NotesGrid","SimpleGrid","color","display","borderRadius","transform","Notes","activeNotes","onNoteClick","identity","activeNote","find","displayName","onClick","StringsGrid","String","Flex","boxShadow","Strings","_","Board","woodSrc","Fretboard","StatBadge","Badge","minW","fontSize","GameControls","onResetGame","as","HStack","align","maxW","variant","aria-label","icon","ResetIcon","boxSize","spacing","colorScheme","borderWidth","borderColor","px","fontWeight","noteRange","first","toMidi","last","shortcuts","KeyboardShortcuts","create","firstNote","lastNote","keyboardConfig","HOME_ROW","Container","ContainerComponent","minH","flex","maxH","NoteLabel","Text","userSelect","textAlign","p","sm","props","cache","useRef","stopNote","playNote","midi","keyboardShortcuts","renderNoteLabel","nameName","current","isBlackKey","NameTheNotePage","useRecoilState","updateGame","resetGame","useResetRecoilState","alignSelf"],"mappings":"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","file":"static/js/name-the-note.464b52a7.chunk.js","sourcesContent":["import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ftnFrettedNotesState = atom<INote[]>({\n  key: \"ftnFrettedNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnSeedState = atom<number>({\n  key: \"ftnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ftnQueueState = selector<string[]>({\n  key: \"ftnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ftnSeedState);\n    const notes = getNoteNames();\n    return shuffle(notes, seed);\n  },\n});\n\nconst ftnPointerState = atom<number>({\n  key: \"ftnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnPointerSelector = selector<number>({\n  key: \"ftnPointerSelector\",\n  get: ({ get }) => get(ftnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ftnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ftnSeedState, get(ftnSeedState) + Math.random());\n      reset(ftnPointerState);\n    } else {\n      set(ftnPointerState, newValue);\n    }\n\n    reset(ftnFrettedNotesState);\n  },\n});\n\nexport const ftnNoteState = selector<string>({\n  key: \"ftnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ftnQueueState);\n    const pointer = get(ftnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ftnCountState = selector<number>({\n  key: \"ftnCountState\",\n  get: ({ get }) => {\n    const notes = get(fretboardNotesState);\n    const targetNote = get(ftnNoteState);\n\n    return filter(notes, [\"name\", targetNote]).length;\n  },\n});\n\nexport const ftnGameSelector = selector<INote[]>({\n  key: \"ftnGameSelector\",\n  get: ({ get }) => get(ftnFrettedNotesState),\n  set: ({ get, set }, newValue) => {\n    if (\n      newValue instanceof DefaultValue ||\n      newValue.length === get(ftnCountState)\n    ) {\n      // All notes found so move onto the next\n      set(ftnPointerSelector, get(ftnPointerSelector) + 1);\n    } else {\n      set(ftnFrettedNotesState, newValue);\n    }\n  },\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ntnTotalAttemptsState = atom<number>({\n  key: \"ntnTotalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnTotalCorrectState = atom<number>({\n  key: \"ntnTotalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameAttemptsState = atom<number>({\n  key: \"ntnGameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameCorrectState = atom<number>({\n  key: \"ntnGameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnSeedState = atom<number>({\n  key: \"ntnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ntnQueueState = selector<INote[]>({\n  key: \"ntnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ntnSeedState);\n    const notes = get(fretboardNotesState);\n    return shuffle(notes, seed);\n  },\n});\n\nconst ntnPointerState = atom<number>({\n  key: \"ntnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnPointerSelector = selector<number>({\n  key: \"ntnPointerSelector\",\n  get: ({ get }) => get(ntnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ntnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ntnSeedState, get(ntnSeedState) + Math.random());\n      reset(ntnPointerState);\n    } else {\n      set(ntnPointerState, newValue);\n    }\n  },\n});\n\nexport const ntnNoteState = selector<INote>({\n  key: \"ntnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ntnQueueState);\n    const pointer = get(ntnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ntnGameSelector = selector<INote>({\n  key: \"ntnGameSelector\",\n  get: ({ get }) => get(ntnNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset game\n      reset(ntnPointerSelector);\n      reset(ntnGameCorrectState);\n      reset(ntnGameAttemptsState);\n      return;\n    }\n\n    const note = get(ntnNoteState);\n    const isCorrect = newValue.name === note.name;\n\n    // Update game stats\n    set(ntnGameAttemptsState, get(ntnGameAttemptsState) + 1);\n    set(ntnGameCorrectState, get(ntnGameCorrectState) + Number(isCorrect));\n    set(ntnTotalAttemptsState, get(ntnTotalAttemptsState) + 1);\n    set(ntnTotalCorrectState, get(ntnTotalCorrectState) + Number(isCorrect));\n\n    if (isCorrect) {\n      // Next note\n      set(ntnPointerSelector, get(ntnPointerSelector) + 1);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { percent } from \"utils\";\nimport {\n  ntnGameSelector,\n  ntnTotalAttemptsState,\n  ntnTotalCorrectState,\n} from \"./name-the-note\";\n\ninterface GameStats {\n  game: string;\n  percent: number;\n  correct: number;\n  attempts: number;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => [\n    {\n      game: \"Name the Note\",\n      correct: get(ntnTotalCorrectState),\n      attempts: get(ntnTotalAttemptsState),\n      percent: percent(get(ntnTotalCorrectState), get(ntnTotalAttemptsState)),\n    },\n  ],\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameSelector);\n      reset(ntnTotalCorrectState);\n      reset(ntnTotalAttemptsState);\n    }\n  },\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"open-e-6\": {\n    fretCount: 12,\n    id: \"open-e-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"standard-4\": {\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n};\n","import { Box, chakra, Circle, Grid } from \"@chakra-ui/react\";\nimport { times } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState, leftHandedState } from \"state\";\n\nconst FretsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst Fret = chakra(Grid, {\n  baseStyle: {\n    position: \"relative\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    _before: {\n      w: \"8px\",\n      top: 0,\n      bottom: 0,\n      position: \"absolute\",\n      background: \"linear-gradient(to right, gold, gray, gold)\",\n    },\n  },\n});\n\nconst Nut = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: 0,\n      bottom: 0,\n      w: \"16px\",\n      content: `\"\"`,\n      position: \"absolute\",\n      background: \"gray.200\",\n    },\n  },\n});\n\nconst FretMarker = chakra(Circle, {\n  baseStyle: {\n    bg: \"gray.200\",\n    h: { base: \"18px\", md: \"26px\" },\n    w: { base: \"18px\", md: \"26px\" },\n  },\n});\n\nconst Frets: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n  const leftHanded = useRecoilValue(leftHandedState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <FretsGrid templateColumns={`repeat(${columns}, 1fr)`}>\n      {times(columns).map((i) => {\n        const fretNum = leftHanded ? fretboard.fretCount - i : i;\n        const numDots = fretNum % 12 === 0 ? 2 : 1;\n        const hasMarker = fretboard.fretMarkers.includes(fretNum);\n\n        const styles = {\n          \":before\": {\n            [leftHanded ? \"left\" : \"right\"]: \"-4px\",\n            content: fretNum === fretboard.fretCount ? undefined : `\"\"`,\n          },\n        };\n\n        return !fretNum ? (\n          <Nut key={fretNum} sx={styles} />\n        ) : (\n          <Fret\n            sx={styles}\n            key={fretNum}\n            templateRows={`repeat(${numDots}, 1fr)`}\n          >\n            {hasMarker && times(numDots).map((i) => <FretMarker key={i} />)}\n          </Fret>\n        );\n      })}\n    </FretsGrid>\n  );\n};\n\nexport default Frets;\n","export default __webpack_public_path__ + \"static/media/wood.3cf6e95a.png\";","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\nimport { find, identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, fretboardState } from \"state\";\nimport { INote } from \"types\";\n\nconst NotesGrid = chakra(SimpleGrid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n  },\n});\n\nconst Note = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: \"50%\",\n      left: \"50%\",\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      position: \"absolute\",\n      justifyContent: \"center\",\n      h: { base: \"24px\", md: \"34px\" },\n      w: { base: \"24px\", md: \"34px\" },\n      transform: \"translate(-50%, -50%)\",\n    },\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Notes: FC<Props> = ({ activeNotes, onNoteClick = identity }) => {\n  const fretboard = useRecoilValue(fretboardState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <NotesGrid columns={columns}>\n      {notes.map((note, i) => {\n        const activeNote = find(activeNotes, note);\n        const content = activeNote?.displayName || \"\";\n\n        return (\n          <Note\n            key={i}\n            onClick={() => onNoteClick(note)}\n            sx={\n              activeNote\n                ? {\n                    \":before\": {\n                      bg: \"red.500\",\n                      content: `\"${content}\"`,\n                    },\n                  }\n                : undefined\n            }\n          />\n        );\n      })}\n    </NotesGrid>\n  );\n};\n\nexport default Notes;\n","import { chakra, Flex, Grid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\n\nconst StringsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst String = chakra(Flex, {\n  baseStyle: {\n    alignItems: \"center\",\n    _before: {\n      w: \"100%\",\n      content: `\"\"`,\n      boxShadow: \"md\",\n      background: \"linear-gradient(to bottom, gray, white, gray)\",\n    },\n  },\n});\n\nconst Strings: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <StringsGrid templateRows={`repeat(${fretboard.tuning.length}, 1fr)`}>\n      {fretboard.tuning.map((_, i) => (\n        <String\n          key={i}\n          sx={{\n            \":before\": {\n              h: (fretboard.guages[i] || 1) + \"px\",\n            },\n          }}\n        />\n      ))}\n    </StringsGrid>\n  );\n};\n\nexport default Strings;\n","import { Box, chakra } from \"@chakra-ui/react\";\nimport Frets from \"components/Fretboard/Frets\";\nimport woodSrc from \"images/wood.png\";\nimport React, { FC } from \"react\";\nimport { INote } from \"types\";\nimport Notes from \"./Notes\";\nimport Strings from \"./Strings\";\n\nconst Board = chakra(Box, {\n  baseStyle: {\n    h: {\n      md: 220,\n      base: 180,\n    },\n    position: \"relative\",\n    bg: `#222222 url(${woodSrc})`,\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Fretboard: FC<Props> = ({ activeNotes, onNoteClick }) => (\n  <Board>\n    <Frets />\n    <Strings />\n    <Notes onNoteClick={onNoteClick} activeNotes={activeNotes} />\n  </Board>\n);\n\nexport default Fretboard;\n","import {\n  Badge,\n  ButtonProps,\n  chakra,\n  Flex,\n  HStack,\n  Icon,\n  IconButton,\n  Text,\n  Container,\n} from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { GrRefresh as ResetIcon } from \"react-icons/gr\";\nimport { percent } from \"utils\";\n\nconst StatBadge = chakra(Badge, {\n  baseStyle: {\n    minW: \"50px\",\n    fontSize: \"xl\",\n    display: \"flex\",\n    borderRadius: \"md\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\ninterface Props {\n  correct: number;\n  attempts: number;\n  onResetGame?: ButtonProps[\"onClick\"];\n}\n\nconst GameControls: FC<Props> = ({ correct, attempts, onResetGame }) => (\n  <Container as={HStack} align=\"stretch\" maxW=\"container.sm\">\n    <IconButton\n      variant=\"ghost\"\n      aria-label=\"Reset\"\n      onClick={onResetGame}\n      icon={<Icon as={ResetIcon} boxSize=\"20px\" />}\n    />\n    <HStack align=\"stretch\" spacing={1}>\n      <StatBadge colorScheme=\"green\" borderWidth=\"1px\" borderColor=\"green.200\">\n        {correct}\n      </StatBadge>\n      <StatBadge colorScheme=\"red\" borderWidth=\"1px\" borderColor=\"red.200\">\n        {attempts - correct}\n      </StatBadge>\n      <Flex px={2} alignItems=\"center\">\n        <Text fontWeight=\"bold\">{percent(correct, attempts)}%</Text>\n      </Flex>\n    </HStack>\n  </Container>\n);\n\nexport default GameControls;\n","import {\n  chakra,\n  Container as ContainerComponent,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Midi, Note } from \"@tonaljs/tonal\";\nimport { identity } from \"lodash\";\nimport React, { FC, useRef } from \"react\";\nimport { KeyboardShortcuts, Piano } from \"react-piano\";\nimport \"react-piano/dist/styles.css\";\nimport { useRecoilValue } from \"recoil\";\nimport { halfNotesState } from \"state\";\nimport { midiToNoteName, toDisplayNoteName } from \"utils\";\n\nconst noteRange = {\n  first: Midi.toMidi(\"c4\"),\n  last: Midi.toMidi(\"b4\"),\n};\n\nconst shortcuts = KeyboardShortcuts.create({\n  firstNote: noteRange.first,\n  lastNote: noteRange.last,\n  keyboardConfig: KeyboardShortcuts.HOME_ROW,\n});\n\nconst Container = chakra(ContainerComponent, {\n  baseStyle: {\n    minH: \"100px\",\n    flex: \"1 1 auto\",\n    maxW: \"container.sm\",\n    maxH: {\n      base: \"140px\",\n      md: \"220px\",\n    },\n  },\n});\n\nconst NoteLabel = chakra(Text, {\n  baseStyle: {\n    userSelect: \"none\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    p: {\n      base: 0,\n      sm: 1,\n      md: 2,\n    },\n  },\n});\n\ninterface Props {\n  onClick: (noteName: string) => void;\n}\n\nconst Keyboard: FC<Props> = ({ onClick, ...props }) => {\n  const halfNotes = useRecoilValue(halfNotesState);\n\n  /**\n   * renderNoteLabel is called on mouse over for some reason so\n   * cache `[midi]: noteName` so we don't randomly switch between\n   * sharps and flats when halfNotes = \"random\"\n   */\n  const cache = useRef<{ [midi: number]: string }>({});\n\n  const renderNoteLabel = ({ midiNumber: midi }: { midiNumber: number }) => {\n    const nameName = cache.current[midi] || toDisplayNoteName(midi, halfNotes);\n    cache.current[midi] = nameName;\n    const isBlackKey = Note.enharmonic(nameName) !== nameName;\n\n    return (\n      <NoteLabel color={isBlackKey ? \"white\" : \"black\"}>{nameName}</NoteLabel>\n    );\n  };\n\n  const handleClick = (midi: number) => onClick(midiToNoteName(midi));\n\n  return (\n    <Container {...props}>\n      <Piano\n        stopNote={identity}\n        noteRange={noteRange}\n        playNote={handleClick}\n        keyboardShortcuts={shortcuts}\n        renderNoteLabel={renderNoteLabel}\n      />\n    </Container>\n  );\n};\n\nexport default chakra(Keyboard);\n","import Fretboard from \"components/Fretboard\";\nimport GameControls from \"components/GameControls\";\nimport Keyboard from \"components/Keyboard\";\nimport React, { FC } from \"react\";\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\nimport {\n  ntnGameAttemptsState,\n  ntnGameCorrectState,\n  ntnGameSelector,\n} from \"state\";\nimport { INote } from \"types\";\n\nconst NameTheNotePage: FC = () => {\n  const correct = useRecoilValue(ntnGameCorrectState);\n  const attempts = useRecoilValue(ntnGameAttemptsState);\n  const [note, updateGame] = useRecoilState(ntnGameSelector);\n  const resetGame = useResetRecoilState(ntnGameSelector);\n\n  const handleAnswer = (name: string) => {\n    updateGame({ name } as INote);\n  };\n\n  return (\n    <>\n      <GameControls\n        correct={correct}\n        attempts={attempts}\n        onResetGame={resetGame}\n      />\n      <Fretboard activeNotes={note ? [note] : []} />\n      <Keyboard alignSelf=\"center\" onClick={handleAnswer} />\n    </>\n  );\n};\n\nexport default NameTheNotePage;\n"],"sourceRoot":""}