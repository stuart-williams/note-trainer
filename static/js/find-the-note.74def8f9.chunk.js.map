{"version":3,"sources":["state/statistics.ts","state/index.ts","utils/maths.ts","utils/notes.ts","utils/state.ts","state/fretboard.ts","state/settings.ts","config/index.ts","state/find-the-note/notes.ts","state/find-the-note/statistics.ts","state/find-the-note/index.ts","state/name-the-note/notes.ts","state/name-the-note/statistics.ts","state/name-the-note/index.ts","components/RotateDevice.tsx","components/Fretboard/Frets.tsx","components/Fretboard/Notes.tsx","components/Fretboard/Strings.tsx","components/Fretboard/Fretboard.tsx","components/AnswerIndicator.tsx","components/GameControls.tsx","../node_modules/simplur/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","pages/find-the-note.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"names":["gameStatsState","selector","key","get","ntnStats","ntnGameStatsState","total","ftnStats","fntGameStatsState","game","set","newValue","reset","DefaultValue","answerIndicatorState","atom","default","percent","value","round","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","Math","random","localStorageEffect","defaultValue","node","setSelf","onSet","ls","fretboardState","config","fretboardIdState","fretboardNotesState","fretboard","leftHanded","leftHandedState","flatMap","tuning","i","fretCount","steps","id","simple","name","string","effects_UNSTABLE","fretMarkersState","halfNotesState","fretboards","h","fretMarkers","guages","reverse","seedState","queueState","shuffle","pointerState","activeNotesState","pointerProxySelector","queue","targetNoteState","targetNoteCountState","filter","length","totalAttemptsState","totalCorrectState","gameAttemptsState","gameCorrectState","statProxySelector","Number","correct","attempts","gameProxySelector","count","activeNotes","nextActiveNotes","without","isCorrect","RotateDevice","isPortrait","useOrientation","type","includes","useState","isOpen","setOpen","cancelRef","useRef","useEffect","isCentered","onClose","leastDestructiveRef","mx","fontSize","fontWeight","textAlign","as","VStack","pb","FcRotateToLandscape","boxSize","FretsGrid","chakra","Grid","baseStyle","top","left","right","bottom","position","pointerEvents","Fret","alignItems","flexDirection","justifyContent","_before","w","background","Nut","Box","content","FretMarker","Circle","bg","Frets","useRecoilValue","columns","templateColumns","fretNum","numDots","hasMarker","renderMarker","styles","undefined","sx","templateRows","NotesGrid","SimpleGrid","color","display","borderRadius","transform","Notes","onNoteClick","identity","notes","activeNote","find","displayName","onClick","StringsGrid","String","Flex","boxShadow","Strings","_","Board","Fretboard","Mask","Center","opacity","AnswerIndicator","indicateStates","isMounted","useMountedState","useRecoilState","indicator","setIndicator","ref","current","setTimeout","unmountOnExit","in","CorrectIcon","IncorrectIcon","StatBadge","Badge","minW","GameControls","onResetGame","HStack","align","maxW","hasArrow","label","placement","openDelay","variant","aria-label","icon","ResetIcon","spacing","colorScheme","borderWidth","borderColor","px","module","exports","strings","exps","result","isArray","Array","forEach","v","TypeError","last","qty","s","replace","push","shift","join","unsupportedIterableToArray","o","allowArrayLike","it","Symbol","iterator","F","n","done","e","_e","f","err","normalCompletion","didErr","step","next","_e2","arrayLikeToArray","minLen","Object","prototype","toString","call","slice","constructor","from","test","arr","len","arr2","FindTheNotePage","raw","stats","targetNote","updateGame","useSetRecoilState","resetGame","useResetRecoilState","remaining","useMemo","alignSelf","simplur","freeze","defineProperties"],"mappings":"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","file":"static/js/find-the-note.74def8f9.chunk.js","sourcesContent":["import { DefaultValue, selector } from \"recoil\";\nimport { IStats } from \"types\";\nimport { gameStatsState as fntGameStatsState } from \"./find-the-note\";\nimport { gameStatsState as ntnGameStatsState } from \"./name-the-note\";\n\ninterface GameStats extends IStats {\n  game: string;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => {\n    const { total: ntnStats } = get(ntnGameStatsState);\n    const { total: ftnStats } = get(fntGameStatsState);\n\n    return [\n      {\n        game: \"Name the Note\",\n        ...ntnStats,\n      },\n      {\n        ...ftnStats,\n        game: \"Find the Note\",\n      },\n    ];\n  },\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameStatsState);\n      reset(fntGameStatsState);\n    }\n  },\n});\n","import { atom } from \"recoil\";\nimport { IBinary } from \"types\";\n\nexport const answerIndicatorState = atom<-1 | IBinary>({\n  key: \"answerIndicatorState\",\n  default: -1,\n});\n\nexport * from \"./fretboard\";\nexport * from \"./settings\";\nexport * from \"./statistics\";\n","import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value !== null) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretMarkersState = atom<boolean>({\n  key: \"fretMarkersState\",\n  default: true,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    h: 220,\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    h: 220,\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    h: 220,\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    h: 254,\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    h: 200,\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { fretboardNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\n\n/**\n * Seed for queue shuffling.\n */\nconst seedState = atom<number>({\n  key: \"find-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\n/**\n * Maintain a queue for a consistent spread of notes.\n */\nconst queueState = selector<string[]>({\n  key: \"find-the-note/queueState\",\n  get: ({ get }) => shuffle(getNoteNames(), get(seedState)),\n});\n\n/**\n * Pointer to the current note in the queue.\n */\nconst pointerState = atom<number>({\n  key: \"find-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * Notes the user has selected to be rendered on the fretboard.\n */\nexport const activeNotesState = atom<INote[]>({\n  key: \"find-the-note/activeNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * A wrapper around pointerState which handles reshuffling the\n * queue when we reach the end, moving the pointer and clearing the\n * fretboard.\n */\nexport const pointerProxySelector = selector<number>({\n  key: \"find-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      // Reshuffle queue and point to the start\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      // Move pointer to next note\n      set(pointerState, newValue);\n    }\n\n    // Clear fretboard\n    reset(activeNotesState);\n  },\n});\n\n/**\n * Current game note.\n */\nexport const targetNoteState = selector<string>({\n  key: \"find-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n\n/**\n * Number of times the target note appears on the fretboard.\n */\nexport const targetNoteCountState = selector<number>({\n  key: \"find-the-note/targetNoteCountState\",\n  get: ({ get }) =>\n    filter(get(fretboardNotesState), [\"name\", get(targetNoteState)]).length,\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"find-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"find-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"find-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"find-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"find-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"find-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { without } from \"lodash\";\nimport { DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport {\n  activeNotesState,\n  pointerProxySelector,\n  targetNoteCountState,\n  targetNoteState,\n} from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote | null>({\n  key: \"find-the-note/gameProxySelector\",\n  get: () => null,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    // Incorrect\n    if (newValue === null || newValue.name !== get(targetNoteState)) {\n      // Indicate incorrect answer\n      set(answerIndicatorState, 0);\n      // Update failed attempt stat\n      set(statProxySelector, false);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Correct\n    const count = get(targetNoteCountState);\n    const activeNotes = get(activeNotesState);\n    const nextActiveNotes = [...without(activeNotes, newValue), newValue];\n\n    // All notes found\n    if (nextActiveNotes.length === count) {\n      // Indicate correct answer\n      set(answerIndicatorState, 1);\n      // Update successful attempt stat\n      set(statProxySelector, true);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Draw selected note on the fretboard\n    set(activeNotesState, nextActiveNotes);\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"../fretboard\";\n\nconst seedState = atom<number>({\n  key: \"name-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst queueState = selector<INote[]>({\n  key: \"name-the-note/queueState\",\n  get: ({ get }) => shuffle(get(fretboardNotesState), get(seedState)),\n});\n\nconst pointerState = atom<number>({\n  key: \"name-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const pointerProxySelector = selector<number>({\n  key: \"name-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      set(pointerState, newValue);\n    }\n  },\n});\n\nexport const targetNoteState = selector<INote>({\n  key: \"name-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"name-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"name-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"name-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"name-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"name-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"name-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IBinary, INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport { pointerProxySelector, targetNoteState } from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote>({\n  key: \"name-the-note/gameProxySelector\",\n  get: ({ get }) => get(targetNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    const isCorrect = newValue.name === get(targetNoteState).name;\n\n    // Indicate answer correctness\n    set(answerIndicatorState, Number(isCorrect) as IBinary);\n\n    // Update attempt stat\n    set(statProxySelector, isCorrect);\n\n    if (isCorrect) {\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n    }\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Icon,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { FC, useEffect, useRef, useState } from \"react\";\nimport { FcRotateToLandscape } from \"react-icons/fc\";\nimport { useOrientation } from \"react-use\";\n\nconst RotateDevice: FC = () => {\n  const orientation = useOrientation();\n  const isPortrait = orientation.type.includes(\"portrait\");\n  const [isOpen, setOpen] = useState(isPortrait);\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    setOpen(isPortrait);\n  }, [isPortrait]);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={() => setOpen(false)}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent mx={4}>\n          <AlertDialogHeader fontSize=\"xl\" fontWeight=\"bold\" textAlign=\"center\">\n            Rotate Device\n          </AlertDialogHeader>\n          <AlertDialogBody as={VStack} pb={4}>\n            <Icon as={FcRotateToLandscape} boxSize={20} />\n            <Text>Rotate your device for a better experience</Text>\n          </AlertDialogBody>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default RotateDevice;\n","import { Box, chakra, Circle, Grid } from \"@chakra-ui/react\";\nimport { times } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState, fretMarkersState, leftHandedState } from \"state\";\n\nconst FretsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst Fret = chakra(Grid, {\n  baseStyle: {\n    position: \"relative\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    _before: {\n      w: \"8px\",\n      top: 0,\n      bottom: 0,\n      position: \"absolute\",\n      background: \"linear-gradient(to right, gold, gray, gold)\",\n    },\n  },\n});\n\nconst Nut = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: 0,\n      bottom: 0,\n      w: \"16px\",\n      content: `\"\"`,\n      position: \"absolute\",\n      background: \"gray.200\",\n    },\n  },\n});\n\nconst FretMarker = chakra(Circle, {\n  baseStyle: {\n    h: \"26px\",\n    w: \"26px\",\n    bg: \"gray.200\",\n  },\n});\n\nconst Frets: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n  const leftHanded = useRecoilValue(leftHandedState);\n  const fretMarkers = useRecoilValue(fretMarkersState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <FretsGrid templateColumns={`repeat(${columns}, 1fr)`}>\n      {times(columns).map((i) => {\n        const fretNum = leftHanded ? fretboard.fretCount - i : i;\n        const numDots = fretNum % 12 === 0 ? 2 : 1;\n        const hasMarker = fretboard.fretMarkers.includes(fretNum);\n        const renderMarker = fretMarkers && hasMarker;\n\n        const styles = {\n          \":before\": {\n            [leftHanded ? \"left\" : \"right\"]: \"-4px\",\n            content: fretNum === fretboard.fretCount ? undefined : `\"\"`,\n          },\n        };\n\n        return !fretNum ? (\n          <Nut key={fretNum} sx={styles} />\n        ) : (\n          <Fret\n            sx={styles}\n            key={fretNum}\n            templateRows={`repeat(${numDots}, 1fr)`}\n          >\n            {renderMarker && times(numDots).map((i) => <FretMarker key={i} />)}\n          </Fret>\n        );\n      })}\n    </FretsGrid>\n  );\n};\n\nexport default Frets;\n","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\nimport { find, identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, fretboardState } from \"state\";\nimport { INote } from \"types\";\n\nconst NotesGrid = chakra(SimpleGrid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n  },\n});\n\nconst Note = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      h: \"34px\",\n      w: \"34px\",\n      top: \"50%\",\n      left: \"50%\",\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      position: \"absolute\",\n      justifyContent: \"center\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Notes: FC<Props> = ({ activeNotes, onNoteClick = identity }) => {\n  const fretboard = useRecoilValue(fretboardState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <NotesGrid columns={columns}>\n      {notes.map((note, i) => {\n        const activeNote = find(activeNotes, note);\n        const content = activeNote?.displayName || \"\";\n\n        return (\n          <Note\n            key={i}\n            onClick={() => onNoteClick(note)}\n            sx={\n              activeNote\n                ? {\n                    \":before\": {\n                      bg: \"red.500\",\n                      content: `\"${content}\"`,\n                    },\n                  }\n                : undefined\n            }\n          />\n        );\n      })}\n    </NotesGrid>\n  );\n};\n\nexport default Notes;\n","import { chakra, Flex, Grid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\n\nconst StringsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst String = chakra(Flex, {\n  baseStyle: {\n    alignItems: \"center\",\n    _before: {\n      w: \"100%\",\n      content: `\"\"`,\n      boxShadow: \"md\",\n      background: \"linear-gradient(to bottom, gray, white, gray)\",\n    },\n  },\n});\n\nconst Strings: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <StringsGrid templateRows={`repeat(${fretboard.tuning.length}, 1fr)`}>\n      {fretboard.tuning.map((_, i) => (\n        <String\n          key={i}\n          sx={{\n            \":before\": {\n              h: (fretboard.guages[i] || 1) + \"px\",\n            },\n          }}\n        />\n      ))}\n    </StringsGrid>\n  );\n};\n\nexport default Strings;\n","import { Box, chakra } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\nimport { INote } from \"types\";\nimport Frets from \"./Frets\";\nimport Notes from \"./Notes\";\nimport Strings from \"./Strings\";\n\nconst Board = chakra(Box, {\n  baseStyle: {\n    bg: `#222222`,\n    position: \"relative\",\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Fretboard: FC<Props> = ({ activeNotes, onNoteClick }) => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <Board h={fretboard.h}>\n      <Frets />\n      <Strings />\n      <Notes onNoteClick={onNoteClick} activeNotes={activeNotes} />\n    </Board>\n  );\n};\n\nexport default Fretboard;\n","import { Center, chakra, Fade, Icon } from \"@chakra-ui/react\";\nimport React, { FC, useEffect, useRef } from \"react\";\nimport {\n  AiOutlineCheck as CorrectIcon,\n  AiOutlineClose as IncorrectIcon,\n} from \"react-icons/ai\";\nimport { useMountedState } from \"react-use\";\nimport { useRecoilState } from \"recoil\";\nimport { answerIndicatorState } from \"state\";\nimport { IBinary } from \"types\";\n\nconst Mask = chakra(Center, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    opacity: 0.7,\n    position: \"absolute\",\n  },\n});\n\ninterface Props {\n  indicateStates?: IBinary[];\n}\n\nconst AnswerIndicator: FC<Props> = ({ indicateStates = [0, 1] }) => {\n  const isMounted = useMountedState();\n  const [indicator, setIndicator] = useRecoilState(answerIndicatorState);\n\n  const ref = useRef<IBinary>(0);\n  ref.current = (indicator > -1 ? indicator : ref.current) as IBinary;\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (isMounted()) {\n        setIndicator(-1);\n      }\n    }, 250);\n  }, [indicator]);\n\n  return (\n    <Fade unmountOnExit in={indicateStates.includes(indicator as IBinary)}>\n      <Mask bg={!ref.current ? \"red.500\" : \"green.500\"}>\n        <Icon\n          boxSize={40}\n          color=\"white\"\n          as={!ref.current ? IncorrectIcon : CorrectIcon}\n        />\n      </Mask>\n    </Fade>\n  );\n};\n\nexport default AnswerIndicator;\n","import {\n  Badge,\n  ButtonProps,\n  chakra,\n  Container,\n  Flex,\n  HStack,\n  Icon,\n  IconButton,\n  Text,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { GrRefresh as ResetIcon } from \"react-icons/gr\";\nimport { percent } from \"utils\";\n\nconst StatBadge = chakra(Badge, {\n  baseStyle: {\n    minW: \"50px\",\n    fontSize: \"xl\",\n    display: \"flex\",\n    borderRadius: \"md\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\ninterface Props {\n  correct: number;\n  attempts: number;\n  onResetGame?: ButtonProps[\"onClick\"];\n}\n\nconst GameControls: FC<Props> = ({ correct, attempts, onResetGame }) => (\n  <Container as={HStack} align=\"stretch\" maxW=\"container.sm\">\n    <Tooltip hasArrow label=\"Reset Game\" placement=\"top\" openDelay={500}>\n      <IconButton\n        variant=\"ghost\"\n        aria-label=\"Reset Game\"\n        onClick={onResetGame}\n        icon={<Icon as={ResetIcon} boxSize=\"20px\" />}\n      />\n    </Tooltip>\n    <HStack align=\"stretch\" spacing={1}>\n      <StatBadge colorScheme=\"green\" borderWidth=\"1px\" borderColor=\"green.200\">\n        {correct}\n      </StatBadge>\n      <StatBadge colorScheme=\"red\" borderWidth=\"1px\" borderColor=\"red.200\">\n        {attempts - correct}\n      </StatBadge>\n      <Flex px={2} alignItems=\"center\">\n        <Text fontWeight=\"bold\">{percent(correct, attempts)}%</Text>\n      </Flex>\n    </HStack>\n  </Container>\n);\n\nexport default GameControls;\n","module.exports = function(strings, ...exps) {\n  const result = [];\n  const {isArray} = Array;\n\n  // Convert quantity expressions to [quantity, quantity string] tuples\n  exps.forEach((v, i) => {\n    if (typeof(v) == 'number') {\n      exps[i] = [v, v];\n    } else if (isArray(v)) {\n      if (typeof(v[0]) == 'number') {\n        exps[i] = [v[0], typeof v[1] == 'function' ? v[1](v[0]) : null];\n      } else {\n        // Edge case where the caller injects an Array but doesn't intend for it\n        // to be treated as a quantity.  Not worth solving at present.\n        throw TypeError('First item in array must be a Number');\n      }\n    }\n  });\n\n  // Initialize the quantity to use for pluralization\n  let qty = exps.find(isArray);\n  let last;\n\n  for (let s of strings) {\n    // Trim leading whitespace hidden quantities\n    if (isArray(last) && last[1] == null) {\n      s = s.replace(/^\\s+/, '');\n    }\n\n    // Push current string, pluralizing if we have a valid quantity\n    if (qty) {\n      result.push(s.replace(/\\[([^|]*)\\|([^\\]]*)\\]/g, qty[0] == 1 ? '$1' : '$2'));\n    } else {\n      result.push(s);\n    }\n\n    if (!exps.length) break;\n\n    // Locate next quantity\n    qty = exps.find(isArray) || qty;\n\n    // Push quantity string\n    last = exps.shift();\n    result.push(last === qty ? qty[1] : last);\n  }\n\n  return result.join('');\n};\n","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","import { Box, Heading } from \"@chakra-ui/react\";\nimport AnswerIndicator from \"components/AnswerIndicator\";\nimport Fretboard from \"components/Fretboard\";\nimport GameControls from \"components/GameControls\";\nimport RotateDevice from \"components/RotateDevice\";\nimport React, { FC, useMemo } from \"react\";\nimport { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport simplur from \"simplur\";\nimport { halfNotesState } from \"state\";\nimport {\n  activeNotesState,\n  gameProxySelector,\n  gameStatsState,\n  targetNoteCountState,\n  targetNoteState\n} from \"state/find-the-note\";\nimport { INote } from \"types\";\nimport { toDisplayNoteName } from \"utils\";\n\nconst FindTheNotePage: FC = () => {\n  const stats = useRecoilValue(gameStatsState);\n  const halfNotes = useRecoilValue(halfNotesState);\n  const targetNote = useRecoilValue(targetNoteState);\n  const updateGame = useSetRecoilState(gameProxySelector);\n  const count = useRecoilValue(targetNoteCountState);\n  const resetGame = useResetRecoilState(gameProxySelector);\n  const activeNotes = useRecoilValue(activeNotesState);\n  const remaining = count - activeNotes.length;\n\n  const noteName = useMemo(\n    () => toDisplayNoteName(targetNote, halfNotes),\n    [targetNote]\n  );\n\n  const handleNoteClick = (note: INote) => updateGame(note);\n\n  return (\n    <>\n      <RotateDevice />\n      <GameControls\n        onResetGame={resetGame}\n        correct={stats.game.correct}\n        attempts={stats.game.attempts}\n      />\n      <Box position=\"relative\">\n        <Fretboard activeNotes={activeNotes} onNoteClick={handleNoteClick} />\n        <AnswerIndicator />\n      </Box>\n      <Heading alignSelf=\"center\">\n        Find <mark>{noteName}</mark> in {simplur`${remaining} plac[e|es]`}\n      </Heading>\n    </>\n  );\n};\n\nexport default FindTheNotePage;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"sourceRoot":""}