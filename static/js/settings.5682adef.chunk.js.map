{"version":3,"sources":["utils/maths.ts","utils/notes.ts","utils/state.ts","state/settings.ts","state/fretboard.ts","state/find-the-note.ts","state/name-the-note.ts","state/statistics.ts","config/index.ts","pages/settings.tsx"],"names":["percent","value","total","round","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","Math","random","localStorageEffect","defaultValue","node","setSelf","onSet","key","ls","newValue","DefaultValue","fretboardIdState","atom","default","effects_UNSTABLE","leftHandedState","fretMarkersState","halfNotesState","fretboardState","selector","get","config","fretboardNotesState","fretboard","leftHanded","flatMap","tuning","i","fretCount","steps","id","simple","name","string","ftnTotalAttemptsState","ftnTotalCorrectState","ftnGameAttemptsState","ftnGameCorrectState","ftnActiveNotesState","ftnSeedState","ftnQueueState","seed","notes","shuffle","ftnPointerState","ftnPointerSelector","set","reset","queue","ftnNoteState","ftnCountState","targetNote","filter","length","ftnGameSelector","count","activeNotes","nextActiveNotes","without","ntnTotalAttemptsState","ntnTotalCorrectState","ntnGameAttemptsState","ntnGameCorrectState","ntnSeedState","ntnQueueState","ntnPointerState","ntnPointerSelector","ntnNoteState","ntnGameSelector","isCorrect","Number","gameStatsState","game","correct","attempts","fretboards","h","fretMarkers","guages","reverse","FretboardSelect","useRecoilState","setValue","onChange","event","target","mt","isExternal","color","alignItems","display","href","ml","as","ExternalLinkIcon","LeftHanded","isChecked","setChecked","checked","FretMarkers","HalfNotes","SettingsPage","Card","spacing"],"mappings":"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","file":"static/js/settings.5682adef.chunk.js","sourcesContent":["import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value !== null) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretMarkersState = atom<boolean>({\n  key: \"fretMarkersState\",\n  default: true,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { filter, without } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ftnTotalAttemptsState = atom<number>({\n  key: \"ftnTotalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ftnTotalCorrectState = atom<number>({\n  key: \"ftnTotalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ftnGameAttemptsState = atom<number>({\n  key: \"ftnGameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ftnGameCorrectState = atom<number>({\n  key: \"ftnGameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ftnActiveNotesState = atom<INote[]>({\n  key: \"ftnActiveNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnSeedState = atom<number>({\n  key: \"ftnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ftnQueueState = selector<string[]>({\n  key: \"ftnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ftnSeedState);\n    const notes = getNoteNames();\n    return shuffle(notes, seed);\n  },\n});\n\nconst ftnPointerState = atom<number>({\n  key: \"ftnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnPointerSelector = selector<number>({\n  key: \"ftnPointerSelector\",\n  get: ({ get }) => get(ftnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ftnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ftnSeedState, get(ftnSeedState) + Math.random());\n      reset(ftnPointerState);\n    } else {\n      set(ftnPointerState, newValue);\n    }\n\n    reset(ftnActiveNotesState);\n  },\n});\n\nexport const ftnNoteState = selector<string>({\n  key: \"ftnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ftnQueueState);\n    const pointer = get(ftnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ftnCountState = selector<number>({\n  key: \"ftnCountState\",\n  get: ({ get }) => {\n    const notes = get(fretboardNotesState);\n    const targetNote = get(ftnNoteState);\n\n    return filter(notes, [\"name\", targetNote]).length;\n  },\n});\n\nexport const ftnGameSelector = selector<INote | null>({\n  key: \"ftnGameSelector\",\n  get: () => null,\n  set: ({ get, set, reset }, newValue) => {\n    // Reset\n    if (newValue instanceof DefaultValue) {\n      // Reset game stats\n      reset(ftnGameCorrectState);\n      reset(ftnGameAttemptsState);\n      // Next note\n      set(ftnPointerSelector, get(ftnPointerSelector) + 1);\n      return;\n    }\n\n    // Incorrect\n    if (newValue === null || newValue.name !== get(ftnNoteState)) {\n      // Next note\n      set(ftnPointerSelector, get(ftnPointerSelector) + 1);\n      // Update attempt stats\n      set(ftnGameAttemptsState, get(ftnGameAttemptsState) + 1);\n      set(ftnTotalAttemptsState, get(ftnTotalAttemptsState) + 1);\n      return;\n    }\n\n    // Correct\n    const count = get(ftnCountState);\n    const activeNotes = get(ftnActiveNotesState);\n    const nextActiveNotes = [...without(activeNotes, newValue), newValue];\n\n    if (nextActiveNotes.length === count) {\n      // Next note\n      set(ftnPointerSelector, get(ftnPointerSelector) + 1);\n      // Update correct stats\n      set(ftnGameCorrectState, get(ftnGameCorrectState) + 1);\n      set(ftnGameAttemptsState, get(ftnGameAttemptsState) + 1);\n      set(ftnTotalCorrectState, get(ftnTotalCorrectState) + 1);\n      set(ftnTotalAttemptsState, get(ftnTotalAttemptsState) + 1);\n      return;\n    }\n\n    set(ftnActiveNotesState, nextActiveNotes);\n  },\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ntnTotalAttemptsState = atom<number>({\n  key: \"ntnTotalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnTotalCorrectState = atom<number>({\n  key: \"ntnTotalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameAttemptsState = atom<number>({\n  key: \"ntnGameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameCorrectState = atom<number>({\n  key: \"ntnGameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnSeedState = atom<number>({\n  key: \"ntnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ntnQueueState = selector<INote[]>({\n  key: \"ntnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ntnSeedState);\n    const notes = get(fretboardNotesState);\n    return shuffle(notes, seed);\n  },\n});\n\nconst ntnPointerState = atom<number>({\n  key: \"ntnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnPointerSelector = selector<number>({\n  key: \"ntnPointerSelector\",\n  get: ({ get }) => get(ntnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ntnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ntnSeedState, get(ntnSeedState) + Math.random());\n      reset(ntnPointerState);\n    } else {\n      set(ntnPointerState, newValue);\n    }\n  },\n});\n\nexport const ntnNoteState = selector<INote>({\n  key: \"ntnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ntnQueueState);\n    const pointer = get(ntnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ntnGameSelector = selector<INote>({\n  key: \"ntnGameSelector\",\n  get: ({ get }) => get(ntnNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset game\n      reset(ntnPointerSelector);\n      reset(ntnGameCorrectState);\n      reset(ntnGameAttemptsState);\n      return;\n    }\n\n    const note = get(ntnNoteState);\n    const isCorrect = newValue.name === note.name;\n\n    // Update game stats\n    set(ntnGameAttemptsState, get(ntnGameAttemptsState) + 1);\n    set(ntnGameCorrectState, get(ntnGameCorrectState) + Number(isCorrect));\n    set(ntnTotalAttemptsState, get(ntnTotalAttemptsState) + 1);\n    set(ntnTotalCorrectState, get(ntnTotalCorrectState) + Number(isCorrect));\n\n    if (isCorrect) {\n      // Next note\n      set(ntnPointerSelector, get(ntnPointerSelector) + 1);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { percent } from \"utils\";\nimport {\n  ftnGameSelector,\n  ftnTotalAttemptsState,\n  ftnTotalCorrectState,\n} from \"./find-the-note\";\nimport {\n  ntnGameSelector,\n  ntnTotalAttemptsState,\n  ntnTotalCorrectState,\n} from \"./name-the-note\";\n\ninterface GameStats {\n  game: string;\n  percent: number;\n  correct: number;\n  attempts: number;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => [\n    {\n      game: \"Name the Note\",\n      correct: get(ntnTotalCorrectState),\n      attempts: get(ntnTotalAttemptsState),\n      percent: percent(get(ntnTotalCorrectState), get(ntnTotalAttemptsState)),\n    },\n    {\n      game: \"Find the Note\",\n      correct: get(ftnTotalCorrectState),\n      attempts: get(ftnTotalAttemptsState),\n      percent: percent(get(ftnTotalCorrectState), get(ftnTotalAttemptsState)),\n    },\n  ],\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameSelector);\n      reset(ntnTotalCorrectState);\n      reset(ntnTotalAttemptsState);\n      reset(ftnGameSelector);\n      reset(ftnTotalCorrectState);\n      reset(ftnTotalAttemptsState);\n    }\n  },\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    h: 220,\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    h: 220,\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    h: 220,\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    h: 254,\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    h: 200,\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n","import {\n  Container,\n  FormControl,\n  FormLabel,\n  HStack,\n  Icon,\n  Link,\n  Radio,\n  RadioGroup,\n  Select,\n  Switch,\n  VStack,\n} from \"@chakra-ui/react\";\nimport Card from \"components/Card\";\nimport * as config from \"config\";\nimport { map } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { HiOutlineExternalLink as ExternalLinkIcon } from \"react-icons/hi\";\nimport { useRecoilState } from \"recoil\";\nimport {\n  fretboardIdState,\n  fretMarkersState,\n  halfNotesState,\n  leftHandedState,\n} from \"state\";\nimport { IFretboardId, IHalfNotes } from \"types\";\n\nconst FretboardSelect = () => {\n  const [value, setValue] = useRecoilState(fretboardIdState);\n\n  return (\n    <FormControl>\n      <FormLabel>Fretboard</FormLabel>\n      <Select\n        value={value}\n        onChange={(event) => setValue(event.target.value as IFretboardId)}\n      >\n        {map(config.fretboards, (fretboard) => (\n          <option key={fretboard.id} value={fretboard.id}>\n            {fretboard.name}\n          </option>\n        ))}\n      </Select>\n      <Link\n        mt={1}\n        isExternal\n        color=\"teal.500\"\n        alignItems=\"center\"\n        display=\"inline-flex\"\n        href=\"https://github.com/stuart-williams/note-trainer/issues/new?assignees=&labels=&template=fretboard-request.md&title=Fretboard%20Request\"\n      >\n        Request a fretboard\n        <Icon ml={1} as={ExternalLinkIcon} />\n      </Link>\n    </FormControl>\n  );\n};\n\nconst LeftHanded = () => {\n  const [isChecked, setChecked] = useRecoilState(leftHandedState);\n\n  return (\n    <FormControl>\n      <FormLabel>Left Handed</FormLabel>\n      <Switch\n        isChecked={isChecked}\n        onChange={(event) => setChecked(event.target.checked)}\n      />\n    </FormControl>\n  );\n};\n\nconst FretMarkers = () => {\n  const [isChecked, setChecked] = useRecoilState(fretMarkersState);\n\n  return (\n    <FormControl>\n      <FormLabel>Fret Markers</FormLabel>\n      <Switch\n        isChecked={isChecked}\n        onChange={(event) => setChecked(event.target.checked)}\n      />\n    </FormControl>\n  );\n};\n\nconst HalfNotes = () => {\n  const [value, setValue] = useRecoilState(halfNotesState);\n\n  return (\n    <FormControl>\n      <FormLabel>Half Notes</FormLabel>\n      <RadioGroup\n        value={value}\n        onChange={(value) => setValue(value as IHalfNotes)}\n      >\n        <HStack>\n          <Radio value=\"random\">Random</Radio>\n          <Radio value=\"sharps\">Sharps</Radio>\n          <Radio value=\"flats\">Flats</Radio>\n        </HStack>\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nexport const SettingsPage: FC = () => (\n  <Container>\n    <VStack as={Card} spacing={6}>\n      <FretboardSelect />\n      <LeftHanded />\n      <FretMarkers />\n      <HalfNotes />\n    </VStack>\n  </Container>\n);\n\nexport default SettingsPage;\n"],"sourceRoot":""}