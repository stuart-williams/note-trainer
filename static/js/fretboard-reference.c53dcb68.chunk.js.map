{"version":3,"sources":["utils/index.tsx","state/settings.ts","state/fretboard.ts","state/find-the-note.ts","state/name-the-note.ts","state/statistics.ts","config/index.ts","../../../src/grid.tsx","components/Fretboard/Frets.tsx","images/wood.png","components/Fretboard/Notes.tsx","components/Fretboard/Strings.tsx","components/Fretboard/Fretboard.tsx","../../../src/box.tsx","../../../src/simple-grid.tsx","pages/fretboard-reference.tsx"],"names":["localStorageEffect","defaultValue","node","setSelf","onSet","key","value","ls","newValue","DefaultValue","getNoteNames","times","map","sharps","Note","simplify","repeat","percent","total","round","fretboardIdState","atom","default","effects_UNSTABLE","leftHandedState","fretboardState","selector","get","config","fretboardNotesState","fretboard","leftHanded","flatMap","tuning","note","i","fretCount","steps","id","simple","name","enharmonic","string","ftnFrettedNotesState","ftnSeedState","Math","random","ftnQueueState","seed","notes","shuffle","ftnPointerState","ftnPointerSelector","set","reset","queue","ftnNoteState","ftnCountState","targetNote","filter","length","ftnGameSelector","ntnTotalAttemptsState","ntnTotalCorrectState","ntnGameAttemptsState","ntnGameCorrectState","ntnSeedState","ntnQueueState","ntnPointerState","ntnPointerSelector","ntnNoteState","ntnGameSelector","isCorrect","Number","gameStatsState","game","correct","attempts","fretboards","fretMarkers","guages","reverse","Grid","forwardRef","templateColumns","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","ref","__css","FretsGrid","chakra","baseStyle","top","left","right","bottom","position","pointerEvents","Fret","alignItems","flexDirection","justifyContent","_before","w","background","Nut","Box","content","FretMarker","Circle","h","bg","Frets","useRecoilValue","columns","fretNum","numDots","hasMarker","includes","undefined","sx","templateRows","NotesGrid","SimpleGrid","color","borderRadius","transform","Notes","frettedNotes","referenceMode","onNoteClick","identity","isFretted","Boolean","find","data-note","onClick","StringsGrid","String","Flex","boxShadow","Strings","_","Board","woodSrc","Fretboard","Square","centerContent","boxSize","flexShrink","flexGrow","size","count","width","minChildWidth","mapResponsive","isNull","n","isNumber","gap","columnGap","rowGap","FretboardReference","align","px"],"mappings":"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","file":"static/js/fretboard-reference.c53dcb68.chunk.js","sourcesContent":["import { Note } from \"@tonaljs/tonal\";\nimport * as ls from \"local-storage\";\nimport { repeat, round, times } from \"lodash\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T,>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { atom } from \"recoil\";\nimport { IFretboardId } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ftnFrettedNotesState = atom<INote[]>({\n  key: \"ftnFrettedNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnSeedState = atom<number>({\n  key: \"ftnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ftnQueueState = selector<string[]>({\n  key: \"ftnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ftnSeedState);\n    const notes = getNoteNames();\n    return shuffle(notes, seed);\n  },\n});\n\nconst ftnPointerState = atom<number>({\n  key: \"ftnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnPointerSelector = selector<number>({\n  key: \"ftnPointerSelector\",\n  get: ({ get }) => get(ftnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ftnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ftnSeedState, get(ftnSeedState) + Math.random());\n      reset(ftnPointerState);\n    } else {\n      set(ftnPointerState, newValue);\n    }\n\n    reset(ftnFrettedNotesState);\n  },\n});\n\nexport const ftnNoteState = selector<string>({\n  key: \"ftnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ftnQueueState);\n    const pointer = get(ftnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ftnCountState = selector<number>({\n  key: \"ftnCountState\",\n  get: ({ get }) => {\n    const notes = get(fretboardNotesState);\n    const targetNote = get(ftnNoteState);\n\n    return filter(notes, [\"name\", targetNote]).length;\n  },\n});\n\nexport const ftnGameSelector = selector<INote[]>({\n  key: \"ftnGameSelector\",\n  get: ({ get }) => get(ftnFrettedNotesState),\n  set: ({ get, set }, newValue) => {\n    if (\n      newValue instanceof DefaultValue ||\n      newValue.length === get(ftnCountState)\n    ) {\n      // All notes found so move onto the next\n      set(ftnPointerSelector, get(ftnPointerSelector) + 1);\n    } else {\n      set(ftnFrettedNotesState, newValue);\n    }\n  },\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ntnTotalAttemptsState = atom<number>({\n  key: \"ntnTotalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnTotalCorrectState = atom<number>({\n  key: \"ntnTotalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameAttemptsState = atom<number>({\n  key: \"ntnGameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameCorrectState = atom<number>({\n  key: \"ntnGameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnSeedState = atom<number>({\n  key: \"ntnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ntnQueueState = selector<INote[]>({\n  key: \"ntnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ntnSeedState);\n    const notes = get(fretboardNotesState);\n    return shuffle(notes, seed);\n  },\n});\n\nconst ntnPointerState = atom<number>({\n  key: \"ntnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnPointerSelector = selector<number>({\n  key: \"ntnPointerSelector\",\n  get: ({ get }) => get(ntnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ntnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ntnSeedState, get(ntnSeedState) + Math.random());\n      reset(ntnPointerState);\n    } else {\n      set(ntnPointerState, newValue);\n    }\n  },\n});\n\nexport const ntnNoteState = selector<INote>({\n  key: \"ntnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ntnQueueState);\n    const pointer = get(ntnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ntnGameSelector = selector<INote>({\n  key: \"ntnGameSelector\",\n  get: ({ get }) => get(ntnNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset game\n      reset(ntnPointerSelector);\n      reset(ntnGameCorrectState);\n      reset(ntnGameAttemptsState);\n      return;\n    }\n\n    const note = get(ntnNoteState);\n    const isCorrect = newValue.name === note.name;\n\n    // Update game stats\n    set(ntnGameAttemptsState, get(ntnGameAttemptsState) + 1);\n    set(ntnGameCorrectState, get(ntnGameCorrectState) + Number(isCorrect));\n    set(ntnTotalAttemptsState, get(ntnTotalAttemptsState) + 1);\n    set(ntnTotalCorrectState, get(ntnTotalCorrectState) + Number(isCorrect));\n\n    if (isCorrect) {\n      // Next note\n      set(ntnPointerSelector, get(ntnPointerSelector) + 1);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { percent } from \"utils\";\nimport {\n  ntnGameSelector,\n  ntnTotalAttemptsState,\n  ntnTotalCorrectState,\n} from \"./name-the-note\";\n\ninterface GameStats {\n  game: string;\n  percent: number;\n  correct: number;\n  attempts: number;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => [\n    {\n      game: \"Name the Note\",\n      correct: get(ntnTotalCorrectState),\n      attempts: get(ntnTotalAttemptsState),\n      percent: percent(get(ntnTotalCorrectState), get(ntnTotalAttemptsState)),\n    },\n  ],\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameSelector);\n      reset(ntnTotalCorrectState);\n      reset(ntnTotalAttemptsState);\n    }\n  },\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"open-e-6\": {\n    fretCount: 12,\n    id: \"open-e-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"standard-4\": {\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n};\n","import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n","import { Box, chakra, Circle, Grid } from \"@chakra-ui/react\";\nimport { times } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState, leftHandedState } from \"state\";\n\nconst FretsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst Fret = chakra(Grid, {\n  baseStyle: {\n    position: \"relative\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    _before: {\n      w: \"8px\",\n      top: 0,\n      bottom: 0,\n      position: \"absolute\",\n      background: \"linear-gradient(to right, gold, gray, gold)\",\n    },\n  },\n});\n\nconst Nut = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: 0,\n      bottom: 0,\n      w: \"16px\",\n      content: `\"\"`,\n      position: \"absolute\",\n      background: \"gray.200\",\n    },\n  },\n});\n\nconst FretMarker = chakra(Circle, {\n  baseStyle: {\n    h: 6,\n    w: 6,\n    bg: \"gray.200\",\n  },\n});\n\nconst Frets: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n  const leftHanded = useRecoilValue(leftHandedState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <FretsGrid templateColumns={`repeat(${columns}, 1fr)`}>\n      {times(columns).map((i) => {\n        const fretNum = leftHanded ? fretboard.fretCount - i : i;\n        const numDots = fretNum % 12 === 0 ? 2 : 1;\n        const hasMarker = fretboard.fretMarkers.includes(fretNum);\n\n        const styles = {\n          \":before\": {\n            [leftHanded ? \"left\" : \"right\"]: \"-4px\",\n            content: fretNum === fretboard.fretCount ? undefined : `\"\"`,\n          },\n        };\n\n        return !fretNum ? (\n          <Nut key={fretNum} sx={styles} />\n        ) : (\n          <Fret\n            sx={styles}\n            key={fretNum}\n            templateRows={`repeat(${numDots}, 1fr)`}\n          >\n            {hasMarker && times(numDots).map((i) => <FretMarker key={i} />)}\n          </Fret>\n        );\n      })}\n    </FretsGrid>\n  );\n};\n\nexport default Frets;\n","export default __webpack_public_path__ + \"static/media/wood.3cf6e95a.png\";","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\nimport { find, identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, fretboardState } from \"state\";\nimport { INote } from \"types\";\n\nconst NotesGrid = chakra(SimpleGrid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n  },\n});\n\nconst Note = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      h: \"34px\",\n      w: \"34px\",\n      top: \"50%\",\n      left: \"50%\",\n      content: `\"\"`,\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      position: \"absolute\",\n      justifyContent: \"center\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  },\n});\n\ninterface Props {\n  frettedNotes: INote[];\n  referenceMode?: boolean;\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Notes: FC<Props> = ({\n  frettedNotes,\n  referenceMode,\n  onNoteClick = identity,\n}) => {\n  const fretboard = useRecoilValue(fretboardState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <NotesGrid columns={columns}>\n      {notes.map((note, i) => {\n        const { id, name, string } = note;\n        const isFretted = Boolean(find(frettedNotes, { id, string }));\n\n        return (\n          <Note\n            key={i}\n            data-note={name}\n            onClick={() => onNoteClick(note)}\n            sx={\n              isFretted\n                ? {\n                    \":before\": {\n                      bg: \"red.500\",\n                      content: referenceMode ? `\"${note.name}\"` : undefined,\n                    },\n                  }\n                : undefined\n            }\n          />\n        );\n      })}\n    </NotesGrid>\n  );\n};\n\nexport default Notes;\n","import { chakra, Flex, Grid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\n\nconst StringsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst String = chakra(Flex, {\n  baseStyle: {\n    alignItems: \"center\",\n    _before: {\n      w: \"100%\",\n      content: `\"\"`,\n      boxShadow: \"md\",\n      background: \"linear-gradient(to bottom, gray, white, gray)\",\n    },\n  },\n});\n\nconst Strings: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <StringsGrid templateRows={`repeat(${fretboard.tuning.length}, 1fr)`}>\n      {fretboard.tuning.map((_, i) => (\n        <String\n          key={i}\n          sx={{\n            \":before\": {\n              h: (fretboard.guages[i] || 1) + \"px\",\n            },\n          }}\n        />\n      ))}\n    </StringsGrid>\n  );\n};\n\nexport default Strings;\n","import { Box, chakra } from \"@chakra-ui/react\";\nimport Frets from \"components/Fretboard/Frets\";\nimport woodSrc from \"images/wood.png\";\nimport React, { FC } from \"react\";\nimport { INote } from \"types\";\nimport Notes from \"./Notes\";\nimport Strings from \"./Strings\";\n\nconst Board = chakra(Box, {\n  baseStyle: {\n    h: 220,\n    position: \"relative\",\n    bg: `#222222 url(${woodSrc})`,\n  },\n});\n\ninterface Props {\n  frettedNotes: INote[];\n  referenceMode?: boolean;\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Fretboard: FC<Props> = ({ frettedNotes, referenceMode, onNoteClick }) => (\n  <Board>\n    <Frets />\n    <Strings />\n    <Notes\n      onNoteClick={onNoteClick}\n      frettedNotes={frettedNotes}\n      referenceMode={referenceMode}\n    />\n  </Board>\n);\n\nexport default Fretboard;\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nif (__DEV__) {\n  Box.displayName = \"Box\"\n}\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  Square.displayName = \"Square\"\n}\n\nexport const Circle = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n","import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { VStack } from \"@chakra-ui/react\";\nimport Fretboard from \"components/Fretboard\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState } from \"state\";\n\nconst FretboardReference: FC = () => {\n  const notes = useRecoilValue(fretboardNotesState);\n\n  return (\n    <VStack align=\"stretch\" px={2}>\n      <Fretboard frettedNotes={notes} referenceMode />\n    </VStack>\n  );\n};\n\nexport default FretboardReference;\n"],"sourceRoot":""}