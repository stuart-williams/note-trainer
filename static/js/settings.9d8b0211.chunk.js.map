{"version":3,"sources":["utils/index.tsx","state/settings.ts","state/fretboard.ts","state/find-the-note.ts","state/name-the-note.ts","state/statistics.ts","config/index.ts","pages/settings.tsx"],"names":["localStorageEffect","defaultValue","node","setSelf","onSet","key","value","ls","newValue","DefaultValue","getNoteNames","times","map","sharps","Note","simplify","repeat","percent","total","round","fretboardIdState","atom","default","effects_UNSTABLE","leftHandedState","fretboardState","selector","get","config","fretboardNotesState","fretboard","leftHanded","flatMap","tuning","note","i","fretCount","steps","id","simple","name","enharmonic","string","ftnFrettedNotesState","ftnSeedState","Math","random","ftnQueueState","seed","notes","shuffle","ftnPointerState","ftnPointerSelector","set","reset","queue","ftnNoteState","ftnCountState","targetNote","filter","length","ftnGameSelector","ntnTotalAttemptsState","ntnTotalCorrectState","ntnGameAttemptsState","ntnGameCorrectState","ntnSeedState","ntnQueueState","ntnPointerState","ntnPointerSelector","ntnNoteState","ntnGameSelector","isCorrect","Number","gameStatsState","game","correct","attempts","fretboards","fretMarkers","guages","reverse","FretboardSelect","useRecoilState","fretboardId","setFretboardId","onChange","event","target","LeftHandedMode","setLeftHanded","display","alignItems","htmlFor","mb","isChecked","checked","SettingsPage","spacing"],"mappings":"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","file":"static/js/settings.9d8b0211.chunk.js","sourcesContent":["import { Note } from \"@tonaljs/tonal\";\nimport * as ls from \"local-storage\";\nimport { repeat, round, times } from \"lodash\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T,>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { atom } from \"recoil\";\nimport { IFretboardId } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ftnFrettedNotesState = atom<INote[]>({\n  key: \"ftnFrettedNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnSeedState = atom<number>({\n  key: \"ftnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ftnQueueState = selector<string[]>({\n  key: \"ftnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ftnSeedState);\n    const notes = getNoteNames();\n    return shuffle(notes, seed);\n  },\n});\n\nconst ftnPointerState = atom<number>({\n  key: \"ftnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnPointerSelector = selector<number>({\n  key: \"ftnPointerSelector\",\n  get: ({ get }) => get(ftnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ftnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ftnSeedState, get(ftnSeedState) + Math.random());\n      reset(ftnPointerState);\n    } else {\n      set(ftnPointerState, newValue);\n    }\n\n    reset(ftnFrettedNotesState);\n  },\n});\n\nexport const ftnNoteState = selector<string>({\n  key: \"ftnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ftnQueueState);\n    const pointer = get(ftnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ftnCountState = selector<number>({\n  key: \"ftnCountState\",\n  get: ({ get }) => {\n    const notes = get(fretboardNotesState);\n    const targetNote = get(ftnNoteState);\n\n    return filter(notes, [\"name\", targetNote]).length;\n  },\n});\n\nexport const ftnGameSelector = selector<INote[]>({\n  key: \"ftnGameSelector\",\n  get: ({ get }) => get(ftnFrettedNotesState),\n  set: ({ get, set }, newValue) => {\n    if (\n      newValue instanceof DefaultValue ||\n      newValue.length === get(ftnCountState)\n    ) {\n      // All notes found so move onto the next\n      set(ftnPointerSelector, get(ftnPointerSelector) + 1);\n    } else {\n      set(ftnFrettedNotesState, newValue);\n    }\n  },\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ntnTotalAttemptsState = atom<number>({\n  key: \"ntnTotalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnTotalCorrectState = atom<number>({\n  key: \"ntnTotalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameAttemptsState = atom<number>({\n  key: \"ntnGameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameCorrectState = atom<number>({\n  key: \"ntnGameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnSeedState = atom<number>({\n  key: \"ntnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ntnQueueState = selector<INote[]>({\n  key: \"ntnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ntnSeedState);\n    const notes = get(fretboardNotesState);\n    return shuffle(notes, seed);\n  },\n});\n\nconst ntnPointerState = atom<number>({\n  key: \"ntnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnPointerSelector = selector<number>({\n  key: \"ntnPointerSelector\",\n  get: ({ get }) => get(ntnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ntnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ntnSeedState, get(ntnSeedState) + Math.random());\n      reset(ntnPointerState);\n    } else {\n      set(ntnPointerState, newValue);\n    }\n  },\n});\n\nexport const ntnNoteState = selector<INote>({\n  key: \"ntnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ntnQueueState);\n    const pointer = get(ntnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ntnGameSelector = selector<INote>({\n  key: \"ntnGameSelector\",\n  get: ({ get }) => get(ntnNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset game\n      reset(ntnPointerSelector);\n      reset(ntnGameCorrectState);\n      reset(ntnGameAttemptsState);\n      return;\n    }\n\n    const note = get(ntnNoteState);\n    const isCorrect = newValue.name === note.name;\n\n    // Update game stats\n    set(ntnGameAttemptsState, get(ntnGameAttemptsState) + 1);\n    set(ntnGameCorrectState, get(ntnGameCorrectState) + Number(isCorrect));\n    set(ntnTotalAttemptsState, get(ntnTotalAttemptsState) + 1);\n    set(ntnTotalCorrectState, get(ntnTotalCorrectState) + Number(isCorrect));\n\n    if (isCorrect) {\n      // Next note\n      set(ntnPointerSelector, get(ntnPointerSelector) + 1);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { percent } from \"utils\";\nimport {\n  ntnGameSelector,\n  ntnTotalAttemptsState,\n  ntnTotalCorrectState,\n} from \"./name-the-note\";\n\ninterface GameStats {\n  game: string;\n  percent: number;\n  correct: number;\n  attempts: number;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => [\n    {\n      game: \"Name the Note\",\n      correct: get(ntnTotalCorrectState),\n      attempts: get(ntnTotalAttemptsState),\n      percent: percent(get(ntnTotalCorrectState), get(ntnTotalAttemptsState)),\n    },\n  ],\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameSelector);\n      reset(ntnTotalCorrectState);\n      reset(ntnTotalAttemptsState);\n    }\n  },\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"open-e-6\": {\n    fretCount: 12,\n    id: \"open-e-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"standard-4\": {\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n};\n","import {\n  Container,\n  FormControl,\n  FormLabel,\n  Select,\n  SelectProps,\n  Switch,\n  VStack,\n} from \"@chakra-ui/react\";\nimport * as config from \"config\";\nimport { map } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { fretboardIdState, leftHandedState } from \"state\";\nimport { IFretboardId } from \"types\";\n\nconst FretboardSelect = () => {\n  const [fretboardId, setFretboardId] = useRecoilState(fretboardIdState);\n\n  const handleChange: SelectProps[\"onChange\"] = (event) => {\n    setFretboardId(event.target.value as IFretboardId);\n  };\n\n  return (\n    <FormControl>\n      <FormLabel>Fretboard</FormLabel>\n      <Select value={fretboardId} onChange={handleChange}>\n        {map(config.fretboards, (fretboard) => (\n          <option key={fretboard.id} value={fretboard.id}>\n            {fretboard.name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nconst LeftHandedMode = () => {\n  const [leftHanded, setLeftHanded] = useRecoilState(leftHandedState);\n\n  return (\n    <FormControl display=\"flex\" alignItems=\"center\">\n      <FormLabel htmlFor=\"left-handed\" mb=\"0\">\n        Left Handed Mode\n      </FormLabel>\n      <Switch\n        id=\"left-handed\"\n        isChecked={leftHanded}\n        onChange={(event) => setLeftHanded(event.target.checked)}\n      />\n    </FormControl>\n  );\n};\n\nexport const SettingsPage: FC = () => (\n  <Container>\n    <VStack spacing={6}>\n      <FretboardSelect />\n      <LeftHandedMode />\n    </VStack>\n  </Container>\n);\n\nexport default SettingsPage;\n"],"sourceRoot":""}