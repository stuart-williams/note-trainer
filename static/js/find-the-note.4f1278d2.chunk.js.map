{"version":3,"sources":["utils/maths.ts","utils/notes.ts","utils/state.ts","state/settings.ts","state/fretboard.ts","state/find-the-note.ts","state/name-the-note.ts","state/statistics.ts","config/index.ts","components/RotateDevice.tsx","components/Fretboard/Frets.tsx","images/wood.png","components/Fretboard/Notes.tsx","components/Fretboard/Strings.tsx","components/Fretboard/Fretboard.tsx","../node_modules/simplur/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","pages/find-the-note.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"names":["percent","value","total","round","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","Math","random","localStorageEffect","defaultValue","node","setSelf","onSet","key","ls","newValue","DefaultValue","fretboardIdState","atom","default","effects_UNSTABLE","leftHandedState","halfNotesState","fretboardState","selector","get","config","fretboardNotesState","fretboard","leftHanded","flatMap","tuning","i","fretCount","steps","id","simple","name","string","ftnFrettedNotesState","ftnSeedState","ftnQueueState","seed","notes","shuffle","ftnPointerState","ftnPointerSelector","set","reset","queue","ftnNoteState","ftnCountState","targetNote","filter","length","ftnGameSelector","ntnTotalAttemptsState","ntnTotalCorrectState","ntnGameAttemptsState","ntnGameCorrectState","ntnSeedState","ntnQueueState","ntnPointerState","ntnPointerSelector","ntnNoteState","ntnGameSelector","isCorrect","Number","gameStatsState","game","correct","attempts","fretboards","fretMarkers","guages","reverse","RotateDevice","isPortrait","useOrientation","type","includes","useState","isOpen","setOpen","cancelRef","useRef","useEffect","isCentered","onClose","leastDestructiveRef","mx","fontSize","fontWeight","textAlign","as","VStack","pb","FcRotateToLandscape","boxSize","FretsGrid","chakra","Grid","baseStyle","top","left","right","bottom","position","pointerEvents","Fret","alignItems","flexDirection","justifyContent","_before","w","background","Nut","Box","content","FretMarker","Circle","h","bg","Frets","useRecoilValue","columns","templateColumns","fretNum","numDots","hasMarker","styles","undefined","sx","templateRows","NotesGrid","SimpleGrid","color","display","borderRadius","transform","Notes","activeNotes","onNoteClick","identity","activeNote","find","displayName","onClick","StringsGrid","String","Flex","boxShadow","Strings","_","Board","woodSrc","Fretboard","module","exports","strings","exps","result","isArray","Array","forEach","v","TypeError","last","qty","s","replace","push","shift","join","unsupportedIterableToArray","o","allowArrayLike","it","Symbol","iterator","F","n","done","e","_e","f","err","normalCompletion","didErr","step","next","_e2","arrayLikeToArray","minLen","Object","prototype","toString","call","slice","constructor","from","test","arr","len","arr2","FindTheNotePage","raw","useRecoilState","updateGame","remaining","useMemo","without","alignSelf","simplur","freeze","defineProperties"],"mappings":"2SAEaA,EAAU,SAACC,EAAeC,GAAhB,OACrBA,EAAQ,EAAIC,gBAAOF,EAAQC,EAAS,KAAO,G,SCChCE,EAAe,kBAC1BC,gBAAM,IAAIC,KAAI,SAACC,GAAD,OAAYC,IAAKC,SAAS,IAAMC,iBAAO,IAAKH,QAE/CI,EAAiB,SAACC,GAAD,OAC5BC,IAAKF,eAAeC,EAAY,CAAEL,QAAQ,EAAMO,YAAY,KAKjDC,EAAoB,SAC/BC,GAEY,IADZC,EACW,uDADa,SAElBC,EAAWC,mBAASH,GAAQL,EAAeK,GAAQA,EAEzD,OAAIR,IAAKY,WAAWF,KAAcA,GAA0B,WAAdD,EACrCC,EAGS,UAAdD,GAIGI,KAAKC,SAAW,GAHdd,IAAKY,WAAWF,GAGgCA,G,iBCxB9CK,EACX,SAAIC,GAAJ,OACA,YAA+B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACVC,EAAG,sBAAkBH,EAAKG,KAC1B3B,EAAQ4B,MAAUD,GAEpB3B,EACFyB,EAAQzB,GACCuB,IACTK,MAAUD,EAAKJ,GACfE,EAAQF,IAGVG,GAAM,SAACG,GACDA,aAAoBC,IACtBF,SAAUD,GAEVC,MAAUD,EAAKE,S,kfChBVE,EAAmBC,YAAmB,CACjDL,IAAK,mBACLM,QAAS,aACTC,iBAAkB,CAACZ,iBAGRa,EAAkBH,YAAc,CAC3CL,IAAK,kBACLM,SAAS,EACTC,iBAAkB,CAACZ,iBAGRc,EAAiBJ,YAAiB,CAC7CL,IAAK,iBACLM,QAAS,SACTC,iBAAkB,CAACZ,iBCZRe,EAAiBC,YAAqB,CACjDX,IAAK,iBACLY,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAaC,IAAkBD,EAAIR,OAG7BU,EAAsBH,YAAkB,CACnDX,IAAK,sBACLY,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAG,EAAYH,EAAIF,GAChBM,EAAaJ,EAAIJ,GAEvB,OAAOS,kBAAQF,EAAUG,QAAQ,SAAC9B,EAAM+B,GAAP,OAC/B1C,gBAAMsC,EAAUK,UAAY,GAAG1C,KAAI,SAAC2C,GAClC,IAAMC,EAAKlC,EAAON,iBAAOkC,EAAa,IAAM,IAAKK,GAC3CE,EAAS3C,IAAKC,SAASyC,GAG7B,MAAO,CACLA,KACAE,KAJWR,EAAapC,IAAKY,WAAW+B,GAAUA,EAKlDE,OAAQN,EAAI,YCpBTO,EAAuBrB,YAAc,CAChDL,IAAK,uBACLM,QAAS,GACTC,iBAAkB,CAACZ,iBAGfgC,EAAetB,YAAa,CAChCL,IAAK,eACLM,QAAS,EACTC,iBAAkB,CAACZ,YAAmBF,KAAKC,aAGvCkC,EAAgBjB,YAAmB,CACvCX,IAAK,gBACLY,IAAK,YAAc,IACXiB,GAAOjB,EADG,EAAVA,KACWe,GACXG,EAAQtD,cACd,OAAOuD,kBAAQD,EAAOD,MAIpBG,EAAkB3B,YAAa,CACnCL,IAAK,kBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGfsC,EAAqBtB,YAAiB,CAC1CX,IAAK,qBACLY,IAAK,mBAAaA,EAAb,EAAGA,KAAcoB,IACtBE,IAAK,WAAsBhC,GAAc,IAAjCU,EAAgC,EAAhCA,IAAKsB,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACVC,EAAQxB,EAAIgB,GAEd1B,aAAoBC,MAAiBiC,EAAMlC,IAC7CgC,EAAIP,EAAcf,EAAIe,GAAgBlC,KAAKC,UAC3CyC,EAAMH,IAENE,EAAIF,EAAiB9B,GAGvBiC,EAAMT,MAIGW,EAAe1B,YAAiB,CAC3CX,IAAK,eACLY,IAAK,YAAc,IAAXA,EAAU,EAAVA,IAGN,OAFcA,EAAIgB,GACFhB,EAAIqB,OAKXK,EAAgB3B,YAAiB,CAC5CX,IAAK,gBACLY,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAkB,EAAQlB,EAAIE,GACZyB,EAAa3B,EAAIyB,GAEvB,OAAOG,iBAAOV,EAAO,CAAC,OAAQS,IAAaE,UAIlCC,EAAkB/B,YAAkB,CAC/CX,IAAK,kBACLY,IAAK,mBAAaA,EAAb,EAAGA,KAAcc,IACtBQ,IAAK,WAAehC,GAAc,IAA1BU,EAAyB,EAAzBA,IAAKsB,EAAoB,EAApBA,IAEThC,aAAoBC,KACpBD,EAASuC,SAAW7B,EAAI0B,GAGxBJ,EAAID,EAAoBrB,EAAIqB,GAAsB,GAElDC,EAAIR,EAAsBxB,MC3EnByC,EAAwBtC,YAAa,CAChDL,IAAK,wBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGRiD,EAAuBvC,YAAa,CAC/CL,IAAK,uBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGRkD,EAAuBxC,YAAa,CAC/CL,IAAK,uBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGRmD,EAAsBzC,YAAa,CAC9CL,IAAK,sBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGfoD,EAAe1C,YAAa,CAChCL,IAAK,eACLM,QAAS,EACTC,iBAAkB,CAACZ,YAAmBF,KAAKC,aAGvCsD,EAAgBrC,YAAkB,CACtCX,IAAK,gBACLY,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAiB,EAAOjB,EAAImC,GACXjB,EAAQlB,EAAIE,GAClB,OAAOiB,kBAAQD,EAAOD,MAIpBoB,EAAkB5C,YAAa,CACnCL,IAAK,kBACLM,QAAS,EACTC,iBAAkB,CAACZ,iBAGfuD,EAAqBvC,YAAiB,CAC1CX,IAAK,qBACLY,IAAK,mBAAaA,EAAb,EAAGA,KAAcqC,IACtBf,IAAK,WAAsBhC,GAAc,IAAjCU,EAAgC,EAAhCA,IAAKsB,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACVC,EAAQxB,EAAIoC,GAEd9C,aAAoBC,MAAiBiC,EAAMlC,IAC7CgC,EAAIa,EAAcnC,EAAImC,GAAgBtD,KAAKC,UAC3CyC,EAAMc,IAENf,EAAIe,EAAiB/C,MAKdiD,EAAexC,YAAgB,CAC1CX,IAAK,eACLY,IAAK,YAAc,IAAXA,EAAU,EAAVA,IAGN,OAFcA,EAAIoC,GACFpC,EAAIsC,OAKXE,EAAkBzC,YAAgB,CAC7CX,IAAK,kBACLY,IAAK,mBAAaA,EAAb,EAAGA,KAAcuC,IACtBjB,IAAK,WAAsBhC,GAAc,IAAjCU,EAAgC,EAAhCA,IAAKsB,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAChB,GAAIjC,aAAoBC,IAKtB,OAHAgC,EAAMe,GACNf,EAAMW,QACNX,EAAMU,GAIR,IAAMzD,EAAOwB,EAAIuC,GACXE,EAAYnD,EAASsB,OAASpC,EAAKoC,KAGzCU,EAAIW,EAAsBjC,EAAIiC,GAAwB,GACtDX,EAAIY,EAAqBlC,EAAIkC,GAAuBQ,OAAOD,IAC3DnB,EAAIS,EAAuB/B,EAAI+B,GAAyB,GACxDT,EAAIU,EAAsBhC,EAAIgC,GAAwBU,OAAOD,IAEzDA,GAEFnB,EAAIgB,EAAoBtC,EAAIsC,GAAsB,MCnF3CK,EAAiB5C,YAAsB,CAClDX,IAAK,iBACLY,IAAK,gBAAGA,EAAH,EAAGA,IAAH,MAAa,CAChB,CACE4C,KAAM,gBACNC,QAAS7C,EAAIgC,GACbc,SAAU9C,EAAI+B,GACdvE,QAASA,YAAQwC,EAAIgC,GAAuBhC,EAAI+B,OAGpDT,IAAK,WAAYhC,GAAc,IAAvBiC,EAAsB,EAAtBA,MACFjC,aAAoBC,MACtBgC,EAAMiB,GACNjB,EAAMS,GACNT,EAAMQ,Q,iCC3BZ,kCAAO,IAAMgB,EAA+C,CAC1D,aAAc,CACZvC,UAAW,GACXE,GAAI,aACJsC,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3BtC,KAAM,oCACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK4C,WAEzC,SAAU,CACR1C,UAAW,GACXE,GAAI,SACJsC,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3BtC,KAAM,2BACNN,OAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAAM4C,WAE/C,SAAU,CACR1C,UAAW,GACXE,GAAI,SACJsC,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3BtC,KAAM,2BACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,KAAM,IAAK,KAAK4C,WAE1C,UAAW,CACT1C,UAAW,GACXE,GAAI,UACJsC,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3BtC,KAAM,4BACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK4C,WAEzC,aAAc,CACZ1C,UAAW,GACXE,GAAI,aACJsC,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC9B5C,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK4C,UAC5CtC,KAAM,qCAER,aAAc,CACZJ,UAAW,GACXE,GAAI,aACJsC,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,GAAGC,UACrB5C,OAAQ,CAAC,IAAK,IAAK,IAAK,KAAK4C,UAC7BtC,KAAM,mCAER,aAAc,CACZJ,UAAW,GACXE,GAAI,aACJsC,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGC,UACxB5C,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAAK4C,UAClCtC,KAAM,qC,wHCXKuC,IAhCU,WACvB,IACMC,EADcC,cACWC,KAAKC,SAAS,YAFhB,EAGHC,mBAASJ,GAHN,mBAGtBK,EAHsB,KAGdC,EAHc,KAIvBC,EAAYC,iBAA0B,MAM5C,OAJAC,qBAAU,WACRH,EAAQN,KACP,CAACA,IAGF,cAAC,IAAD,CACEU,YAAU,EACVL,OAAQA,EACRM,QAAS,kBAAML,GAAQ,IACvBM,oBAAqBL,EAJvB,SAME,cAAC,IAAD,UACE,eAAC,IAAD,CAAoBM,GAAI,EAAxB,UACE,cAAC,IAAD,CAAmBC,SAAS,KAAKC,WAAW,OAAOC,UAAU,SAA7D,2BAGA,eAAC,IAAD,CAAiBC,GAAIC,IAAQC,GAAI,EAAjC,UACE,cAAC,IAAD,CAAMF,GAAIG,IAAqBC,QAAS,KACxC,cAAC,IAAD,qE,sIChCNC,EAAYC,YAAOC,IAAM,CAC7BC,UAAW,CACTC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,SAAU,WACVC,cAAe,UAIbC,EAAOT,YAAOC,IAAM,CACxBC,UAAW,CACTK,SAAU,WACVG,WAAY,SACZC,cAAe,SACfC,eAAgB,SAChBC,QAAS,CACPC,EAAG,MACHX,IAAK,EACLG,OAAQ,EACRC,SAAU,WACVQ,WAAY,kDAKZC,EAAMhB,YAAOiB,IAAK,CACtBf,UAAW,CACTK,SAAU,WACVM,QAAS,CACPV,IAAK,EACLG,OAAQ,EACRQ,EAAG,OACHI,QAAQ,KACRX,SAAU,WACVQ,WAAY,eAKZI,EAAanB,YAAOoB,IAAQ,CAChClB,UAAW,CACTmB,EAAG,OACHP,EAAG,OACHQ,GAAI,cAuCOC,EAnCG,WAChB,IAAM/F,EAAYgG,YAAerG,KAC3BM,EAAa+F,YAAevG,KAC5BwG,EAAUjG,EAAUK,UAAY,EAEtC,OACE,cAACkE,EAAD,CAAW2B,gBAAe,iBAAYD,EAAZ,UAA1B,SACGvI,gBAAMuI,GAAStI,KAAI,SAACyC,GAAO,IAAD,EACnB+F,EAAUlG,EAAaD,EAAUK,UAAYD,EAAIA,EACjDgG,EAAUD,EAAU,KAAO,EAAI,EAAI,EACnCE,EAAYrG,EAAU6C,YAAYO,SAAS+C,GAE3CG,EAAS,CACb,8BACGrG,EAAa,OAAS,QAAU,QADnC,wBAEWkG,IAAYnG,EAAUK,eAAYkG,EAAlC,MAFX,IAMF,OAAQJ,EAGN,cAAClB,EAAD,CACEuB,GAAIF,EAEJG,aAAY,iBAAYL,EAAZ,UAHd,SAKGC,GAAa3I,gBAAM0I,GAASzI,KAAI,SAACyC,GAAD,OAAO,cAACuF,EAAD,GAAiBvF,OAHpD+F,GAJP,cAACX,EAAD,CAAmBgB,GAAIF,GAAbH,SC3EL,MAA0B,iCCOnCO,EAAYlC,YAAOmC,IAAY,CACnCjC,UAAW,CACTC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,SAAU,cAIRlH,EAAO2G,YAAOiB,IAAK,CACvBf,UAAW,CACTK,SAAU,WACVM,QAAS,CACPQ,EAAG,OACHP,EAAG,OACHX,IAAK,MACLC,KAAM,MACNgC,MAAO,QACPC,QAAS,OACT3B,WAAY,SACZ4B,aAAc,OACd/B,SAAU,WACVK,eAAgB,SAChB2B,UAAW,4BA0CFC,EAhCU,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,YAA0C,IAA7BC,mBAA6B,MAAfC,WAAe,EAC9DnH,EAAYgG,YAAerG,KAC3BoB,EAAQiF,YAAejG,KACvBkG,EAAUjG,EAAUK,UAAY,EAEtC,OACE,cAACqG,EAAD,CAAWT,QAASA,EAApB,SACGlF,EAAMpD,KAAI,SAACU,EAAM+B,GAChB,IAAMgH,EAAaC,eAAKJ,EAAa5I,GAC/BqH,GAAoB,OAAV0B,QAAU,IAAVA,OAAA,EAAAA,EAAYE,cAAe,GAE3C,OACE,cAACzJ,EAAD,CAEE0J,QAAS,kBAAML,EAAY7I,IAC3BmI,GACEY,EACI,CACE,UAAW,CACTtB,GAAI,UACJJ,QAAQ,IAAD,OAAMA,EAAN,YAGXa,GAVDnG,SCjDXoH,EAAchD,YAAOC,IAAM,CAC/BC,UAAW,CACTC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,SAAU,WACVC,cAAe,UAIbyC,EAASjD,YAAOkD,IAAM,CAC1BhD,UAAW,CACTQ,WAAY,SACZG,QAAS,CACPC,EAAG,OACHI,QAAQ,KACRiC,UAAW,KACXpC,WAAY,oDAwBHqC,EAnBK,WAClB,IAAM5H,EAAYgG,YAAerG,KAEjC,OACE,cAAC6H,EAAD,CAAaf,aAAY,iBAAYzG,EAAUG,OAAOuB,OAA7B,UAAzB,SACG1B,EAAUG,OAAOxC,KAAI,SAACkK,EAAGzH,GAAJ,OACpB,cAAC,EAAD,CAEEoG,GAAI,CACF,UAAW,CACTX,GAAI7F,EAAU8C,OAAO1C,IAAM,GAAK,QAH/BA,SC3BT0H,EAAQtD,YAAOiB,IAAK,CACxBf,UAAW,CACTmB,EAAG,QACHd,SAAU,WACVe,GAAG,eAAD,OAAiBiC,EAAjB,QAiBSC,EARc,SAAC,GAAD,IAAGf,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,YAAhB,OAC3B,eAACY,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAOZ,YAAaA,EAAaD,YAAaA,S,iCCzBlDgB,EAAOC,QAAU,SAASC,GAAkB,2BAANC,EAAM,iCAANA,EAAM,kBAC1C,IAAMC,EAAS,GACRC,EAAWC,MAAXD,QAGPF,EAAKI,SAAQ,SAACC,EAAGrI,GACf,GAAiB,iBAANqI,EACTL,EAAKhI,GAAK,CAACqI,EAAGA,QACT,GAAIH,EAAQG,GAAI,CACrB,GAAoB,iBAATA,EAAE,GAKX,MAAMC,UAAU,wCAJhBN,EAAKhI,GAAK,CAACqI,EAAE,GAAmB,mBAARA,EAAE,GAAmBA,EAAE,GAAGA,EAAE,IAAM,UAUhE,IACIE,EArBsC,EAoBtCC,EAAMR,EAAKf,KAAKiB,GApBsB,IAuB5BH,GAvB4B,IAuB1C,2BAAuB,KAAdU,EAAc,QAarB,GAXIP,EAAQK,IAAoB,MAAXA,EAAK,KACxBE,EAAIA,EAAEC,QAAQ,OAAQ,KAIpBF,EACFP,EAAOU,KAAKF,EAAEC,QAAQ,yBAAoC,GAAVF,EAAI,GAAU,KAAO,OAErEP,EAAOU,KAAKF,IAGTT,EAAK1G,OAAQ,MAGlBkH,EAAMR,EAAKf,KAAKiB,IAAYM,EAG5BD,EAAOP,EAAKY,QACZX,EAAOU,KAAKJ,IAASC,EAAMA,EAAI,GAAKD,IA3CI,8BA8C1C,OAAON,EAAOY,KAAK,M,oBC9CrB,IAAIC,EAA6B,EAAQ,KA2DzCjB,EAAOC,QAzDP,SAAoCiB,EAAGC,GACrC,IAAIC,EAEJ,GAAsB,qBAAXC,QAAgD,MAAtBH,EAAEG,OAAOC,UAAmB,CAC/D,GAAIhB,MAAMD,QAAQa,KAAOE,EAAKH,EAA2BC,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAEzH,OAAqB,CAC/G2H,IAAIF,EAAIE,GACZ,IAAIjJ,EAAI,EAEJoJ,EAAI,aAER,MAAO,CACLX,EAAGW,EACHC,EAAG,WACD,OAAIrJ,GAAK+I,EAAEzH,OAAe,CACxBgI,MAAM,GAED,CACLA,MAAM,EACNpM,MAAO6L,EAAE/I,OAGbuJ,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGL,GAIP,MAAM,IAAId,UAAU,yIAGtB,IAEIoB,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLnB,EAAG,WACDQ,EAAKF,EAAEG,OAAOC,aAEhBE,EAAG,WACD,IAAIQ,EAAOZ,EAAGa,OAEd,OADAH,EAAmBE,EAAKP,KACjBO,GAETN,EAAG,SAAWQ,GACZH,GAAS,EACTF,EAAMK,GAERN,EAAG,WACD,IACOE,GAAoC,MAAhBV,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIW,EAAQ,MAAMF,O,oBCrD1B,IAAIM,EAAmB,EAAQ,KAW/BnC,EAAOC,QATP,SAAqCiB,EAAGkB,GACtC,GAAKlB,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAOiB,EAAiBjB,EAAGkB,GACtD,IAAIZ,EAAIa,OAAOC,UAAUC,SAASC,KAAKtB,GAAGuB,MAAM,GAAI,GAEpD,MADU,WAANjB,GAAkBN,EAAEwB,cAAalB,EAAIN,EAAEwB,YAAYlK,MAC7C,QAANgJ,GAAqB,QAANA,EAAoBlB,MAAMqC,KAAKzB,GACxC,cAANM,GAAqB,2CAA2CoB,KAAKpB,GAAWW,EAAiBjB,EAAGkB,QAAxG,K,kBCEFpC,EAAOC,QAVP,SAA2B4C,EAAKC,IACnB,MAAPA,GAAeA,EAAMD,EAAIpJ,UAAQqJ,EAAMD,EAAIpJ,QAE/C,IAAK,IAAItB,EAAI,EAAG4K,EAAO,IAAIzC,MAAMwC,GAAM3K,EAAI2K,EAAK3K,IAC9C4K,EAAK5K,GAAK0K,EAAI1K,GAGhB,OAAO4K,I,0JCsCMC,UA7Ba,WAC1B,ICjB6C9C,EAAS+C,EDiBhD1J,EAAawE,YAAe1E,KADF,EAEE6J,YAAexJ,KAFjB,mBAEzBsF,EAFyB,KAEZmE,EAFY,KAG1B9M,EAAY0H,YAAetG,KAE3B2L,EADQrF,YAAezE,KACH0F,EAAYvF,OAEhCnD,EAAW+M,mBACf,kBAAMlN,YAAkBoD,EAAYlD,KACpC,CAACkD,IASH,OACE,qCACE,cAACwB,EAAA,EAAD,IACA,cAACgF,EAAA,EAAD,CAAWf,YAAaA,EAAaC,YATjB,SAAC7I,GACnBA,EAAKoC,OAASe,GAChB4J,EAAW,GAAD,mBAAKG,kBAAQtE,EAAa5I,IAA1B,CAAiCA,QAQ3C,cAAC,IAAD,CAASmN,UAAU,SAAnB,SACGC,IADH,ICtCyCtD,EDsCzC,+BCrCC+C,IACHA,EAAM/C,EAAQuC,MAAM,IDoClB,ECjCGJ,OAAOoB,OAAOpB,OAAOqB,iBAAiBxD,EAAS,CACpD+C,IAAK,CACH5N,MAAOgN,OAAOoB,OAAOR,QDgCH3M,EAAe8M","file":"static/js/find-the-note.4f1278d2.chunk.js","sourcesContent":["import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ftnFrettedNotesState = atom<INote[]>({\n  key: \"ftnFrettedNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnSeedState = atom<number>({\n  key: \"ftnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ftnQueueState = selector<string[]>({\n  key: \"ftnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ftnSeedState);\n    const notes = getNoteNames();\n    return shuffle(notes, seed);\n  },\n});\n\nconst ftnPointerState = atom<number>({\n  key: \"ftnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ftnPointerSelector = selector<number>({\n  key: \"ftnPointerSelector\",\n  get: ({ get }) => get(ftnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ftnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ftnSeedState, get(ftnSeedState) + Math.random());\n      reset(ftnPointerState);\n    } else {\n      set(ftnPointerState, newValue);\n    }\n\n    reset(ftnFrettedNotesState);\n  },\n});\n\nexport const ftnNoteState = selector<string>({\n  key: \"ftnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ftnQueueState);\n    const pointer = get(ftnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ftnCountState = selector<number>({\n  key: \"ftnCountState\",\n  get: ({ get }) => {\n    const notes = get(fretboardNotesState);\n    const targetNote = get(ftnNoteState);\n\n    return filter(notes, [\"name\", targetNote]).length;\n  },\n});\n\nexport const ftnGameSelector = selector<INote[]>({\n  key: \"ftnGameSelector\",\n  get: ({ get }) => get(ftnFrettedNotesState),\n  set: ({ get, set }, newValue) => {\n    if (\n      newValue instanceof DefaultValue ||\n      newValue.length === get(ftnCountState)\n    ) {\n      // All notes found so move onto the next\n      set(ftnPointerSelector, get(ftnPointerSelector) + 1);\n    } else {\n      set(ftnFrettedNotesState, newValue);\n    }\n  },\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"./fretboard\";\n\nexport const ntnTotalAttemptsState = atom<number>({\n  key: \"ntnTotalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnTotalCorrectState = atom<number>({\n  key: \"ntnTotalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameAttemptsState = atom<number>({\n  key: \"ntnGameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const ntnGameCorrectState = atom<number>({\n  key: \"ntnGameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnSeedState = atom<number>({\n  key: \"ntnSeedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst ntnQueueState = selector<INote[]>({\n  key: \"ntnQueueState\",\n  get: ({ get }) => {\n    const seed = get(ntnSeedState);\n    const notes = get(fretboardNotesState);\n    return shuffle(notes, seed);\n  },\n});\n\nconst ntnPointerState = atom<number>({\n  key: \"ntnPointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst ntnPointerSelector = selector<number>({\n  key: \"ntnPointerSelector\",\n  get: ({ get }) => get(ntnPointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(ntnQueueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      set(ntnSeedState, get(ntnSeedState) + Math.random());\n      reset(ntnPointerState);\n    } else {\n      set(ntnPointerState, newValue);\n    }\n  },\n});\n\nexport const ntnNoteState = selector<INote>({\n  key: \"ntnNoteState\",\n  get: ({ get }) => {\n    const queue = get(ntnQueueState);\n    const pointer = get(ntnPointerSelector);\n    return queue[pointer];\n  },\n});\n\nexport const ntnGameSelector = selector<INote>({\n  key: \"ntnGameSelector\",\n  get: ({ get }) => get(ntnNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset game\n      reset(ntnPointerSelector);\n      reset(ntnGameCorrectState);\n      reset(ntnGameAttemptsState);\n      return;\n    }\n\n    const note = get(ntnNoteState);\n    const isCorrect = newValue.name === note.name;\n\n    // Update game stats\n    set(ntnGameAttemptsState, get(ntnGameAttemptsState) + 1);\n    set(ntnGameCorrectState, get(ntnGameCorrectState) + Number(isCorrect));\n    set(ntnTotalAttemptsState, get(ntnTotalAttemptsState) + 1);\n    set(ntnTotalCorrectState, get(ntnTotalCorrectState) + Number(isCorrect));\n\n    if (isCorrect) {\n      // Next note\n      set(ntnPointerSelector, get(ntnPointerSelector) + 1);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { percent } from \"utils\";\nimport {\n  ntnGameSelector,\n  ntnTotalAttemptsState,\n  ntnTotalCorrectState,\n} from \"./name-the-note\";\n\ninterface GameStats {\n  game: string;\n  percent: number;\n  correct: number;\n  attempts: number;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => [\n    {\n      game: \"Name the Note\",\n      correct: get(ntnTotalCorrectState),\n      attempts: get(ntnTotalAttemptsState),\n      percent: percent(get(ntnTotalCorrectState), get(ntnTotalAttemptsState)),\n    },\n  ],\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameSelector);\n      reset(ntnTotalCorrectState);\n      reset(ntnTotalAttemptsState);\n    }\n  },\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Icon,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { FC, useEffect, useRef, useState } from \"react\";\nimport { FcRotateToLandscape } from \"react-icons/fc\";\nimport { useOrientation } from \"react-use\";\n\nconst RotateDevice: FC = () => {\n  const orientation = useOrientation();\n  const isPortrait = orientation.type.includes(\"portrait\");\n  const [isOpen, setOpen] = useState(isPortrait);\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    setOpen(isPortrait);\n  }, [isPortrait]);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={() => setOpen(false)}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent mx={4}>\n          <AlertDialogHeader fontSize=\"xl\" fontWeight=\"bold\" textAlign=\"center\">\n            Rotate Device\n          </AlertDialogHeader>\n          <AlertDialogBody as={VStack} pb={4}>\n            <Icon as={FcRotateToLandscape} boxSize={20} />\n            <Text>Rotate your device for a better experience</Text>\n          </AlertDialogBody>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default RotateDevice;\n","import { Box, chakra, Circle, Grid } from \"@chakra-ui/react\";\nimport { times } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState, leftHandedState } from \"state\";\n\nconst FretsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst Fret = chakra(Grid, {\n  baseStyle: {\n    position: \"relative\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    _before: {\n      w: \"8px\",\n      top: 0,\n      bottom: 0,\n      position: \"absolute\",\n      background: \"linear-gradient(to right, gold, gray, gold)\",\n    },\n  },\n});\n\nconst Nut = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: 0,\n      bottom: 0,\n      w: \"16px\",\n      content: `\"\"`,\n      position: \"absolute\",\n      background: \"gray.200\",\n    },\n  },\n});\n\nconst FretMarker = chakra(Circle, {\n  baseStyle: {\n    h: \"26px\",\n    w: \"26px\",\n    bg: \"gray.200\",\n  },\n});\n\nconst Frets: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n  const leftHanded = useRecoilValue(leftHandedState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <FretsGrid templateColumns={`repeat(${columns}, 1fr)`}>\n      {times(columns).map((i) => {\n        const fretNum = leftHanded ? fretboard.fretCount - i : i;\n        const numDots = fretNum % 12 === 0 ? 2 : 1;\n        const hasMarker = fretboard.fretMarkers.includes(fretNum);\n\n        const styles = {\n          \":before\": {\n            [leftHanded ? \"left\" : \"right\"]: \"-4px\",\n            content: fretNum === fretboard.fretCount ? undefined : `\"\"`,\n          },\n        };\n\n        return !fretNum ? (\n          <Nut key={fretNum} sx={styles} />\n        ) : (\n          <Fret\n            sx={styles}\n            key={fretNum}\n            templateRows={`repeat(${numDots}, 1fr)`}\n          >\n            {hasMarker && times(numDots).map((i) => <FretMarker key={i} />)}\n          </Fret>\n        );\n      })}\n    </FretsGrid>\n  );\n};\n\nexport default Frets;\n","export default __webpack_public_path__ + \"static/media/wood.3cf6e95a.png\";","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\nimport { find, identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, fretboardState } from \"state\";\nimport { INote } from \"types\";\n\nconst NotesGrid = chakra(SimpleGrid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n  },\n});\n\nconst Note = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      h: \"34px\",\n      w: \"34px\",\n      top: \"50%\",\n      left: \"50%\",\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      position: \"absolute\",\n      justifyContent: \"center\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Notes: FC<Props> = ({ activeNotes, onNoteClick = identity }) => {\n  const fretboard = useRecoilValue(fretboardState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <NotesGrid columns={columns}>\n      {notes.map((note, i) => {\n        const activeNote = find(activeNotes, note);\n        const content = activeNote?.displayName || \"\";\n\n        return (\n          <Note\n            key={i}\n            onClick={() => onNoteClick(note)}\n            sx={\n              activeNote\n                ? {\n                    \":before\": {\n                      bg: \"red.500\",\n                      content: `\"${content}\"`,\n                    },\n                  }\n                : undefined\n            }\n          />\n        );\n      })}\n    </NotesGrid>\n  );\n};\n\nexport default Notes;\n","import { chakra, Flex, Grid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\n\nconst StringsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst String = chakra(Flex, {\n  baseStyle: {\n    alignItems: \"center\",\n    _before: {\n      w: \"100%\",\n      content: `\"\"`,\n      boxShadow: \"md\",\n      background: \"linear-gradient(to bottom, gray, white, gray)\",\n    },\n  },\n});\n\nconst Strings: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <StringsGrid templateRows={`repeat(${fretboard.tuning.length}, 1fr)`}>\n      {fretboard.tuning.map((_, i) => (\n        <String\n          key={i}\n          sx={{\n            \":before\": {\n              h: (fretboard.guages[i] || 1) + \"px\",\n            },\n          }}\n        />\n      ))}\n    </StringsGrid>\n  );\n};\n\nexport default Strings;\n","import { Box, chakra } from \"@chakra-ui/react\";\nimport Frets from \"components/Fretboard/Frets\";\nimport woodSrc from \"images/wood.png\";\nimport React, { FC } from \"react\";\nimport { INote } from \"types\";\nimport Notes from \"./Notes\";\nimport Strings from \"./Strings\";\n\nconst Board = chakra(Box, {\n  baseStyle: {\n    h: \"220px\",\n    position: \"relative\",\n    bg: `#222222 url(${woodSrc})`,\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Fretboard: FC<Props> = ({ activeNotes, onNoteClick }) => (\n  <Board>\n    <Frets />\n    <Strings />\n    <Notes onNoteClick={onNoteClick} activeNotes={activeNotes} />\n  </Board>\n);\n\nexport default Fretboard;\n","module.exports = function(strings, ...exps) {\n  const result = [];\n  const {isArray} = Array;\n\n  // Convert quantity expressions to [quantity, quantity string] tuples\n  exps.forEach((v, i) => {\n    if (typeof(v) == 'number') {\n      exps[i] = [v, v];\n    } else if (isArray(v)) {\n      if (typeof(v[0]) == 'number') {\n        exps[i] = [v[0], typeof v[1] == 'function' ? v[1](v[0]) : null];\n      } else {\n        // Edge case where the caller injects an Array but doesn't intend for it\n        // to be treated as a quantity.  Not worth solving at present.\n        throw TypeError('First item in array must be a Number');\n      }\n    }\n  });\n\n  // Initialize the quantity to use for pluralization\n  let qty = exps.find(isArray);\n  let last;\n\n  for (let s of strings) {\n    // Trim leading whitespace hidden quantities\n    if (isArray(last) && last[1] == null) {\n      s = s.replace(/^\\s+/, '');\n    }\n\n    // Push current string, pluralizing if we have a valid quantity\n    if (qty) {\n      result.push(s.replace(/\\[([^|]*)\\|([^\\]]*)\\]/g, qty[0] == 1 ? '$1' : '$2'));\n    } else {\n      result.push(s);\n    }\n\n    if (!exps.length) break;\n\n    // Locate next quantity\n    qty = exps.find(isArray) || qty;\n\n    // Push quantity string\n    last = exps.shift();\n    result.push(last === qty ? qty[1] : last);\n  }\n\n  return result.join('');\n};\n","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","import { Heading } from \"@chakra-ui/react\";\nimport Fretboard from \"components/Fretboard\";\nimport RotateDevice from \"components/RotateDevice\";\nimport { without } from \"lodash\";\nimport React, { FC, useMemo } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport simplur from \"simplur\";\nimport {\n  ftnCountState,\n  ftnGameSelector,\n  ftnNoteState,\n  halfNotesState,\n} from \"state\";\nimport { INote } from \"types\";\nimport { toDisplayNoteName } from \"utils\";\n\nconst FindTheNotePage: FC = () => {\n  const targetNote = useRecoilValue(ftnNoteState);\n  const [activeNotes, updateGame] = useRecoilState(ftnGameSelector);\n  const halfNotes = useRecoilValue(halfNotesState);\n  const count = useRecoilValue(ftnCountState);\n  const remaining = count - activeNotes.length;\n\n  const noteName = useMemo(\n    () => toDisplayNoteName(targetNote, halfNotes),\n    [targetNote]\n  );\n\n  const handleNoteClick = (note: INote) => {\n    if (note.name === targetNote) {\n      updateGame([...without(activeNotes, note), note]);\n    }\n  };\n\n  return (\n    <>\n      <RotateDevice />\n      <Fretboard activeNotes={activeNotes} onNoteClick={handleNoteClick} />\n      <Heading alignSelf=\"center\">\n        {simplur`Find ${noteName} in ${remaining} plac[e|es]`}\n      </Heading>\n    </>\n  );\n};\n\nexport default FindTheNotePage;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"sourceRoot":""}