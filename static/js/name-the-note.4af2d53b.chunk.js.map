{"version":3,"file":"static/js/name-the-note.4af2d53b.chunk.js","mappings":"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","sources":["components/AnswerIndicator.tsx","components/GameCountdown.tsx","components/GameOver.tsx","components/GameControls.tsx","components/Keyboard.tsx","pages/name-the-note.tsx"],"sourcesContent":["import { Center, chakra, Fade, Icon } from \"@chakra-ui/react\";\nimport React, { FC, useEffect, useRef } from \"react\";\nimport {\n  AiOutlineCheck as CorrectIcon,\n  AiOutlineClose as IncorrectIcon,\n} from \"react-icons/ai\";\nimport { useMountedState } from \"react-use\";\nimport { useRecoilState } from \"recoil\";\nimport { answerIndicatorState } from \"state\";\nimport { IBinary } from \"types\";\n\nconst Mask = chakra(Center, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    opacity: 0.7,\n    position: \"absolute\",\n  },\n});\n\nconst AnswerIndicator: FC = () => {\n  const isMounted = useMountedState();\n  const [indicator, setIndicator] = useRecoilState(answerIndicatorState);\n\n  const ref = useRef<IBinary>(0);\n  ref.current = (indicator > -1 ? indicator : ref.current) as IBinary;\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (isMounted()) {\n        setIndicator(-1);\n      }\n    }, 250);\n  }, [indicator]);\n\n  return (\n    <Fade unmountOnExit in={indicator > -1}>\n      <Mask bg={!ref.current ? \"red.500\" : \"green.500\"}>\n        <Icon\n          color=\"white\"\n          boxSize=\"6em\"\n          as={!ref.current ? IncorrectIcon : CorrectIcon}\n        />\n      </Mask>\n    </Fade>\n  );\n};\n\nexport default AnswerIndicator;\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  Heading,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { identity } from \"lodash\";\nimport React, { FC, useEffect, useRef } from \"react\";\nimport { useCountdown } from \"utils\";\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst GameCountdown: FC<Props> = ({ isOpen, onClose }) => {\n  const countdown = useCountdown({ onExpire: onClose });\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      countdown.start(3000);\n    }\n  }, [isOpen]);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={identity}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent w=\"auto\">\n          <AlertDialogBody as={VStack} py={4} px={8}>\n            <Heading size=\"4xl\">{countdown.remaining.seconds}</Heading>\n            <Text fontSize=\"xl\">GET READY</Text>\n          </AlertDialogBody>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default GameCountdown;\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Button,\n} from \"@chakra-ui/react\";\nimport React, { FC, useRef } from \"react\";\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onPlayAgainClick: () => void;\n}\n\nconst GameOver: FC<Props> = ({\n  children,\n  isOpen,\n  onClose,\n  onPlayAgainClick,\n}) => {\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={onClose}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent mx={4}>\n          <AlertDialogHeader>Game Over</AlertDialogHeader>\n          <AlertDialogBody>{children}</AlertDialogBody>\n          <AlertDialogFooter>\n            <Button\n              ref={cancelRef}\n              onClick={onClose}\n              colorScheme=\"red\"\n              variant=\"outline\"\n            >\n              Close\n            </Button>\n            <Button\n              ml={2}\n              variant=\"outline\"\n              colorScheme=\"blue\"\n              onClick={onPlayAgainClick}\n            >\n              Play Again\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default GameOver;\n","import {\n  Badge,\n  Center,\n  chakra,\n  Container,\n  HStack,\n  Icon,\n  IconButton,\n  Radio,\n  RadioGroup,\n  Text,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport GameCountdown from \"components/GameCountdown\";\nimport GameOver from \"components/GameOver\";\nimport { gameDurations } from \"config\";\nimport { identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport {\n  IoArrowBackOutline as BackIcon,\n  IoPlay as PlayIcon,\n  IoStop as StopIcon,\n} from \"react-icons/io5\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport { gameDurationState } from \"state\";\nimport { IGameDuration, IStats } from \"types\";\nimport { useCountdown } from \"utils\";\n\nconst StatBadge = chakra(Badge, {\n  baseStyle: {\n    minW: \"50px\",\n    fontSize: \"xl\",\n    display: \"flex\",\n    borderWidth: \"1px\",\n    borderRadius: \"md\",\n    boxShadow: \"inner\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\ninterface Props {\n  stats: IStats;\n  onPlayClick?: () => void;\n  onStopClick?: () => void;\n  onTimerStart?: () => void;\n  onTimerStop?: () => void;\n}\n\nconst GameControls: FC<Props> = ({\n  stats,\n  onPlayClick = identity,\n  onStopClick = identity,\n  onTimerStart = identity,\n  onTimerStop = identity,\n}) => {\n  const [duration, setDuration] = useRecoilState(gameDurationState);\n\n  const {\n    isOpen: isCountdownOpen,\n    onOpen: openCountdown,\n    onClose: closeCountdown,\n  } = useDisclosure();\n\n  const {\n    isOpen: isGameOverOpen,\n    onOpen: openGameOver,\n    onClose: closeGameOver,\n  } = useDisclosure();\n\n  const countdown = useCountdown({\n    onExpire: () => {\n      openGameOver();\n      onTimerStop();\n    },\n  });\n\n  const handlePlayClick = () => {\n    onPlayClick();\n    closeGameOver();\n    openCountdown();\n  };\n\n  const handleStopClick = () => {\n    countdown.reset();\n    onStopClick();\n  };\n\n  const handleCountdownStart = () => {\n    closeCountdown();\n    countdown.start(duration);\n    onTimerStart();\n  };\n\n  return (\n    <>\n      <GameCountdown isOpen={isCountdownOpen} onClose={handleCountdownStart} />\n      <GameOver\n        isOpen={isGameOverOpen}\n        onClose={closeGameOver}\n        onPlayAgainClick={handlePlayClick}\n      >\n        You identified {stats.correct} notes correctly\n      </GameOver>\n      <Container\n        as={HStack}\n        align=\"stretch\"\n        maxW=\"container.sm\"\n        justifyContent=\"center\"\n      >\n        <IconButton\n          to=\"/\"\n          as={Link}\n          variant=\"ghost\"\n          aria-label=\"Back\"\n          icon={<Icon as={BackIcon} boxSize=\"20px\" />}\n        />\n        <RadioGroup\n          as={HStack}\n          value={duration}\n          onChange={(value) => setDuration(Number(value) as IGameDuration)}\n        >\n          {gameDurations.map(({ label, value }) => (\n            <Radio key={value} value={value}>\n              {label}\n            </Radio>\n          ))}\n        </RadioGroup>\n        <IconButton\n          aria-label=\"Play\"\n          onClick={handlePlayClick}\n          isDisabled={countdown.isRunning}\n          icon={<Icon as={PlayIcon} boxSize=\"20px\" />}\n        />\n        <Center w=\"80px\" px={4} borderRadius=\"md\" boxShadow=\"inner\">\n          <Text fontSize=\"lg\">{countdown.remaining.formatted}</Text>\n        </Center>\n        <IconButton\n          aria-label=\"Stop\"\n          onClick={handleStopClick}\n          icon={<Icon as={StopIcon} boxSize=\"20px\" />}\n        />\n        <StatBadge colorScheme=\"green\" borderColor=\"green.200\">\n          {stats.correct}\n        </StatBadge>\n        <StatBadge colorScheme=\"red\" borderColor=\"red.200\">\n          {stats.attempts - stats.correct}\n        </StatBadge>\n      </Container>\n    </>\n  );\n};\n\nexport default GameControls;\n","import {\n  chakra,\n  Container as ContainerComponent,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Midi } from \"@tonaljs/tonal\";\nimport { identity } from \"lodash\";\nimport React, { FC, useRef } from \"react\";\nimport { KeyboardShortcuts, Piano } from \"react-piano\";\nimport \"react-piano/dist/styles.css\";\nimport { useRecoilValue } from \"recoil\";\nimport { halfNotesState } from \"state\";\nimport \"theme/react-piano.css\";\nimport { midiToNoteName, toDisplayNoteName } from \"utils\";\n\nconst noteRange = {\n  first: Midi.toMidi(\"c4\"),\n  last: Midi.toMidi(\"b4\"),\n};\n\nconst shortcuts = KeyboardShortcuts.create({\n  firstNote: noteRange.first,\n  lastNote: noteRange.last,\n  keyboardConfig: KeyboardShortcuts.HOME_ROW,\n});\n\nconst Container = chakra(ContainerComponent, {\n  baseStyle: {\n    maxH: \"220px\",\n    minH: \"100px\",\n    flex: \"1 1 auto\",\n    maxW: \"container.sm\",\n  },\n});\n\ninterface Props {\n  onClick: (noteName: string) => void;\n}\n\nconst Keyboard: FC<Props> = ({ onClick, ...props }) => {\n  const halfNotes = useRecoilValue(halfNotesState);\n\n  /**\n   * renderNoteLabel is called on mouse over for some reason so\n   * cache `[midi]: noteName` so we don't randomly switch between\n   * sharps and flats when halfNotes = \"random\"\n   */\n  const cache = useRef<{ [midi: number]: string }>({});\n\n  const renderNoteLabel = ({ midiNumber: midi }: { midiNumber: number }) => {\n    const nameName = cache.current[midi] || toDisplayNoteName(midi, halfNotes);\n    cache.current[midi] = nameName;\n\n    return (\n      <Text className=\"ReactPiano__NoteLabel\" userSelect=\"none\">\n        {nameName}\n      </Text>\n    );\n  };\n\n  const handleClick = (midi: number) => onClick(midiToNoteName(midi));\n\n  return (\n    <Container {...props}>\n      <Piano\n        stopNote={identity}\n        noteRange={noteRange}\n        playNote={handleClick}\n        keyboardShortcuts={shortcuts}\n        renderNoteLabel={renderNoteLabel}\n      />\n    </Container>\n  );\n};\n\nexport default chakra(Keyboard);\n","import { Box } from \"@chakra-ui/react\";\nimport AnswerIndicator from \"components/AnswerIndicator\";\nimport Fretboard from \"components/Fretboard\";\nimport GameControls from \"components/GameControls\";\nimport Keyboard from \"components/Keyboard\";\nimport React, { FC } from \"react\";\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\nimport { gameProxySelector, gameStatsState } from \"state/name-the-note\";\nimport { INote } from \"types\";\n\nconst NameTheNotePage: FC = () => {\n  const stats = useRecoilValue(gameStatsState);\n  const [note, updateGame] = useRecoilState(gameProxySelector);\n  const resetGame = useResetRecoilState(gameProxySelector);\n\n  const handleAnswer = (name: string) => updateGame({ name } as INote);\n\n  return (\n    <>\n      <GameControls stats={stats.game} onTimerStart={resetGame} />\n      <Box position=\"relative\">\n        <Fretboard activeNotes={note ? [note] : []} />\n        <AnswerIndicator />\n      </Box>\n      <Keyboard alignSelf=\"center\" onClick={handleAnswer} />\n    </>\n  );\n};\n\nexport default NameTheNotePage;\n"],"names":["Mask","chakra","Center","baseStyle","top","left","right","bottom","opacity","position","isMounted","useMountedState","useRecoilState","answerIndicatorState","indicator","setIndicator","ref","useRef","current","useEffect","setTimeout","unmountOnExit","in","bg","color","boxSize","as","CorrectIcon","IncorrectIcon","isOpen","onClose","countdown","useCountdown","onExpire","cancelRef","start","isCentered","identity","leastDestructiveRef","w","VStack","py","px","size","remaining","seconds","fontSize","children","onPlayAgainClick","mx","onClick","colorScheme","variant","ml","StatBadge","Badge","minW","display","borderWidth","borderRadius","boxShadow","alignItems","justifyContent","stats","onPlayClick","onStopClick","onTimerStart","onTimerStop","gameDurationState","duration","setDuration","useDisclosure","isCountdownOpen","openCountdown","onOpen","closeCountdown","isGameOverOpen","openGameOver","closeGameOver","handlePlayClick","correct","HStack","align","maxW","to","Link","icon","BackIcon","value","onChange","Number","gameDurations","label","isDisabled","isRunning","PlayIcon","formatted","reset","StopIcon","borderColor","attempts","noteRange","first","Midi","last","shortcuts","KeyboardShortcuts","firstNote","lastNote","keyboardConfig","Container","ContainerComponent","maxH","minH","flex","props","halfNotes","useRecoilValue","halfNotesState","cache","stopNote","playNote","midi","midiToNoteName","keyboardShortcuts","renderNoteLabel","midiNumber","nameName","toDisplayNoteName","className","userSelect","gameStatsState","gameProxySelector","note","updateGame","resetGame","useResetRecoilState","game","activeNotes","alignSelf","name"],"sourceRoot":""}