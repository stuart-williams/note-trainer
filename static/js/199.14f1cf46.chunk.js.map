{"version":3,"file":"static/js/199.14f1cf46.chunk.js","mappings":"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","sources":["components/Fretboard/Frets.tsx","components/Fretboard/Notes.tsx","components/Fretboard/Strings.tsx","components/Fretboard/Fretboard.tsx","components/RotateDevice.tsx","config/index.ts","state/find-the-note/notes.ts","state/find-the-note/statistics.ts","state/find-the-note/index.ts","state/fretboard.ts","state/game.ts","state/statistics.ts","state/name-the-note/notes.ts","state/name-the-note/statistics.ts","state/name-the-note/index.ts","state/settings.ts","utils/countdown.ts","utils/maths.ts","utils/notes.ts","utils/state.ts"],"sourcesContent":["import { Box, chakra, Circle, Grid } from \"@chakra-ui/react\";\nimport { times } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState, fretMarkersState, leftHandedState } from \"state\";\n\nconst FretsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst Fret = chakra(Grid, {\n  baseStyle: {\n    position: \"relative\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    _before: {\n      w: \"8px\",\n      top: 0,\n      bottom: 0,\n      position: \"absolute\",\n      background: \"linear-gradient(to right, gold, gray, gold)\",\n    },\n  },\n});\n\nconst Nut = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      top: 0,\n      bottom: 0,\n      w: \"16px\",\n      content: `\"\"`,\n      position: \"absolute\",\n      background: \"gray.200\",\n    },\n  },\n});\n\nconst FretMarker = chakra(Circle, {\n  baseStyle: {\n    h: \"26px\",\n    w: \"26px\",\n    bg: \"gray.200\",\n  },\n});\n\nconst Frets: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n  const leftHanded = useRecoilValue(leftHandedState);\n  const fretMarkers = useRecoilValue(fretMarkersState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <FretsGrid templateColumns={`repeat(${columns}, 1fr)`}>\n      {times(columns).map((i) => {\n        const fretNum = leftHanded ? fretboard.fretCount - i : i;\n        const numDots = fretNum % 12 === 0 ? 2 : 1;\n        const hasMarker = fretboard.fretMarkers.includes(fretNum);\n        const renderMarker = fretMarkers && hasMarker;\n\n        const styles = {\n          \":before\": {\n            [leftHanded ? \"left\" : \"right\"]: \"-4px\",\n            content: fretNum === fretboard.fretCount ? undefined : `\"\"`,\n          },\n        };\n\n        return !fretNum ? (\n          <Nut key={fretNum} sx={styles} />\n        ) : (\n          <Fret\n            sx={styles}\n            key={fretNum}\n            templateRows={`repeat(${numDots}, 1fr)`}\n          >\n            {renderMarker && times(numDots).map((i) => <FretMarker key={i} />)}\n          </Fret>\n        );\n      })}\n    </FretsGrid>\n  );\n};\n\nexport default Frets;\n","import { Box, chakra, SimpleGrid } from \"@chakra-ui/react\";\nimport { find, identity } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, fretboardState } from \"state\";\nimport { INote } from \"types\";\n\nconst NotesGrid = chakra(SimpleGrid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n  },\n});\n\nconst Note = chakra(Box, {\n  baseStyle: {\n    position: \"relative\",\n    _before: {\n      h: \"34px\",\n      w: \"34px\",\n      top: \"50%\",\n      left: \"50%\",\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      borderRadius: \"full\",\n      position: \"absolute\",\n      justifyContent: \"center\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Notes: FC<Props> = ({ activeNotes, onNoteClick = identity }) => {\n  const fretboard = useRecoilValue(fretboardState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const columns = fretboard.fretCount + 1;\n\n  return (\n    <NotesGrid columns={columns}>\n      {notes.map((note, i) => {\n        const activeNote = find(activeNotes, note);\n        const content = activeNote?.displayName || \"\";\n\n        return (\n          <Note\n            key={i}\n            onClick={() => onNoteClick(note)}\n            sx={\n              activeNote\n                ? {\n                    \":before\": {\n                      bg: \"red.500\",\n                      content: `\"${content}\"`,\n                    },\n                  }\n                : undefined\n            }\n          />\n        );\n      })}\n    </NotesGrid>\n  );\n};\n\nexport default Notes;\n","import { chakra, Flex, Grid } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\n\nconst StringsGrid = chakra(Grid, {\n  baseStyle: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    position: \"absolute\",\n    pointerEvents: \"none\",\n  },\n});\n\nconst String = chakra(Flex, {\n  baseStyle: {\n    alignItems: \"center\",\n    _before: {\n      w: \"100%\",\n      content: `\"\"`,\n      boxShadow: \"md\",\n      background: \"linear-gradient(to bottom, gray, white, gray)\",\n    },\n  },\n});\n\nconst Strings: FC = () => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <StringsGrid templateRows={`repeat(${fretboard.tuning.length}, 1fr)`}>\n      {fretboard.tuning.map((_, i) => (\n        <String\n          key={i}\n          sx={{\n            \":before\": {\n              h: (fretboard.guages[i] || 1) + \"px\",\n            },\n          }}\n        />\n      ))}\n    </StringsGrid>\n  );\n};\n\nexport default Strings;\n","import { Box, chakra } from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardState } from \"state\";\nimport { INote } from \"types\";\nimport Frets from \"./Frets\";\nimport Notes from \"./Notes\";\nimport Strings from \"./Strings\";\n\nconst Board = chakra(Box, {\n  baseStyle: {\n    bg: `#222222`,\n    position: \"relative\",\n  },\n});\n\ninterface Props {\n  activeNotes: INote[];\n  onNoteClick?: (note: INote) => void;\n}\n\nconst Fretboard: FC<Props> = ({ activeNotes, onNoteClick }) => {\n  const fretboard = useRecoilValue(fretboardState);\n\n  return (\n    <Board h={fretboard.h}>\n      <Frets />\n      <Strings />\n      <Notes onNoteClick={onNoteClick} activeNotes={activeNotes} />\n    </Board>\n  );\n};\n\nexport default Fretboard;\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Icon,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { identity } from \"lodash\";\nimport React, { FC, useEffect, useRef, useState } from \"react\";\nimport { FcRotateToLandscape } from \"react-icons/fc\";\nimport { useOrientation } from \"react-use\";\n\nconst RotateDevice: FC = () => {\n  const orientation = useOrientation();\n  const isPortrait = orientation.type.includes(\"portrait\");\n  const [isOpen, setOpen] = useState(isPortrait);\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    setOpen(isPortrait);\n  }, [isPortrait]);\n\n  return (\n    <AlertDialog\n      isCentered\n      isOpen={isOpen}\n      onClose={identity}\n      leastDestructiveRef={cancelRef}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent mx={4} textAlign=\"center\">\n          <AlertDialogHeader>Rotate Device</AlertDialogHeader>\n          <AlertDialogBody as={VStack} pb={4}>\n            <Icon as={FcRotateToLandscape} boxSize={20} />\n            <Text>Rotate your device for a better experience</Text>\n          </AlertDialogBody>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n\nexport default RotateDevice;\n","import { IFretboardConfig, IFretboardId, IGameDurationConfig } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboardConfig> = {\n  \"standard-6\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    h: 220,\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    h: 220,\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    h: 220,\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    h: 254,\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    h: 200,\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n\nexport const gameDurations: IGameDurationConfig[] = [\n  {\n    label: \"30s\",\n    value: 30000,\n  },\n  {\n    label: \"1m\",\n    value: 60000,\n  },\n  {\n    label: \"3m\",\n    value: 180000,\n  },\n];\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { fretboardNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\n\n/**\n * Seed for queue shuffling.\n */\nconst seedState = atom<number>({\n  key: \"find-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\n/**\n * Maintain a queue for a consistent spread of notes.\n */\nconst queueState = selector<string[]>({\n  key: \"find-the-note/queueState\",\n  get: ({ get }) => shuffle(getNoteNames(), get(seedState)),\n});\n\n/**\n * Pointer to the current note in the queue.\n */\nconst pointerState = atom<number>({\n  key: \"find-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * Notes the user has selected to be rendered on the fretboard.\n */\nexport const activeNotesState = atom<INote[]>({\n  key: \"find-the-note/activeNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * A wrapper around pointerState which handles reshuffling the\n * queue when we reach the end, moving the pointer and clearing the\n * fretboard.\n */\nexport const pointerProxySelector = selector<number>({\n  key: \"find-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      // Reshuffle queue and point to the start\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      // Move pointer to next note\n      set(pointerState, newValue);\n    }\n\n    // Clear fretboard\n    reset(activeNotesState);\n  },\n});\n\n/**\n * Current game note.\n */\nexport const targetNoteState = selector<string>({\n  key: \"find-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n\n/**\n * Number of times the target note appears on the fretboard.\n */\nexport const targetNoteCountState = selector<number>({\n  key: \"find-the-note/targetNoteCountState\",\n  get: ({ get }) =>\n    filter(get(fretboardNotesState), [\"name\", get(targetNoteState)]).length,\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"find-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"find-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"find-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"find-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"find-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"find-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { without } from \"lodash\";\nimport { DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport {\n  activeNotesState,\n  pointerProxySelector,\n  targetNoteCountState,\n  targetNoteState,\n} from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote | null>({\n  key: \"find-the-note/gameProxySelector\",\n  get: () => null,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    // Incorrect\n    if (newValue === null || newValue.name !== get(targetNoteState)) {\n      // Indicate incorrect answer\n      set(answerIndicatorState, 0);\n      // Update failed attempt stat\n      set(statProxySelector, false);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Correct\n    const count = get(targetNoteCountState);\n    const activeNotes = get(activeNotesState);\n    const nextActiveNotes = [...without(activeNotes, newValue), newValue];\n\n    // All notes found\n    if (nextActiveNotes.length === count) {\n      // Indicate correct answer\n      set(answerIndicatorState, 1);\n      // Update successful attempt stat\n      set(statProxySelector, true);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Draw selected note on the fretboard\n    set(activeNotesState, nextActiveNotes);\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboardConfig, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboardConfig>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { atom } from \"recoil\";\nimport { IBinary, IGameDuration } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const answerIndicatorState = atom<-1 | IBinary>({\n  key: \"answerIndicatorState\",\n  default: -1,\n});\n\nexport const gameDurationState = atom<IGameDuration>({\n  key: \"gameDurationState\",\n  default: 30000,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IStats } from \"types\";\nimport { gameStatsState as fntGameStatsState } from \"./find-the-note\";\nimport { gameStatsState as ntnGameStatsState } from \"./name-the-note\";\n\ninterface GameStats extends IStats {\n  game: string;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => {\n    const { total: ntnStats } = get(ntnGameStatsState);\n    const { total: ftnStats } = get(fntGameStatsState);\n\n    return [\n      {\n        game: \"Name the Note\",\n        ...ntnStats,\n      },\n      {\n        ...ftnStats,\n        game: \"Find the Note\",\n      },\n    ];\n  },\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameStatsState);\n      reset(fntGameStatsState);\n    }\n  },\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"../fretboard\";\n\nconst seedState = atom<number>({\n  key: \"name-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst queueState = selector<INote[]>({\n  key: \"name-the-note/queueState\",\n  get: ({ get }) => shuffle(get(fretboardNotesState), get(seedState)),\n});\n\nconst pointerState = atom<number>({\n  key: \"name-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const pointerProxySelector = selector<number>({\n  key: \"name-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      set(pointerState, newValue);\n    }\n  },\n});\n\nexport const targetNoteState = selector<INote>({\n  key: \"name-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"name-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"name-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"name-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"name-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"name-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"name-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { IBinary, INote } from \"types\";\nimport { answerIndicatorState } from \"..\";\nimport { pointerProxySelector, targetNoteState } from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote>({\n  key: \"name-the-note/gameProxySelector\",\n  get: ({ get }) => get(targetNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    const isCorrect = newValue.name === get(targetNoteState).name;\n\n    // Indicate answer correctness\n    set(answerIndicatorState, Number(isCorrect) as IBinary);\n\n    // Update attempt stat\n    set(statProxySelector, isCorrect);\n\n    if (isCorrect) {\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n    }\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretMarkersState = atom<boolean>({\n  key: \"fretMarkersState\",\n  default: true,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import dayjs, { Dayjs } from \"dayjs\";\nimport { identity, padStart } from \"lodash\";\nimport { useRef, useState } from \"react\";\nimport { useInterval } from \"react-use\";\n\nconst pad = (n: number): string => padStart(String(n), 2, \"0\");\n\nconst calcRemaining = (expiration: Dayjs): number =>\n  Math.max(expiration.diff(dayjs()), 0);\n\ninterface Countdown {\n  remaining: {\n    minutes: number;\n    seconds: number;\n    formatted: string;\n  };\n  reset: () => void;\n  isRunning: boolean;\n  start: (duration: number) => void;\n}\n\ninterface CountdownOptions {\n  onExpire?: () => void;\n}\n\nexport const useCountdown = ({\n  onExpire = identity,\n}: CountdownOptions = {}): Countdown => {\n  const expiration = useRef<Dayjs>(dayjs());\n  const [remaining, setRemaining] = useState(0);\n  const seconds = Math.round(remaining / 1000);\n  const minutes = Math.floor(seconds / 60);\n\n  useInterval(\n    () => {\n      const newValue = calcRemaining(expiration.current);\n\n      if (!newValue) {\n        onExpire();\n      }\n\n      setRemaining(newValue);\n    },\n    remaining > 0 ? 1000 : null\n  );\n\n  return {\n    isRunning: remaining > 0,\n    remaining: {\n      minutes,\n      seconds,\n      formatted: `${pad(minutes)}:${pad(seconds % 60)}`,\n    },\n    start: (duration: number) => {\n      expiration.current = dayjs().add(duration, \"milliseconds\");\n      setRemaining(calcRemaining(expiration.current));\n    },\n    reset: () => setRemaining(0),\n  };\n};\n","import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value !== null) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n"],"names":["FretsGrid","chakra","Grid","baseStyle","top","left","right","bottom","position","pointerEvents","Fret","alignItems","flexDirection","justifyContent","_before","w","background","Nut","Box","content","FretMarker","Circle","h","bg","fretboard","useRecoilValue","fretboardState","leftHanded","leftHandedState","fretMarkers","fretMarkersState","columns","fretCount","templateColumns","times","map","i","fretNum","numDots","hasMarker","includes","renderMarker","styles","undefined","sx","templateRows","NotesGrid","SimpleGrid","Note","color","display","borderRadius","transform","activeNotes","onNoteClick","identity","notes","fretboardNotesState","note","activeNote","find","displayName","onClick","StringsGrid","String","Flex","boxShadow","tuning","length","_","guages","Board","isPortrait","useOrientation","type","useState","isOpen","setOpen","cancelRef","useRef","useEffect","isCentered","onClose","leastDestructiveRef","mx","textAlign","as","VStack","pb","FcRotateToLandscape","boxSize","fretboards","id","reverse","name","gameDurations","label","value","seedState","atom","key","default","effects_UNSTABLE","localStorageEffect","Math","random","queueState","selector","get","shuffle","getNoteNames","pointerState","activeNotesState","pointerProxySelector","set","newValue","reset","queue","DefaultValue","targetNoteState","targetNoteCountState","filter","totalAttemptsState","totalCorrectState","gameAttemptsState","gameCorrectState","statProxySelector","Number","gameStatsState","game","correct","attempts","percent","total","gameProxySelector","answerIndicatorState","count","nextActiveNotes","without","config","fretboardIdState","flatMap","steps","repeat","simple","string","gameDurationState","ntnStats","ntnGameStatsState","ftnStats","fntGameStatsState","isCorrect","halfNotesState","pad","n","padStart","calcRemaining","expiration","max","diff","dayjs","useCountdown","onExpire","remaining","setRemaining","seconds","round","minutes","floor","useInterval","current","isRunning","formatted","start","duration","add","sharps","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","halfNotes","noteName","isNumber","defaultValue","node","setSelf","onSet","ls"],"sourceRoot":""}