{"version":3,"file":"static/js/fretboard-reference.4776cf51.chunk.js","mappings":"yLAMMA,EAAU,CACd,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,KACD,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,MA0CH,IAnC4B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvBC,GAAYC,EAAAA,EAAAA,IAAeC,EAAAA,IAEjC,OACE,SAAC,KAAD,CACEC,GAAI,EACJC,EAAE,OACFC,QAAS,EACTC,KAAK,QACLC,gBAAgB,iBALlB,SAOGT,EAAQU,KAAI,SAACC,EAAOC,GAAR,OACX,SAAC,EAAAC,SAAD,UACGF,EAAMD,KAAI,SAACI,EAAMC,GAAP,OACT,SAAC,KAAD,CAEEC,WAAYJ,EAAM,EAClBK,QAA0B,IAAjBN,EAAMO,OAAe,QAAU,EAAIH,EAH9C,UAKE,SAAC,KAAD,CACET,EAAE,OACFa,aAAW,EACXC,YAAY,OACZnB,QAAS,kBAAMA,EAAQa,IAJzB,UAMGO,EAAAA,EAAAA,IAAkBP,EAAMZ,MAVtBa,OAHIH,U,iICOvB,UA/B+B,WAC7B,IAAMV,GAAYC,EAAAA,EAAAA,IAAeC,EAAAA,IAC3BO,GAAQR,EAAAA,EAAAA,IAAemB,EAAAA,IAC7B,GAAoCC,EAAAA,EAAAA,UAAiB,IAArD,eAAOC,EAAP,KAAmBC,EAAnB,KAEMC,GAAcC,EAAAA,EAAAA,UAClB,kBACEhB,EAAMiB,QACJ,SAACC,EAAOf,GAAR,OACGU,GAAcV,EAAKgB,OAASN,EAQzBK,EARJ,kBAESA,GAFT,oBAIWf,GAJX,IAKQiB,aAAaV,EAAAA,EAAAA,IAAkBP,EAAKgB,KAAM5B,SAIpD,MAEJ,CAACsB,EAAYtB,IAGf,OACE,iCACE,SAAC,IAAD,CAAWwB,YAAaA,KACxB,SAAC,IAAD,CAAUzB,QAASwB","sources":["components/Keyboard.tsx","pages/fretboard-reference.tsx"],"sourcesContent":["import { Button, Grid, GridItem } from \"@chakra-ui/react\";\nimport React, { FC, Fragment } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { halfNotesState } from \"state\";\nimport { toDisplayNoteName } from \"utils\";\n\nconst columns = [\n  [\"C\", \"C#\"],\n  [\"D\", \"D#\"],\n  [\"E\"],\n  [\"F\", \"F#\"],\n  [\"G\", \"G#\"],\n  [\"A\", \"A#\"],\n  [\"B\"],\n];\n\ninterface Props {\n  onClick: (noteName: string) => void;\n}\n\nconst Keyboard: FC<Props> = ({ onClick }) => {\n  const halfNotes = useRecoilValue(halfNotesState);\n\n  return (\n    <Grid\n      px={2}\n      h=\"100%\"\n      gridGap={2}\n      maxH=\"200px\"\n      templateColumns=\"repeat(7, 1fr)\"\n    >\n      {columns.map((notes, col) => (\n        <Fragment key={col}>\n          {notes.map((note, row) => (\n            <GridItem\n              key={row}\n              gridColumn={col + 1}\n              gridRow={notes.length === 1 ? \"1 / 3\" : 2 - row}\n            >\n              <Button\n                h=\"100%\"\n                isFullWidth\n                colorScheme=\"blue\"\n                onClick={() => onClick(note)}\n              >\n                {toDisplayNoteName(note, halfNotes)}\n              </Button>\n            </GridItem>\n          ))}\n        </Fragment>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Keyboard;\n","import Fretboard from \"components/Fretboard\";\nimport Keyboard from \"components/Keyboard\";\nimport React, { FC, useMemo, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { fretboardNotesState, halfNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { toDisplayNoteName } from \"utils\";\n\nconst FretboardReference: FC = () => {\n  const halfNotes = useRecoilValue(halfNotesState);\n  const notes = useRecoilValue(fretboardNotesState);\n  const [noteFilter, setNoteFilter] = useState<string>(\"\");\n\n  const activeNotes = useMemo<INote[]>(\n    () =>\n      notes.reduce<INote[]>(\n        (accum, note) =>\n          !noteFilter || note.name === noteFilter\n            ? [\n                ...accum,\n                {\n                  ...note,\n                  displayName: toDisplayNoteName(note.name, halfNotes),\n                },\n              ]\n            : accum,\n        []\n      ),\n    [noteFilter, halfNotes]\n  );\n\n  return (\n    <>\n      <Fretboard activeNotes={activeNotes} />\n      <Keyboard onClick={setNoteFilter} />\n    </>\n  );\n};\n\nexport default FretboardReference;\n"],"names":["columns","onClick","halfNotes","useRecoilValue","halfNotesState","px","h","gridGap","maxH","templateColumns","map","notes","col","Fragment","note","row","gridColumn","gridRow","length","isFullWidth","colorScheme","toDisplayNoteName","fretboardNotesState","useState","noteFilter","setNoteFilter","activeNotes","useMemo","reduce","accum","name","displayName"],"sourceRoot":""}