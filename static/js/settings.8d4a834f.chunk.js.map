{"version":3,"sources":["utils/maths.ts","utils/notes.ts","utils/state.ts","state/statistics.ts","state/fretboard.ts","state/settings.ts","config/index.ts","state/find-the-note/notes.ts","state/find-the-note/statistics.ts","state/find-the-note/index.ts","state/name-the-note/notes.ts","state/name-the-note/statistics.ts","state/name-the-note/index.ts","pages/settings.tsx"],"names":["percent","value","total","round","getNoteNames","times","map","sharps","Note","simplify","repeat","midiToNoteName","midiNumber","Midi","pitchClass","toDisplayNoteName","note","halfNotes","noteName","isNumber","enharmonic","Math","random","localStorageEffect","defaultValue","node","setSelf","onSet","key","ls","newValue","DefaultValue","gameStatsState","selector","get","ntnStats","ntnGameStatsState","ftnStats","fntGameStatsState","game","set","reset","fretboardState","config","fretboardIdState","fretboardNotesState","fretboard","leftHanded","leftHandedState","flatMap","tuning","i","fretCount","steps","id","simple","name","string","atom","default","effects_UNSTABLE","fretMarkersState","halfNotesState","fretboards","h","fretMarkers","guages","reverse","seedState","queueState","shuffle","pointerState","activeNotesState","pointerProxySelector","queue","targetNoteState","targetNoteCountState","filter","length","totalAttemptsState","totalCorrectState","gameAttemptsState","gameCorrectState","statProxySelector","Number","correct","attempts","gameProxySelector","count","activeNotes","nextActiveNotes","without","isCorrect","FretboardSelect","useRecoilState","setValue","onChange","event","target","mt","isExternal","color","alignItems","display","href","ml","as","ExternalLinkIcon","LeftHanded","isChecked","setChecked","checked","FretMarkers","HalfNotes","SettingsPage","Card","spacing"],"mappings":"2SAEaA,EAAU,SAACC,EAAeC,GAAhB,OACrBA,EAAQ,EAAIC,gBAAOF,EAAQC,EAAS,KAAO,G,SCChCE,EAAe,kBAC1BC,gBAAM,IAAIC,KAAI,SAACC,GAAD,OAAYC,IAAKC,SAAS,IAAMC,iBAAO,IAAKH,QAE/CI,EAAiB,SAACC,GAAD,OAC5BC,IAAKF,eAAeC,EAAY,CAAEL,QAAQ,EAAMO,YAAY,KAKjDC,EAAoB,SAC/BC,GAEY,IADZC,EACW,uDADa,SAElBC,EAAWC,mBAASH,GAAQL,EAAeK,GAAQA,EAEzD,OAAIR,IAAKY,WAAWF,KAAcA,GAA0B,WAAdD,EACrCC,EAGS,UAAdD,GAIGI,KAAKC,SAAW,GAHdd,IAAKY,WAAWF,GAGgCA,G,iBCxB9CK,EACX,SAAIC,GAAJ,OACA,YAA+B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACVC,EAAG,sBAAkBH,EAAKG,KAC1B3B,EAAQ4B,MAAUD,GAEV,OAAV3B,EACFyB,EAAQzB,GACCuB,IACTK,MAAUD,EAAKJ,GACfE,EAAQF,IAGVG,GAAM,SAACG,GACDA,aAAoBC,IACtBF,SAAUD,GAEVC,MAAUD,EAAKE,S,kVCXVE,EAAiBC,YAAsB,CAClDL,IAAK,iBACLM,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACSC,EAAaD,EAAIE,KAAxBlC,MACOmC,EAAaH,EAAII,KAAxBpC,MAER,MAAO,CAAC,aAEJqC,KAAM,iBACHJ,GAHA,2BAMAE,GANA,IAOHE,KAAM,oBAIZC,IAAK,WAAYV,GAAc,IAAvBW,EAAsB,EAAtBA,MACFX,aAAoBC,MACtBU,EAAML,KACNK,EAAMH,U,iCC7BZ,oHAOaI,EAAiBT,YAAqB,CACjDL,IAAK,iBACLM,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAaS,IAAkBT,EAAIU,SAG7BC,EAAsBZ,YAAkB,CACnDL,IAAK,sBACLM,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAY,EAAYZ,EAAIQ,GAChBK,EAAab,EAAIc,KAEvB,OAAOC,kBAAQH,EAAUI,QAAQ,SAAClC,EAAMmC,GAAP,OAC/B9C,gBAAMyC,EAAUM,UAAY,GAAG9C,KAAI,SAAC+C,GAClC,IAAMC,EAAKtC,EAAON,iBAAOqC,EAAa,IAAM,IAAKM,GAC3CE,EAAS/C,IAAKC,SAAS6C,GAG7B,MAAO,CACLA,KACAE,KAJWT,EAAavC,IAAKY,WAAWmC,GAAUA,EAKlDE,OAAQN,EAAI,a,iCC3BtB,6JAIaP,EAAmBc,YAAmB,CACjD9B,IAAK,mBACL+B,QAAS,aACTC,iBAAkB,CAACrC,iBAGRyB,EAAkBU,YAAc,CAC3C9B,IAAK,kBACL+B,SAAS,EACTC,iBAAkB,CAACrC,iBAGRsC,EAAmBH,YAAc,CAC5C9B,IAAK,mBACL+B,SAAS,EACTC,iBAAkB,CAACrC,iBAGRuC,EAAiBJ,YAAiB,CAC7C9B,IAAK,iBACL+B,QAAS,SACTC,iBAAkB,CAACrC,kB,iCCvBrB,kCAAO,IAAMwC,EAA+C,CAC1D,aAAc,CACZC,EAAG,IACHZ,UAAW,GACXE,GAAI,aACJW,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3BX,KAAM,oCACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKiB,WAEzC,SAAU,CACRH,EAAG,IACHZ,UAAW,GACXE,GAAI,SACJW,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3BX,KAAM,2BACNN,OAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAAMiB,WAE/C,SAAU,CACRH,EAAG,IACHZ,UAAW,GACXE,GAAI,SACJW,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3BX,KAAM,2BACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,KAAM,IAAK,KAAKiB,WAE1C,UAAW,CACTH,EAAG,IACHZ,UAAW,GACXE,GAAI,UACJW,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC3BX,KAAM,4BACNN,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKiB,WAEzC,aAAc,CACZH,EAAG,IACHZ,UAAW,GACXE,GAAI,aACJW,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,UAC9BjB,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKiB,UAC5CX,KAAM,qCAER,aAAc,CACZQ,EAAG,IACHZ,UAAW,GACXE,GAAI,aACJW,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,GAAGC,UACrBjB,OAAQ,CAAC,IAAK,IAAK,IAAK,KAAKiB,UAC7BX,KAAM,mCAER,aAAc,CACZQ,EAAG,IACHZ,UAAW,GACXE,GAAI,aACJW,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGC,UACxBjB,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKiB,UAClCX,KAAM,qC,mQCtDJY,EAAYV,YAAa,CAC7B9B,IAAK,0BACL+B,QAAS,EACTC,iBAAkB,CAACrC,YAAmBF,KAAKC,aAMvC+C,EAAapC,YAAmB,CACpCL,IAAK,2BACLM,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAaoC,kBAAQlE,cAAgB8B,EAAIkC,OAM1CG,EAAeb,YAAa,CAChC9B,IAAK,6BACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAMRiD,EAAmBd,YAAc,CAC5C9B,IAAK,iCACL+B,QAAS,GACTC,iBAAkB,CAACrC,iBAQRkD,EAAuBxC,YAAiB,CACnDL,IAAK,qCACLM,IAAK,mBAAaA,EAAb,EAAGA,KAAcqC,IACtB/B,IAAK,WAAsBV,GAAc,IAAjCI,EAAgC,EAAhCA,IAAKM,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACViC,EAAQxC,EAAImC,GAEdvC,aAAoBC,MAAiB2C,EAAM5C,IAE7CW,EAAM8B,GACN/B,EAAI4B,EAAWlC,EAAIkC,GAAa/C,KAAKC,WAGrCkB,EAAI+B,EAAczC,GAIpBW,EAAM+B,MAOGG,EAAkB1C,YAAiB,CAC9CL,IAAK,gCACLM,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAaA,EAAImC,GAAYnC,EAAIqC,OAM3BK,EAAuB3C,YAAiB,CACnDL,IAAK,qCACLM,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OACH2C,iBAAO3C,EAAIW,KAAsB,CAAC,OAAQX,EAAIyC,KAAmBG,UC7E/DC,EAAqBrB,YAAa,CACtC9B,IAAK,mCACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGfyD,EAAoBtB,YAAa,CACrC9B,IAAK,kCACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGf0D,EAAoBvB,YAAa,CACrC9B,IAAK,kCACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGf2D,EAAmBxB,YAAa,CACpC9B,IAAK,iCACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGR4D,EAAoBlD,YAAkB,CACjDL,IAAK,kCACLM,IAAK,kBAAM,GACXM,IAAK,WAAsBV,GAAc,IAAjCI,EAAgC,EAAhCA,IAAKM,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACZX,aAAoBC,KACtBU,EAAMyC,GACNzC,EAAMwC,KAENzC,EAAIyC,EAAmB/C,EAAI+C,GAAqB,GAChDzC,EAAIuC,EAAoB7C,EAAI6C,GAAsB,GAClDvC,EAAI0C,EAAkBhD,EAAIgD,GAAoBE,OAAOtD,IACrDU,EAAIwC,EAAmB9C,EAAI8C,GAAqBI,OAAOtD,QAKhDE,EAAiBC,YAAqB,CACjDL,IAAK,+BACLM,IAAK,gBAAGA,EAAH,EAAGA,IAAH,MAAc,CACjBK,KAAM,CACJ8C,QAASnD,EAAIgD,GACbI,SAAUpD,EAAI+C,GACdjF,QAASA,YAAQkC,EAAIgD,GAAmBhD,EAAI+C,KAE9C/E,MAAO,CACLmF,QAASnD,EAAI8C,GACbM,SAAUpD,EAAI6C,GACd/E,QAASA,YAAQkC,EAAI8C,GAAoB9C,EAAI6C,OAGjDvC,IAAK,WAAYV,GAAc,IAAvBW,EAAsB,EAAtBA,MACFX,aAAoBC,MACtBU,EAAMyC,GACNzC,EAAMwC,GACNxC,EAAMuC,GACNvC,EAAMsC,OCpDCQ,EAAoBtD,YAAuB,CACtDL,IAAK,kCACLM,IAAK,kBAAM,MACXM,IAAK,WAAsBV,GAAc,IAAjCI,EAAgC,EAAhCA,IAAKM,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAChB,GAAIX,aAAoBC,IAKtB,OAHAU,EAAM0C,QAEN1C,EAAMgC,GAKR,GAAiB,OAAb3C,GAAqBA,EAAS0B,OAAStB,EAAIyC,GAK7C,OAHAnC,EAAI2C,GAAmB,QAEvB3C,EAAIiC,EAAsBvC,EAAIuC,GAAwB,GAKxD,IAAMe,EAAQtD,EAAI0C,GACZa,EAAcvD,EAAIsC,GAClBkB,EAAe,sBAAOC,kBAAQF,EAAa3D,IAA5B,CAAuCA,IAG5D,GAAI4D,EAAgBZ,SAAWU,EAK7B,OAHAhD,EAAI2C,GAAmB,QAEvB3C,EAAIiC,EAAsBvC,EAAIuC,GAAwB,GAKxDjC,EAAIgC,EAAkBkB,O,4ICzCpBtB,EAAYV,YAAa,CAC7B9B,IAAK,0BACL+B,QAAS,EACTC,iBAAkB,CAACrC,YAAmBF,KAAKC,aAGvC+C,EAAapC,YAAkB,CACnCL,IAAK,2BACLM,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAaoC,kBAAQpC,EAAIW,KAAsBX,EAAIkC,OAGpDG,EAAeb,YAAa,CAChC9B,IAAK,6BACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGRkD,EAAuBxC,YAAiB,CACnDL,IAAK,qCACLM,IAAK,mBAAaA,EAAb,EAAGA,KAAcqC,IACtB/B,IAAK,WAAsBV,GAAc,IAAjCI,EAAgC,EAAhCA,IAAKM,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACViC,EAAQxC,EAAImC,GAEdvC,aAAoBC,MAAiB2C,EAAM5C,IAC7CW,EAAM8B,GACN/B,EAAI4B,EAAWlC,EAAIkC,GAAa/C,KAAKC,WAErCkB,EAAI+B,EAAczC,MAKX6C,EAAkB1C,YAAgB,CAC7CL,IAAK,gCACLM,IAAK,gBAAGA,EAAH,EAAGA,IAAH,OAAaA,EAAImC,GAAYnC,EAAIqC,OCpClCQ,EAAqBrB,YAAa,CACtC9B,IAAK,mCACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGfyD,EAAoBtB,YAAa,CACrC9B,IAAK,kCACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGf0D,EAAoBvB,YAAa,CACrC9B,IAAK,kCACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGf2D,EAAmBxB,YAAa,CACpC9B,IAAK,iCACL+B,QAAS,EACTC,iBAAkB,CAACrC,iBAGR4D,EAAoBlD,YAAkB,CACjDL,IAAK,kCACLM,IAAK,kBAAM,GACXM,IAAK,WAAsBV,GAAc,IAAjCI,EAAgC,EAAhCA,IAAKM,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MACZX,aAAoBC,KACtBU,EAAMyC,GACNzC,EAAMwC,KAENzC,EAAIyC,EAAmB/C,EAAI+C,GAAqB,GAChDzC,EAAIuC,EAAoB7C,EAAI6C,GAAsB,GAClDvC,EAAI0C,EAAkBhD,EAAIgD,GAAoBE,OAAOtD,IACrDU,EAAIwC,EAAmB9C,EAAI8C,GAAqBI,OAAOtD,QAKhDE,EAAiBC,YAAqB,CACjDL,IAAK,+BACLM,IAAK,gBAAGA,EAAH,EAAGA,IAAH,MAAc,CACjBK,KAAM,CACJ8C,QAASnD,EAAIgD,GACbI,SAAUpD,EAAI+C,GACdjF,QAASA,YAAQkC,EAAIgD,GAAmBhD,EAAI+C,KAE9C/E,MAAO,CACLmF,QAASnD,EAAI8C,GACbM,SAAUpD,EAAI6C,GACd/E,QAASA,YAAQkC,EAAI8C,GAAoB9C,EAAI6C,OAGjDvC,IAAK,WAAYV,GAAc,IAAvBW,EAAsB,EAAtBA,MACFX,aAAoBC,MACtBU,EAAMyC,GACNzC,EAAMwC,GACNxC,EAAMuC,GACNvC,EAAMsC,OC1DCQ,EAAoBtD,YAAgB,CAC/CL,IAAK,kCACLM,IAAK,mBAAaA,EAAb,EAAGA,KAAcyC,IACtBnC,IAAK,WAAsBV,GAAc,IAAjCI,EAAgC,EAAhCA,IAAKM,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAChB,GAAIX,aAAoBC,IAKtB,OAHAU,EAAM0C,QAEN1C,EAAMgC,GAIR,IAAMmB,EAAY9D,EAAS0B,OAAStB,EAAIyC,GAAiBnB,KAGzDhB,EAAI2C,EAAmBS,GAEnBA,GAEFpD,EAAIiC,EAAsBvC,EAAIuC,GAAwB,O,sOCGtDoB,EAAkB,WAAO,IAAD,EACFC,YAAelD,KADb,mBACrB3C,EADqB,KACd8F,EADc,KAG5B,OACE,eAAC,IAAD,WACE,cAAC,IAAD,wBACA,cAAC,IAAD,CACE9F,MAAOA,EACP+F,SAAU,SAACC,GAAD,OAAWF,EAASE,EAAMC,OAAOjG,QAF7C,SAIGK,cAAIqC,KAAmB,SAACG,GAAD,OACtB,wBAA2B7C,MAAO6C,EAAUQ,GAA5C,SACGR,EAAUU,MADAV,EAAUQ,SAK3B,eAAC,IAAD,CACE6C,GAAI,EACJC,YAAU,EACVC,MAAM,WACNC,WAAW,SACXC,QAAQ,cACRC,KAAK,wIANP,gCASE,cAAC,IAAD,CAAMC,GAAI,EAAGC,GAAIC,aAMnBC,EAAa,WAAO,IAAD,EACSd,YAAe9C,KADxB,mBAChB6D,EADgB,KACLC,EADK,KAGvB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,0BACA,cAAC,IAAD,CACED,UAAWA,EACXb,SAAU,SAACC,GAAD,OAAWa,EAAWb,EAAMC,OAAOa,gBAM/CC,EAAc,WAAO,IAAD,EACQlB,YAAejC,KADvB,mBACjBgD,EADiB,KACNC,EADM,KAGxB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,2BACA,cAAC,IAAD,CACED,UAAWA,EACXb,SAAU,SAACC,GAAD,OAAWa,EAAWb,EAAMC,OAAOa,gBAM/CE,EAAY,WAAO,IAAD,EACInB,YAAehC,KADnB,mBACf7D,EADe,KACR8F,EADQ,KAGtB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,yBACA,cAAC,IAAD,CACE9F,MAAOA,EACP+F,SAAU,SAAC/F,GAAD,OAAW8F,EAAS9F,IAFhC,SAIE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOA,MAAM,SAAb,oBACA,cAAC,IAAD,CAAOA,MAAM,SAAb,oBACA,cAAC,IAAD,CAAOA,MAAM,QAAb,4BAOGiH,EAAmB,kBAC9B,cAAC,IAAD,UACE,eAAC,IAAD,CAAQR,GAAIS,IAAMC,QAAS,EAA3B,UACE,cAACvB,EAAD,IACA,cAACe,EAAD,IACA,cAACI,EAAD,IACA,cAACC,EAAD,UAKSC","file":"static/js/settings.8d4a834f.chunk.js","sourcesContent":["import { round } from \"lodash\";\n\nexport const percent = (value: number, total: number): number =>\n  total > 0 ? round((value / total) * 100) : 0;\n","import { Midi, Note } from \"@tonaljs/tonal\";\nimport { isNumber, repeat, times } from \"lodash\";\nimport { IHalfNotes } from \"types\";\n\nexport const getNoteNames = (): string[] =>\n  times(12).map((sharps) => Note.simplify(\"C\" + repeat(\"#\", sharps)));\n\nexport const midiToNoteName = (midiNumber: number): string =>\n  Midi.midiToNoteName(midiNumber, { sharps: true, pitchClass: true });\n\nexport const isEnharmonicEquivalent = (a: string, b: string): boolean =>\n  a === b || Note.enharmonic(a) === b;\n\nexport const toDisplayNoteName = (\n  note: string | number,\n  halfNotes: IHalfNotes = \"sharps\"\n): string => {\n  const noteName = isNumber(note) ? midiToNoteName(note) : note;\n\n  if (Note.enharmonic(noteName) === noteName || halfNotes === \"sharps\") {\n    return noteName;\n  }\n\n  if (halfNotes === \"flats\") {\n    return Note.enharmonic(noteName);\n  }\n\n  return Math.random() > 0.5 ? Note.enharmonic(noteName) : noteName;\n};\n","import * as ls from \"local-storage\";\nimport { AtomEffect, DefaultValue } from \"recoil\";\n\nexport const localStorageEffect =\n  <T>(defaultValue?: T): AtomEffect<T> =>\n  ({ node, setSelf, onSet }) => {\n    const key = `noteTrainer.${node.key}`;\n    const value = ls.get<T>(key);\n\n    if (value !== null) {\n      setSelf(value);\n    } else if (defaultValue) {\n      ls.set<T>(key, defaultValue);\n      setSelf(defaultValue);\n    }\n\n    onSet((newValue) => {\n      if (newValue instanceof DefaultValue) {\n        ls.remove(key);\n      } else {\n        ls.set<T>(key, newValue);\n      }\n    });\n  };\n","import { DefaultValue, selector } from \"recoil\";\nimport { IStats } from \"types\";\nimport { gameStatsState as fntGameStatsState } from \"./find-the-note\";\nimport { gameStatsState as ntnGameStatsState } from \"./name-the-note\";\n\ninterface GameStats extends IStats {\n  game: string;\n}\n\nexport const gameStatsState = selector<GameStats[]>({\n  key: \"gameStatsState\",\n  get: ({ get }) => {\n    const { total: ntnStats } = get(ntnGameStatsState);\n    const { total: ftnStats } = get(fntGameStatsState);\n\n    return [\n      {\n        game: \"Name the Note\",\n        ...ntnStats,\n      },\n      {\n        ...ftnStats,\n        game: \"Find the Note\",\n      },\n    ];\n  },\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(ntnGameStatsState);\n      reset(fntGameStatsState);\n    }\n  },\n});\n","import { Note } from \"@tonaljs/tonal\";\nimport * as config from \"config\";\nimport { flatMap, repeat, times } from \"lodash\";\nimport { selector } from \"recoil\";\nimport { IFretboard, INote } from \"types\";\nimport { fretboardIdState, leftHandedState } from \"./settings\";\n\nexport const fretboardState = selector<IFretboard>({\n  key: \"fretboardState\",\n  get: ({ get }) => config.fretboards[get(fretboardIdState)],\n});\n\nexport const fretboardNotesState = selector<INote[]>({\n  key: \"fretboardNotesState\",\n  get: ({ get }) => {\n    const fretboard = get(fretboardState);\n    const leftHanded = get(leftHandedState);\n\n    return flatMap(fretboard.tuning, (note, i) =>\n      times(fretboard.fretCount + 1).map((steps) => {\n        const id = note + repeat(leftHanded ? \"b\" : \"#\", steps);\n        const simple = Note.simplify(id);\n        const name = leftHanded ? Note.enharmonic(simple) : simple;\n\n        return {\n          id,\n          name,\n          string: i + 1,\n        };\n      })\n    );\n  },\n});\n","import { atom } from \"recoil\";\nimport { IFretboardId, IHalfNotes } from \"types\";\nimport { localStorageEffect } from \"utils\";\n\nexport const fretboardIdState = atom<IFretboardId>({\n  key: \"fretboardIdState\",\n  default: \"standard-6\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const leftHandedState = atom<boolean>({\n  key: \"leftHandedState\",\n  default: false,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const fretMarkersState = atom<boolean>({\n  key: \"fretMarkersState\",\n  default: true,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const halfNotesState = atom<IHalfNotes>({\n  key: \"halfNotesState\",\n  default: \"random\",\n  effects_UNSTABLE: [localStorageEffect()],\n});\n","import { IFretboardId, IFretboard } from \"types\";\n\nexport const fretboards: Record<IFretboardId, IFretboard> = {\n  \"standard-6\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-6\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Standard Tuning\",\n    tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n  },\n  \"e-flat\": {\n    h: 220,\n    fretCount: 12,\n    id: \"e-flat\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - E Flat\",\n    tuning: [\"D#\", \"G#\", \"C#\", \"F#\", \"A#\", \"D#\"].reverse(),\n  },\n  \"open-e\": {\n    h: 220,\n    fretCount: 12,\n    id: \"open-e\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Open E\",\n    tuning: [\"E\", \"B\", \"E\", \"G#\", \"B\", \"E\"].reverse(),\n  },\n  \"dad-gad\": {\n    h: 220,\n    fretCount: 12,\n    id: \"dad-gad\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [6, 5, 4, 3, 2, 1].reverse(),\n    name: \"6 String Guitar - Dad-Gad\",\n    tuning: [\"D\", \"A\", \"D\", \"G\", \"A\", \"D\"].reverse(),\n  },\n  \"standard-7\": {\n    h: 254,\n    fretCount: 12,\n    id: \"standard-7\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4, 3, 2, 1].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\", \"B\", \"E\"].reverse(),\n    name: \"7 String Guitar - Standard Tuning\",\n  },\n  \"standard-4\": {\n    h: 200,\n    fretCount: 12,\n    id: \"standard-4\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [7, 6, 5, 4].reverse(),\n    tuning: [\"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"4 String Bass - Standard Tuning\",\n  },\n  \"standard-5\": {\n    h: 220,\n    fretCount: 12,\n    id: \"standard-5\",\n    fretMarkers: [3, 5, 7, 9, 12],\n    guages: [8, 7, 6, 5, 4].reverse(),\n    tuning: [\"B\", \"E\", \"A\", \"D\", \"G\"].reverse(),\n    name: \"5 String Bass - Standard Tuning\",\n  },\n};\n","import { filter } from \"lodash\";\nimport { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { fretboardNotesState } from \"state\";\nimport { INote } from \"types\";\nimport { getNoteNames, localStorageEffect } from \"utils\";\n\n/**\n * Seed for queue shuffling.\n */\nconst seedState = atom<number>({\n  key: \"find-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\n/**\n * Maintain a queue for a consistent spread of notes.\n */\nconst queueState = selector<string[]>({\n  key: \"find-the-note/queueState\",\n  get: ({ get }) => shuffle(getNoteNames(), get(seedState)),\n});\n\n/**\n * Pointer to the current note in the queue.\n */\nconst pointerState = atom<number>({\n  key: \"find-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * Notes the user has selected to be rendered on the fretboard.\n */\nexport const activeNotesState = atom<INote[]>({\n  key: \"find-the-note/activeNotesState\",\n  default: [],\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\n/**\n * A wrapper around pointerState which handles reshuffling the\n * queue when we reach the end, moving the pointer and clearing the\n * fretboard.\n */\nexport const pointerProxySelector = selector<number>({\n  key: \"find-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      // Reshuffle queue and point to the start\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      // Move pointer to next note\n      set(pointerState, newValue);\n    }\n\n    // Clear fretboard\n    reset(activeNotesState);\n  },\n});\n\n/**\n * Current game note.\n */\nexport const targetNoteState = selector<string>({\n  key: \"find-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n\n/**\n * Number of times the target note appears on the fretboard.\n */\nexport const targetNoteCountState = selector<number>({\n  key: \"find-the-note/targetNoteCountState\",\n  get: ({ get }) =>\n    filter(get(fretboardNotesState), [\"name\", get(targetNoteState)]).length,\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"find-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"find-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"find-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"find-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"find-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"find-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { without } from \"lodash\";\nimport { DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport {\n  activeNotesState,\n  pointerProxySelector,\n  targetNoteCountState,\n  targetNoteState,\n} from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote | null>({\n  key: \"find-the-note/gameProxySelector\",\n  get: () => null,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    // Incorrect\n    if (newValue === null || newValue.name !== get(targetNoteState)) {\n      // Update failed attempt stat\n      set(statProxySelector, false);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Correct\n    const count = get(targetNoteCountState);\n    const activeNotes = get(activeNotesState);\n    const nextActiveNotes = [...without(activeNotes, newValue), newValue];\n\n    // All notes found\n    if (nextActiveNotes.length === count) {\n      // Update successful attempt stat\n      set(statProxySelector, true);\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n      return;\n    }\n\n    // Draw selected note on the fretboard\n    set(activeNotesState, nextActiveNotes);\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { shuffle } from \"shuffle-seed\";\nimport { INote } from \"types\";\nimport { localStorageEffect } from \"utils\";\nimport { fretboardNotesState } from \"../fretboard\";\n\nconst seedState = atom<number>({\n  key: \"name-the-note/seedState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect(Math.random())],\n});\n\nconst queueState = selector<INote[]>({\n  key: \"name-the-note/queueState\",\n  get: ({ get }) => shuffle(get(fretboardNotesState), get(seedState)),\n});\n\nconst pointerState = atom<number>({\n  key: \"name-the-note/pointerState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const pointerProxySelector = selector<number>({\n  key: \"name-the-note/pointerProxySelector\",\n  get: ({ get }) => get(pointerState),\n  set: ({ get, set, reset }, newValue) => {\n    const queue = get(queueState);\n\n    if (newValue instanceof DefaultValue || !queue[newValue]) {\n      reset(pointerState);\n      set(seedState, get(seedState) + Math.random());\n    } else {\n      set(pointerState, newValue);\n    }\n  },\n});\n\nexport const targetNoteState = selector<INote>({\n  key: \"name-the-note/targetNoteState\",\n  get: ({ get }) => get(queueState)[get(pointerState)],\n});\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { IGameStats } from \"types\";\nimport { localStorageEffect, percent } from \"utils\";\n\nconst totalAttemptsState = atom<number>({\n  key: \"name-the-note/totalAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst totalCorrectState = atom<number>({\n  key: \"name-the-note/totalCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameAttemptsState = atom<number>({\n  key: \"name-the-note/gameAttemptsState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nconst gameCorrectState = atom<number>({\n  key: \"name-the-note/gameCorrectState\",\n  default: 0,\n  effects_UNSTABLE: [localStorageEffect()],\n});\n\nexport const statProxySelector = selector<boolean>({\n  key: \"name-the-note/statProxySelector\",\n  get: () => true,\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n    } else {\n      set(gameAttemptsState, get(gameAttemptsState) + 1);\n      set(totalAttemptsState, get(totalAttemptsState) + 1);\n      set(gameCorrectState, get(gameCorrectState) + Number(newValue));\n      set(totalCorrectState, get(totalCorrectState) + Number(newValue));\n    }\n  },\n});\n\nexport const gameStatsState = selector<IGameStats>({\n  key: \"name-the-note/gameStatsState\",\n  get: ({ get }) => ({\n    game: {\n      correct: get(gameCorrectState),\n      attempts: get(gameAttemptsState),\n      percent: percent(get(gameCorrectState), get(gameAttemptsState)),\n    },\n    total: {\n      correct: get(totalCorrectState),\n      attempts: get(totalAttemptsState),\n      percent: percent(get(totalCorrectState), get(totalAttemptsState)),\n    },\n  }),\n  set: ({ reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      reset(gameCorrectState);\n      reset(gameAttemptsState);\n      reset(totalCorrectState);\n      reset(totalAttemptsState);\n    }\n  },\n});\n","import { DefaultValue, selector } from \"recoil\";\nimport { INote } from \"types\";\nimport { pointerProxySelector, targetNoteState } from \"./notes\";\nimport { statProxySelector } from \"./statistics\";\n\nexport const gameProxySelector = selector<INote>({\n  key: \"name-the-note/gameProxySelector\",\n  get: ({ get }) => get(targetNoteState),\n  set: ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // Reset stats\n      reset(statProxySelector);\n      // Reset game\n      reset(pointerProxySelector);\n      return;\n    }\n\n    const isCorrect = newValue.name === get(targetNoteState).name;\n\n    // Update attempt stat\n    set(statProxySelector, isCorrect);\n\n    if (isCorrect) {\n      // Move on to the next note\n      set(pointerProxySelector, get(pointerProxySelector) + 1);\n    }\n  },\n});\n\nexport * from \"./notes\";\nexport * from \"./statistics\";\n","import {\n  Container,\n  FormControl,\n  FormLabel,\n  HStack,\n  Icon,\n  Link,\n  Radio,\n  RadioGroup,\n  Select,\n  Switch,\n  VStack,\n} from \"@chakra-ui/react\";\nimport Card from \"components/Card\";\nimport * as config from \"config\";\nimport { map } from \"lodash\";\nimport React, { FC } from \"react\";\nimport { HiOutlineExternalLink as ExternalLinkIcon } from \"react-icons/hi\";\nimport { useRecoilState } from \"recoil\";\nimport {\n  fretboardIdState,\n  fretMarkersState,\n  halfNotesState,\n  leftHandedState,\n} from \"state\";\nimport { IFretboardId, IHalfNotes } from \"types\";\n\nconst FretboardSelect = () => {\n  const [value, setValue] = useRecoilState(fretboardIdState);\n\n  return (\n    <FormControl>\n      <FormLabel>Fretboard</FormLabel>\n      <Select\n        value={value}\n        onChange={(event) => setValue(event.target.value as IFretboardId)}\n      >\n        {map(config.fretboards, (fretboard) => (\n          <option key={fretboard.id} value={fretboard.id}>\n            {fretboard.name}\n          </option>\n        ))}\n      </Select>\n      <Link\n        mt={1}\n        isExternal\n        color=\"teal.500\"\n        alignItems=\"center\"\n        display=\"inline-flex\"\n        href=\"https://github.com/stuart-williams/note-trainer/issues/new?assignees=&labels=&template=fretboard-request.md&title=Fretboard%20Request\"\n      >\n        Request a fretboard\n        <Icon ml={1} as={ExternalLinkIcon} />\n      </Link>\n    </FormControl>\n  );\n};\n\nconst LeftHanded = () => {\n  const [isChecked, setChecked] = useRecoilState(leftHandedState);\n\n  return (\n    <FormControl>\n      <FormLabel>Left Handed</FormLabel>\n      <Switch\n        isChecked={isChecked}\n        onChange={(event) => setChecked(event.target.checked)}\n      />\n    </FormControl>\n  );\n};\n\nconst FretMarkers = () => {\n  const [isChecked, setChecked] = useRecoilState(fretMarkersState);\n\n  return (\n    <FormControl>\n      <FormLabel>Fret Markers</FormLabel>\n      <Switch\n        isChecked={isChecked}\n        onChange={(event) => setChecked(event.target.checked)}\n      />\n    </FormControl>\n  );\n};\n\nconst HalfNotes = () => {\n  const [value, setValue] = useRecoilState(halfNotesState);\n\n  return (\n    <FormControl>\n      <FormLabel>Half Notes</FormLabel>\n      <RadioGroup\n        value={value}\n        onChange={(value) => setValue(value as IHalfNotes)}\n      >\n        <HStack>\n          <Radio value=\"random\">Random</Radio>\n          <Radio value=\"sharps\">Sharps</Radio>\n          <Radio value=\"flats\">Flats</Radio>\n        </HStack>\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nexport const SettingsPage: FC = () => (\n  <Container>\n    <VStack as={Card} spacing={6}>\n      <FretboardSelect />\n      <LeftHanded />\n      <FretMarkers />\n      <HalfNotes />\n    </VStack>\n  </Container>\n);\n\nexport default SettingsPage;\n"],"sourceRoot":""}